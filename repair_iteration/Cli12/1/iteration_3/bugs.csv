bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    1)))    {    	non-compiled	[CE]  'else'  without  'if'	85	None	replace
2	[BUG]  [BUGGY]  ||  options.hasOption(arguments))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arguments))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arguments))  {  tokens.add(arg);  }	  ||    options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
3	[BUG]  [BUGGY]  ||  options.hasOption(arg))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg))  {  tokens.add(arg);  }	  ||    options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
4	[BUG]  [BUGGY]  ||  options.hasOption(arguments[i]))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arguments[i]))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arguments[i]))  {  tokens.add(arg);  }	  ||    options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
5	[BUG]  [BUGGY]  ||  options.hasOption(option))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(option))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(option))  {  tokens.add(arg);  }	  ||    options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
6	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	100	None	replace
7	[BUG]  [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	100	None	replace
8	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	3	5	add
9	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	3	5	add
10	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
11	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
12	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
13	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
14	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	151	None	add
15	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	151	None	add
16	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	151	None	add
17	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	151	None	add
18	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	151	None	add
19	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	41	5	add
20	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	41	5	add
21	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	41	5	add
22	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	41	5	add
23	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(!options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(!options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	41	5	add
24	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(!options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(!options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(!options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	41	5	add
25	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  ||  options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  ||  options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    ||  options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
26	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	41	5	add
27	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	41	5	add
28	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  if(!stopAtNonOption  &&  arguments.length  >  2)  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  if(!stopAtNonOption  &&  arguments.length  >  2)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    arguments.length    >    2)    {    if(!stopAtNonOption  &&  arguments.length  >  2)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	add
29	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  if(!stopAtNonOption  &&  arguments.length  >  1)  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  if(!stopAtNonOption  &&  arguments.length  >  1)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    arguments.length    >    2)    {    if(!stopAtNonOption  &&  arguments.length  >  1)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	add
30	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  if(!stopAtNonOption  &&  argument.length  >  2)  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  if(!stopAtNonOption  &&  argument.length  >  2)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    arguments.length    >    2)    {    if(!stopAtNonOption  &&  argument.length  >  2)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	57	None	add
31	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  If(!stopAtNonOption  &&  arguments.length  >  2)  {  [CE]  ';'  expected  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  If(!stopAtNonOption  &&  arguments.length  >  2)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    arguments.length    >    2)    {    If(!stopAtNonOption  &&  arguments.length  >  2)  {	  	non-compiled	[CE]  ';'  expected	57	None	add
32	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  options  =  options.getOption(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  options  =  options.getOption(arg);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
33	[BUG]  [BUGGY]  Option  options  =  options.getOption(i);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  options  =  options.getOption(i);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  options  =  options.getOption(i);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
34	[BUG]  [BUGGY]  Option  options  =  options.getOption(arguments[i]);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  options  =  options.getOption(arguments[i]);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  options  =  options.getOption(arguments[i]);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
35	[BUG]  [BUGGY]  Option  options  =  options.getOption(option);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  options  =  options.getOption(option);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  options  =  options.getOption(option);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
36	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	15	None	add
37	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	15	None	add
38	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  	non-compiled	[CE]  'else'  without  'if'	15	None	add
39	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }	  	non-compiled	[CE]  'else'  without  'if'	15	None	add
40	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  	non-compiled	[CE]  'else'  without  'if'	15	None	add
41	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(!options.hasOption(opt))  {	  if(options.hasOption(opt))    {    if(!options.hasOption(opt))    {    	non-compiled	[CE]  'else'  without  'if'	136	None	replace
42	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!options.hasOption(arg))  {	  if(options.hasOption(opt))    {    if(!options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	136	3	replace
43	[BUG]  [BUGGY]  if(!options.hasOption(arg))  {  [FE]  ComparisonFailure  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg))  {	  if(options.hasOption(opt))    {    if(!options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	136	3	replace
44	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
45	[BUG]  [BUGGY]  if(!eatTheRest)  {  If(!stopAtNonOption)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!eatTheRest)  {  If(!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!eatTheRest)  {  If(!stopAtNonOption)  {	  if(!stopAtNonOption)    {    If(!stopAtNonOption)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
46	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(!stopAtNonOption)  {	  if(!stopAtNonOption)    {    If(!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
47	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!eatTheRest)  {  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(!eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(!eatTheRest)  {	  if(!stopAtNonOption)    {    If(!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
48	[BUG]  [BUGGY]  while(!stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  while(!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	while(!stopAtNonOption)  {	  if(!stopAtNonOption)    {    while(!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
49	[BUG]  [BUGGY]  if(!eatTheRest)  {  while(!stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!eatTheRest)  {  while(!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!eatTheRest)  {  while(!stopAtNonOption)  {	  if(!stopAtNonOption)    {    while(!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
50	[BUG]  [BUGGY]  if(stopAtNonOption)  {  while(!stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  while(!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  while(!stopAtNonOption)  {	  if(!stopAtNonOption)    {    while(!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
51	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	140	None	add
52	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    if(options.hasOption(opt))  {	  	non-compiled	[CE]  'else'  without  'if'	140	None	add
53	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	140	None	add
54	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	140	None	add
55	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	140	None	add
56	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(arg))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    if(options.hasOption(arg))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
57	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  If(options.hasOption(arg))  {  [CE]  ';'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  If(options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    If(options.hasOption(arg))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
58	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(arg)?)  {  [CE]  illegal  start  of  expression  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(arg)?)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    if(options.hasOption(arg)?)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
59	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    else    {    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	129	None	add
60	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(opt))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    else    {    if(options.hasOption(opt))  {	  	non-compiled	[CE]  'else'  without  'if'	129	None	add
61	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    else    {    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	129	None	add
62	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  else  {  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    else    {    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	129	None	add
63	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    else    {    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	129	None	add
64	[BUG]  [BUGGY]  if(eatTheRest)  {  if(!stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest)  {  if(!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(eatTheRest)  {  if(!stopAtNonOption)  {	  if(!stopAtNonOption)    {    if(!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	32	None	replace
65	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  options.hasOption(arg))  {	  if(options.hasOption(arg))    {    	compilable	  [FE]  UnrecognizedOptionException  	10	4	replace
66	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(arg))  {	  if(options.hasOption(arg))    {    	compilable	  [FE]  UnrecognizedOptionException  	10	4	replace
67	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	1	5	add
68	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	1	5	add
69	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	1	5	add
70	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	1	5	add
71	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
72	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	1	6	add
73	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	1	6	add
74	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  options.add(opt);  }  [CE]  cannot  find  symbol  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  options.add(opt);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  options.add(opt);  }	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
75	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||!eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  ||!eatTheRest)  {	  if(!eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	60	3	replace
76	[BUG]  [BUGGY]  if(stopAtNonOption  ||!eatTheRest)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||!eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||!eatTheRest)  {	  if(!eatTheRest)    {    	compilable	  [FE]  ComparisonFailure  	60	3	replace
77	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  ||  eatTheRest)  {	  if(!eatTheRest)    {    	compilable	  [FE]  UnrecognizedOptionException  	60	4	replace
78	[BUG]  [BUGGY]  if(stopAtNonOption  ||  eatTheRest)  {  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||  eatTheRest)  {	  if(!eatTheRest)    {    	compilable	  [FE]  UnrecognizedOptionException  	60	4	replace
79	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  UnrecognizedOptionException  	105	4	replace
80	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  UnrecognizedOptionException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  UnrecognizedOptionException  	105	4	replace
81	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	105	None	replace
82	[BUG]  [BUGGY]  if(options.hasOption(option)&&!stopAtNonOption)  {  [CE]  cannot  find  symbol  option  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(option)&&!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option)&&!stopAtNonOption)  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&!stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  option	135	None	replace
83	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)&&!stopAtNonOption)  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	135	4	replace
84	[BUG]  [BUGGY]  if(options.hasOption(opt)&&!stopAtNonOption)  {  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&!stopAtNonOption)  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	135	4	replace
85	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)&&!stopAtNonOption)  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	135	4	replace
86	[BUG]  [BUGGY]  if(options.hasOption(arg)&&!stopAtNonOption)  {  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&!stopAtNonOption)  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	135	4	replace
87	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)||  stopAtNonOption)  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	135	4	replace
88	[BUG]  [BUGGY]  if(options.hasOption(opt)||  stopAtNonOption)  {  [FE]  UnrecognizedOptionException  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  stopAtNonOption)  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	135	4	replace
89	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  ||!options.hasOption(arg.substring(0,  2)))  {  [CE]  illegal  start  of  expression  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  ||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  ||!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    ||!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
90	[BUG]  [BUGGY]  if(!options.hasOption(opt))  {  ||!options.hasOption(arg.substring(0,  2)))  {  [CE]  illegal  start  of  expression  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt))  {  ||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt))  {  ||!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    ||!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
91	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(1,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(1,  2));	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    	non-compiled	[CE]  'else'  without  'if'	123	None	replace
92	[BUG]  [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
93	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
94	[BUG]  [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
95	[BUG]  [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||!options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	add
96	[BUG]  [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&|!options.hasOption(arg.substring(0,  2)))  {  [CE]  illegal  start  of  expression  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&|!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||!options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)&|!options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
97	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  MissingArgumentException  	6	4	replace
98	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  MissingArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  MissingArgumentException  	6	4	replace
99	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  MissingArgumentException  	6	4	replace
100	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  MissingArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  MissingArgumentException  	6	4	replace
101	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  if(options.hasOption(opt))  {	  if(options.hasOption(opt))    {    else    if(options.hasOption(opt))    {    	non-compiled	[CE]  'else'  without  'if'	147	None	replace
102	[BUG]  [BUGGY]  if(options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option))  {	  if(options.hasOption(opt))    {    else    if(options.hasOption(opt))    {    	non-compiled	[CE]  cannot  find  symbol  option	147	None	replace
103	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    4));    	non-compiled	[CE]  'else'  without  'if'	31	None	replace
104	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	48	None	replace
105	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	48	None	replace
106	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	48	None	replace
107	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2))  {  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	48	None	replace
108	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  i));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  i));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  i));  }	  tokens.add(arg.substring(0,    i));    	non-compiled	[CE]  'else'  without  'if'	166	None	replace
109	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  i));  }  else  {  throw  new  MissingArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  i));  }  else  {  throw  new  MissingArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  i));  }  else  {  throw  new  MissingArgumentException( " ");  }	  tokens.add(arg.substring(0,    i));    	non-compiled	[CE]  'else'  without  'if'	166	None	replace
110	[BUG]  [BUGGY]  if(option!=  null)  {  if(option.hasOption(opt))  {  tokens.add(arg);  }  [CE]  cannot  find  symbol  option  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(option!=  null)  {  if(option.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(option!=  null)  {  if(option.hasOption(opt))  {  tokens.add(arg);  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option    option    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  option	126	None	replace
111	[BUG]  [BUGGY]  if(option!=  null)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  cannot  find  symbol  option  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(option!=  null)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(option!=  null)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option    option    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  option	126	None	replace
112	[BUG]  [BUGGY]  Option  arg  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  arg  =  options.getOption(opt);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  arg  =  options.getOption(opt);	          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option    option    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	126	None	replace
113	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	153	None	add
114	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(2,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	153	None	add
115	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	153	None	add
116	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	153	None	add
117	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	153	None	add
118	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	98	None	replace
119	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	98	None	replace
120	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	36	4	add
121	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	36	4	add
122	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	36	None	add
123	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	36	None	add
124	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	36	None	add
125	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  	non-compiled	[CE]  'else'  without  'if'	36	None	add
126	[BUG]  [BUGGY]  if(options.hasOption(arguments,  stopAtNonOption))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arguments,  stopAtNonOption))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arguments,  stopAtNonOption))  {	  if(options.hasOption(arguments))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	13	None	replace
127	[BUG]  [BUGGY]  if(options.hasOption(arguments)||  options.hasOption(opt))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arguments)||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arguments)||  options.hasOption(opt))  {	  if(options.hasOption(arguments))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	13	None	replace
128	[BUG]  [BUGGY]  if(!options.hasOption(arguments))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(arguments))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arguments))  {	  if(options.hasOption(arguments))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	13	None	replace
129	[BUG]  [BUGGY]  if(opt.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(arg)||    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
130	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(arg)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	26	3	replace
131	[BUG]  [BUGGY]  if(!options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(arg)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	26	3	replace
132	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
133	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
134	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
135	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
136	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
137	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(arg)||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!options.hasOption(arg)||!options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	116	3	replace
138	[BUG]  [BUGGY]  if(!options.hasOption(arg)||!options.hasOption(arg.substring(0,  2)))  {  [FE]  ComparisonFailure  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(arg)||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg)||!options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	116	3	replace
139	[BUG]  [BUGGY]  /  -D  tokens.add(arg.substring(2,  2));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  /  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	/  -D  tokens.add(arg.substring(2,  2));	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
140	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  }	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
141	[BUG]  [BUGGY]  -D  tokens.add(arg.substring(2,  2));  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	-D  tokens.add(arg.substring(2,  2));	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  not  a  statement	87	None	replace
142	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	181	None	add
143	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  ||  options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  ||  options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    ||  options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	181	None	add
144	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  	non-compiled	[CE]  'else'  without  'if'	181	None	add
145	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }	  	non-compiled	[CE]  'else'  without  'if'	181	None	add
146	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  	non-compiled	[CE]  'else'  without  'if'	181	None	add
147	[BUG]  [BUGGY]  tokens.add(arguments[i]);  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arguments[i]);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arguments[i]);	  tokens.add(opt);    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
148	[BUG]  [BUGGY]  tokens.add(i);  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(i);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(i);	  tokens.add(opt);    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
149	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  ')'  expected	103	None	replace
150	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  3);  }  [CE]  ')'  expected  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  3);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  3);  }	  tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  ')'  expected	30	None	replace
151	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  3));  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  3));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  3));  }	  tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
152	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(eatTheRest)  {	  if(stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	159	4	replace
153	[BUG]  [BUGGY]  if(eatTheRest)  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(eatTheRest)  {	  if(stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	159	4	replace
154	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  arguments.length  >  2)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  &&  arguments.length  >  2)  {	  if(stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	159	4	replace
155	[BUG]  [BUGGY]  if(stopAtNonOption  &&  arguments.length  >  2)  {  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  arguments.length  >  2)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  &&  arguments.length  >  2)  {	  if(stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	159	4	replace
156	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  return  null;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  return  null;  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    	compilable	  [FE]  MissingArgumentException  	171	4	replace
157	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  return  null;  }  [FE]  MissingArgumentException  [FE]    NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  return  null;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  return  null;  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    	compilable	  [FE]  MissingArgumentException  	171	4	replace
158	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    	non-compiled	[CE]  'else'  without  'if'	171	None	replace
159	[BUG]  [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	add
160	[BUG]  [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  If(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  If(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    If(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  ';'  expected	163	None	add
161	[BUG]  [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)));  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)));	  	non-compiled	[CE]  'else'  without  'if'	163	None	add
162	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(option))  {	  if(options.hasOption(option)||    options.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol  option	132	None	replace
163	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)||  options.hasOption(opt))  {	  if(options.hasOption(option)||    options.hasOption(option))    {    	compilable	  [FE]  UnrecognizedOptionException  	132	4	replace
164	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(opt))  {	  if(options.hasOption(option)||    options.hasOption(option))    {    	compilable	  [FE]  UnrecognizedOptionException  	132	4	replace
165	[BUG]  [BUGGY]  if(option.hasOption(opt)||  options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(option.hasOption(opt)||  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(option.hasOption(opt)||  options.hasOption(option))  {	  if(options.hasOption(option)||    options.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol  option	132	None	replace
166	[BUG]  [BUGGY]  if(opt.hasOption(option)||  options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt.hasOption(option)||  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt.hasOption(option)||  options.hasOption(option))  {	  if(options.hasOption(option)||    options.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol  option	132	None	replace
167	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(options.hasOption(arg.substring(0,    2)    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	173	None	replace
168	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));	  if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	152	None	replace
169	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
170	[BUG]  [BUGGY]  Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
171	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {	  if(stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	68	4	replace
172	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {	  if(stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	68	4	replace
173	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  	non-compiled	[CE]  'else'  without  'if'	94	None	add
174	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	94	None	add
175	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }	  	non-compiled	[CE]  'else'  without  'if'	94	None	add
176	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  	non-compiled	[CE]  'else'  without  'if'	94	None	add
177	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));	  	non-compiled	[CE]  'else'  without  'if'	94	None	add
178	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)||  options.hasOption(arg.substring(2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	28	4	replace
179	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(2)))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||  options.hasOption(arg.substring(2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	28	4	replace
180	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	28	4	replace
181	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	28	4	replace
182	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)&&  options.hasOption(arg.substring(1)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	28	4	replace
183	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(1)))  {  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&  options.hasOption(arg.substring(1)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	28	4	replace
184	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)||  options.hasOption(arg.substring(1)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	28	4	replace
185	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(1)))  {  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||  options.hasOption(arg.substring(1)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	28	4	replace
186	[BUG]  [BUGGY]  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  ')'  expected  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  ')'  expected	45	None	replace
187	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  ')'  expected  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  ')'  expected	45	None	replace
188	[BUG]  [BUGGY]  ||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  illegal  start  of  expression  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
189	[BUG]  [BUGGY]  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  ')'  expected  [FE]                  UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2,  2));	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  ')'  expected	45	None	replace
190	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.string(0,  2)))  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.string(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.string(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    &&    options.hasOption(arg.string(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	128	None	replace
191	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.string(2)))  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.string(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.string(2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    &&    options.hasOption(arg.string(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	128	None	replace
192	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.string(0,  2)))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.string(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(arg.string(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    &&    options.hasOption(arg.string(0,    2)))    {    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
193	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	73	None	replace
194	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))&&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2))&&  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	73	4	replace
195	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))&&  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))&&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))&&  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	73	4	replace
196	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  &&  options.hasOption(arg))  {	  if(stopAtNonOption    &&    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	56	4	replace
197	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  &&  options.hasOption(arg))  {	  if(stopAtNonOption    &&    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	56	4	replace
198	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arguments))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arguments))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  &&  options.hasOption(arguments))  {	  if(stopAtNonOption    &&    options.hasOption(opt))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	56	None	replace
199	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	160	None	add
200	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  ||  options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  ||  options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    ||  options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	160	None	add
201	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	160	None	add
202	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	160	None	add
203	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	160	None	add
204	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	95	None	replace
205	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(opt))    {    if(!stopAtNonOption  &&  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
206	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(option))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(opt))    {    if(!stopAtNonOption  &&  options.hasOption(option))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
207	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  If(!stopAtNonOption  &&  options.hasOption(opt))  {  [CE]  ';'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  If(!stopAtNonOption  &&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(opt))    {    If(!stopAtNonOption  &&  options.hasOption(opt))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
208	[BUG]  [BUGGY]  Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	182	None	replace
209	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  break;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  break;  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    	compilable	  [FE]  MissingArgumentException  	169	4	replace
210	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  break;  }  [FE]  MissingArgumentException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  break;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  break;  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    	compilable	  [FE]  MissingArgumentException  	169	4	replace
211	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    	compilable	  [FE]  MissingArgumentException  	169	4	replace
212	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  [FE]  MissingArgumentException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    	compilable	  [FE]  MissingArgumentException  	169	4	replace
213	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  1)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	70	4	replace
214	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  1)))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  1)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	70	4	replace
215	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  options.hasOption(arg.substring(2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	70	4	replace
216	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(2)))  {  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(arg.substring(2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	70	4	replace
217	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    1))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
218	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(0,  1))  {  [CE]  ')'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(0,  1))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  &&  options.hasOption(arg.substring(0,  1))  {	  if(options.hasOption(arg.substring(0,    1))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
219	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	78	None	add
220	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	78	None	add
221	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(2,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(2,  2));  //  -D  tokens.add(arg.substring(2,  2));	  	non-compiled	[CE]  'else'  without  'if'	78	None	add
222	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(2,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(2,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    ||  options.hasOption(opt))  {  tokens.add(arg.substring(2,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	78	None	add
223	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  	non-compiled	[CE]  'else'  without  'if'	78	None	add
224	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  ')'  expected	37	None	replace
225	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {	          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  MissingArgumentException  	37	4	replace
226	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [FE]  MissingArgumentException  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {	          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  MissingArgumentException  	37	4	replace
227	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)&&  options.hasOption(opt))  {  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)&&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)&&  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2)||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	150	None	replace
228	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)||  options.hasOption(option))  {  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)||  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)||  options.hasOption(option))  {	  if(options.hasOption(arg.substring(0,    2)||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	150	None	replace
229	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1)||  options.hasOption(opt))  {  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  1)||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  1)||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2)||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	150	None	replace
230	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)&&  options.hasOption(opt))  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	137	4	replace
231	[BUG]  [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&  options.hasOption(opt))  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	137	4	replace
232	[BUG]  [BUGGY]  if(options.hasOption(arguments)&&  options.hasOption(arguments))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arguments)&&  options.hasOption(arguments))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arguments)&&  options.hasOption(arguments))  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&    options.hasOption(opt))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	137	None	replace
233	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)||  options.hasOption(opt))  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	137	4	replace
234	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||  options.hasOption(opt))  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	137	4	replace
235	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ters.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	ters.add(arg.substring(0,  2));	  if(stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	108	None	replace
236	[BUG]  [BUGGY]  options.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  options.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	options.add(arg.substring(0,  2));	  if(stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	108	None	replace
237	[BUG]  [BUGGY]  arg  =  options.getOption(i);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  arg  =  options.getOption(i);  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	arg  =  options.getOption(i);	  arg    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	172	None	replace
238	[BUG]  [BUGGY]  arg  =  options.getOption(arguments[i]);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  arg  =  options.getOption(arguments[i]);  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	arg  =  options.getOption(arguments[i]);	  arg    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	172	None	replace
239	[BUG]  [BUGGY]  arg  =  options.getOption(arguments);  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  arg  =  options.getOption(arguments);  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	arg  =  options.getOption(arguments);	  arg    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	172	None	replace
240	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt))  {  tokens.add(arg);  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    ||    options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  ComparisonFailure  	38	3	replace
241	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt))  {  tokens.add(arg);  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    ||    options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  ComparisonFailure  	38	3	replace
242	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    ||    options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
243	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    ||    options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
244	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
245	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  If(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ';'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  If(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    If(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  ';'  expected	107	None	add
246	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(stopNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  reached  end  of  file  while  parsing  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(stopNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(stopNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
247	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  }  [CE]  ')'  expected  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  }	  	non-compiled	[CE]  ')'  expected	107	None	add
248	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    If(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	63	None	replace
249	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  If(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  If(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  If(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    If(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  ';'  expected	63	None	replace
250	[BUG]  [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
251	[BUG]  [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
252	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	88	None	add
253	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	88	None	add
254	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	88	None	add
255	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	88	None	add
256	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	88	None	add
257	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(!options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  'else'  without  'if'	174	None	replace
258	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(!options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	174	None	replace
259	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  {  if(!options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  {  if(!options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2))  {  if(!options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(!options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	174	None	replace
260	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	89	None	replace
261	[BUG]  [BUGGY]  Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	89	None	replace
262	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	compilable	  [FE]  UnrecognizedOptionException  	131	4	replace
263	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	compilable	  [FE]  UnrecognizedOptionException  	131	4	replace
264	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	124	None	replace
265	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  if(options.hasOption(opt)||  options.hasOption(arg))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  if(options.hasOption(opt)||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg))    {    if(options.hasOption(opt)||  options.hasOption(arg))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	155	None	add
266	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  If(options.hasOption(opt)||  options.hasOption(arg))  {  [CE]  ';'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  If(options.hasOption(opt)||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg))    {    If(options.hasOption(opt)||  options.hasOption(arg))  {	  	non-compiled	[CE]  ';'  expected	155	None	add
267	[BUG]  [BUGGY]  Option  option  =  options.getOption(i);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  option  =  options.getOption(i);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  option  =  options.getOption(i);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
268	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  option  =  options.getOption(option);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
269	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  option  =  options.getOption(arguments);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  option  =  options.getOption(arguments);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
270	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  if(!stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
271	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt  ==  null)  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt  ==  null)  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  ')'  expected	119	None	replace
272	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  ')'  expected	119	None	replace
273	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	119	None	replace
274	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
275	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	47	None	replace
276	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	164	4	replace
277	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	164	4	replace
278	[BUG]  [BUGGY]  if(opt.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  cannot  find  symbol  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
279	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    1))    ||    options.hasOption(opt))    {    if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
280	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    1))    ||    options.hasOption(opt))    {    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
281	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  If(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  [CE]  ';'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  If(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    1))    ||    options.hasOption(opt))    {    If(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  ';'  expected	21	None	add
282	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  if(stopAtNonOption  &&  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  if(stopAtNonOption  &&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    &&    options.hasOption(opt))    {    if(stopAtNonOption  &&  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	add
283	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  if(stopAtNonOption  &&  options.hasOption(option))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  if(stopAtNonOption  &&  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    &&    options.hasOption(opt))    {    if(stopAtNonOption  &&  options.hasOption(option))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	add
284	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  If(stopAtNonOption  &&  options.hasOption(opt))  {  [CE]  ';'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  If(stopAtNonOption  &&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    &&    options.hasOption(opt))    {    If(stopAtNonOption  &&  options.hasOption(opt))  {	  	non-compiled	[CE]  ';'  expected	55	None	add
285	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  if(stopAtNonOption  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  if(stopAtNonOption  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    &&    options.hasOption(opt))    {    if(stopAtNonOption  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	55	None	add
286	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	145	4	replace
287	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	145	4	replace
288	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  &&  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  &&  stopAtNonOption)  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	145	4	replace
289	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  &&  stopAtNonOption)  {  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  &&  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  &&  stopAtNonOption)  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	145	4	replace
290	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||!options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  ||!options.hasOption(opt))  {	  if(!options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	19	3	replace
291	[BUG]  [BUGGY]  if(stopAtNonOption  ||!options.hasOption(opt))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||!options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||!options.hasOption(opt))  {	  if(!options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	19	3	replace
292	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  if(stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
293	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	168	None	add
294	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  break;  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  break;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  break;  }	  	non-compiled	[CE]  'else'  without  'if'	168	None	add
295	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }	  	non-compiled	[CE]  'else'  without  'if'	168	None	add
296	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	168	None	add
297	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	add
298	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  2));  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(i,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(i,  2));	  tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
299	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	add
300	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  	non-compiled	[CE]  ')'  expected	25	None	add
301	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)&|  options.hasOption(arg.substring(0,  2)))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)&|  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(arg)&|  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
302	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {	  	non-compiled	[CE]  ')'  expected	25	None	add
303	[BUG]  [BUGGY]  if(options.hasOption(arguments)||  options.hasOption(arg))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arguments)||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arguments)||  options.hasOption(arg))  {	  if(options.hasOption(opt)||    options.hasOption(arg))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	156	None	replace
304	[BUG]  [BUGGY]  if(options.hasArg(opt)||  options.hasOption(arg))  {  [CE]  cannot  find  symbol  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasArg(opt)||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasArg(opt)||  options.hasOption(arg))  {	  if(options.hasOption(opt)||    options.hasOption(arg))    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
305	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)||  options.hasOption(arg))  {	  if(options.hasOption(opt)||    options.hasOption(arg))    {    	compilable	  [FE]  UnrecognizedOptionException  	156	4	replace
306	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg))  {  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||  options.hasOption(arg))  {	  if(options.hasOption(opt)||    options.hasOption(arg))    {    	compilable	  [FE]  UnrecognizedOptionException  	156	4	replace
307	[BUG]  [BUGGY]  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  ')'  expected  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  ')'  expected	44	None	replace
308	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  ')'  expected  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  ')'  expected	44	None	replace
309	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  ')'  expected  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  ')'  expected	44	None	replace
310	[BUG]  [BUGGY]  ||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  illegal  start  of  expression  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
311	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2)+  2);  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(0,  2)+  2);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  2)+  2);	  tokens.add(arg.substring(0,    2)+    1);    	non-compiled	[CE]  'else'  without  'if'	111	None	replace
312	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2)+  3);  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(0,  2)+  3);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  2)+  3);	  tokens.add(arg.substring(0,    2)+    1);    	non-compiled	[CE]  'else'  without  'if'	111	None	replace
313	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	121	None	replace
314	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	121	None	replace
315	[BUG]  [BUGGY]  -D  tokens.add(arg.substring(0,  2));  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	-D  tokens.add(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  not  a  statement	142	None	replace
316	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option!=  null)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        Option    option    =    options.getOption(opt);    if(option!=  null)  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	125	3	add
317	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option!=  null)  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option!=  null)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        Option    option    =    options.getOption(opt);    if(option!=  null)  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	125	3	add
318	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  Option  option  =  options.getOption(opt);  [CE]  variable  option  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  Option  option  =  options.getOption(opt);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        Option    option    =    options.getOption(opt);    Option  option  =  options.getOption(opt);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  flatten(Options,String[],boolean)	125	None	add
319	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option  ==  null)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        Option    option    =    options.getOption(opt);    if(option  ==  null)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	125	5	add
320	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option  ==  null)  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option  ==  null)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        Option    option    =    options.getOption(opt);    if(option  ==  null)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	125	5	add
321	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  ||  options.hasOption(opt))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  ||  options.hasOption(opt))  {  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        Option    option    =    options.getOption(opt);    ||  options.hasOption(opt))  {  tokens.add(arg);	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
322	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option!=  null)  {  tokens.add(arg);  }  else  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option!=  null)  {  tokens.add(arg);  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        Option    option    =    options.getOption(opt);    if(option!=  null)  {  tokens.add(arg);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	125	None	add
323	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	add
324	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	add
325	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(3)))  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(3)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    if(options.hasOption(opt)||  options.hasOption(arg.substring(3)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	add
326	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(4)))  {  [CE]  reached  end  of  file  while  parsing  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(4)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    if(options.hasOption(opt)||  options.hasOption(arg.substring(4)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	27	None	add
327	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	104	None	add
328	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	104	None	add
329	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
330	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	104	6	add
331	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	104	6	add
332	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	  if(opt!=    null)    {    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  ')'  expected	162	None	replace
333	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    else    {    	compilable	  [FE]  UnrecognizedOptionException  	130	4	replace
334	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    else    {    	compilable	  [FE]  UnrecognizedOptionException  	130	4	replace
335	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
336	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
337	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  If(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  If(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    If(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  ';'  expected	67	None	add
338	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	178	3	add
339	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	178	3	add
340	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	178	3	add
341	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	178	3	add
342	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	178	4	add
343	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	178	4	add
344	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	178	3	add
345	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	178	3	add
346	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	178	None	add
347	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
348	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
349	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
350	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
351	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
352	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
353	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  ||  options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  ||  options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    ||  options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }	  	non-compiled	[CE]  illegal  start  of  expression	176	None	add
354	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.  [CE]  <identifier>  expected  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.	  	non-compiled	[CE]  <identifier>  expected	176	None	add
355	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
356	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
357	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	62	3	replace
358	[BUG]  [BUGGY]  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	62	3	replace
359	[BUG]  [BUGGY]  tokens.add(arg.substring(3));  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(3));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(3));	  tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	83	None	replace
360	[BUG]  [BUGGY]  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	add
361	[BUG]  [BUGGY]  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  If(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  If(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,    2)))    {    If(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  ';'  expected	117	None	add
362	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||!options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	120	None	replace
363	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arguments))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arguments))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(arguments))  {	  if(!stopAtNonOption    &&    options.hasOption(opt))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	12	None	replace
364	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(option))  {	  if(!stopAtNonOption    &&    options.hasOption(opt))    {    	non-compiled	[CE]  cannot  find  symbol  option	12	None	replace
365	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]    NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	170	None	add
366	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	170	None	add
367	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [CE]  'else'  without  'if'  [FE]        NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }	  	non-compiled	[CE]  'else'  without  'if'	170	None	add
368	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  return  null;  }  [CE]  'else'  without  'if'  [FE]          NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  return  null;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  return  null;  }	  	non-compiled	[CE]  'else'  without  'if'	170	None	add
369	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]            NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	170	None	add
370	[BUG]  [BUGGY]  tokens.add(arg);  if(options.hasOption(arguments[i]))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }  [CE]  'else'  without  'if'  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg);  if(options.hasOption(arguments[i]))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg);  if(options.hasOption(arguments[i]))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    options.toArray(arguments[i]);    }    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
371	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }  [CE]  'else'  without  'if'  [FE]                  UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    options.toArray(arguments[i]);    }    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
372	[BUG]  [BUGGY]  if(!options.hasOption(opt))  {  if(!options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt))  {  if(!options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt))    {    if(!options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
373	[BUG]  [BUGGY]  if(!options.hasOption(opt))  {  If(!options.hasOption(opt))  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt))  {  If(!options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt))    {    If(!options.hasOption(opt))  {	  	non-compiled	[CE]  ';'  expected	18	None	add
374	[BUG]  [BUGGY]  if(!options.hasOption(opt))  {  ||!options.hasOption(opt))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt))  {  ||!options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt))    {    ||!options.hasOption(opt))  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
375	[BUG]  [BUGGY]  'else'  without  'if'  [CE]  unclosed  character  literal  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  'else'  without  'if'  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	'else'  without  'if'	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    	non-compiled	[CE]  unclosed  character  literal	146	None	replace
376	[BUG]  [BUGGY]  if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(option))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
377	[BUG]  [BUGGY]  if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(option))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol  option	20	None	replace
378	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	102	5	add
379	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	102	5	add
380	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	102	None	add
381	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	102	5	add
382	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	102	5	add
383	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	102	None	add
384	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(  [CE]  illegal  start  of  expression  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(	  	non-compiled	[CE]  illegal  start  of  expression	102	None	add
385	[BUG]  [BUGGY]  if(option.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  cannot  find  symbol  option  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(option.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(option.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(option)&&    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  cannot  find  symbol  option	143	None	replace
386	[BUG]  [BUGGY]  if(opt.hasOption(option)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  cannot  find  symbol  option  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt.hasOption(option)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt.hasOption(option)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(option)&&    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  cannot  find  symbol  option	143	None	replace
387	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(option)&&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	143	3	replace
388	[BUG]  [BUGGY]  if(!options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(option)&&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	143	3	replace
389	[BUG]  [BUGGY]  ||  options.hasOption(arguments))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arguments))  {  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arguments))  {  tokens.add(arg);	  ||    options.hasOption(opt))    {    tokens.add(arg);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
390	[BUG]  [BUGGY]  ||  options.hasOption(arguments[i]))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arguments[i]))  {  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arguments[i]))  {  tokens.add(arg);	  ||    options.hasOption(opt))    {    tokens.add(arg);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
391	[BUG]  [BUGGY]  ||  options.hasOption(arg))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arg))  {  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg))  {  tokens.add(arg);	  ||    options.hasOption(opt))    {    tokens.add(arg);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
392	[BUG]  [BUGGY]  ||  options.hasOption(option))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(option))  {  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(option))  {  tokens.add(arg);	  ||    options.hasOption(opt))    {    tokens.add(arg);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
393	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
394	[BUG]  [BUGGY]  Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
395	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	110	None	replace
396	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	add
397	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  If(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  If(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&    options.hasOption(arg.substring(0,    2)))    {    If(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  ';'  expected	23	None	add
398	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)));  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)));	  	non-compiled	[CE]  'else'  without  'if'	23	None	add
399	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	99	5	add
400	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	99	5	add
401	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	99	None	add
402	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	99	None	add
403	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	99	None	add
404	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	99	None	add
405	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i,  2));  }  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i,  2));  }	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(i,    2));    	compilable	  [FE]  UnrecognizedOptionException  	52	4	replace
406	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i,  2));  }  [FE]  UnrecognizedOptionException  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i,  2));  }  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i,  2));  }	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(i,    2));    	compilable	  [FE]  UnrecognizedOptionException  	52	4	replace
407	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(!eatTheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!eatTheRest)  {  if(!eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!eatTheRest)    {    if(!eatTheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
408	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(!eattheRest)  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!eatTheRest)  {  if(!eattheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!eatTheRest)    {    if(!eattheRest)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	59	None	add
409	[BUG]  [BUGGY]  if(!eatTheRest)  {  If(!eatTheRest)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!eatTheRest)  {  If(!eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!eatTheRest)    {    If(!eatTheRest)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
410	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  stopAtNonOption)  {	  if(!stopAtNonOption)    {    ||!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	34	4	replace
411	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  stopAtNonOption)  {  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  stopAtNonOption)  {	  if(!stopAtNonOption)    {    ||!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	34	4	replace
412	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	97	5	add
413	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	97	5	add
414	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	97	5	add
415	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	97	5	add
416	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [CE]  cannot  find  symbol  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  cannot  find  symbol	97	None	add
417	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	97	None	add
418	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	97	None	add
419	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	add
420	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(stopAtNonOption  ||  stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	add
421	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(stopAtNonOption  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	add
422	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  startAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNonOption  ||  startAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(stopAtNonOption  ||  startAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	add
423	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    If(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ';'  expected	74	None	replace
424	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  1))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  1))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    If(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	74	None	replace
425	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	144	None	add
426	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  StopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  StopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  StopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	144	None	add
427	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  If(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  If(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    If(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  	non-compiled	[CE]  ';'  expected	144	None	add
428	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }	          tokens.add(arg);    tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
429	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }	  if(!stopAtNonOption)    {    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	compilable	  [FE]  UnrecognizedOptionException  	17	4	replace
430	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }	  if(!stopAtNonOption)    {    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	compilable	  [FE]  UnrecognizedOptionException  	17	4	replace
431	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  if(!stopAtNonOption)    {    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
432	[BUG]  [BUGGY]  if(options.hasOption(arguments)||  options.hasOption(arguments))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arguments)||  options.hasOption(arguments))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arguments)||  options.hasOption(arguments))  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    options.hasOption(opt))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	46	None	replace
433	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	122	None	replace
434	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||  eatTheRest)  {  [CE]  'else'  without  'if'  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||  eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(!options.hasOption(arg.substring(0,  2))  ||  eatTheRest)  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	122	None	replace
435	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]                  UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	122	4	replace
436	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [FE]  UnrecognizedOptionException  [FE]                  UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	122	4	replace
437	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	180	None	replace
438	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	180	3	replace
439	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	180	3	replace
440	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  1)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  arguments.length  >  1)  {	  if(!stopAtNonOption    &&    arguments.length    >    2)    {    	compilable	  [FE]  UnrecognizedOptionException  	58	4	replace
441	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  1)  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  1)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  arguments.length  >  1)  {	  if(!stopAtNonOption    &&    arguments.length    >    2)    {    	compilable	  [FE]  UnrecognizedOptionException  	58	4	replace
442	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  arguments.length  >  1)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  &&  arguments.length  >  1)  {	  if(!stopAtNonOption    &&    arguments.length    >    2)    {    	compilable	  [FE]  UnrecognizedOptionException  	58	4	replace
443	[BUG]  [BUGGY]  if(stopAtNonOption  &&  arguments.length  >  1)  {  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  arguments.length  >  1)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  &&  arguments.length  >  1)  {	  if(!stopAtNonOption    &&    arguments.length    >    2)    {    	compilable	  [FE]  UnrecognizedOptionException  	58	4	replace
444	[BUG]  [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
445	[BUG]  [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
446	[BUG]  [BUGGY]  tokens.add(arg);  if(options.hasOption(arguments.substring(0,  2)))  {  tokens.add(arg);  }  else  {  options.add(opt);  }  [CE]  'else'  without  'if'  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg);  if(options.hasOption(arguments.substring(0,  2)))  {  tokens.add(arg);  }  else  {  options.add(opt);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg);  if(options.hasOption(arguments.substring(0,  2)))  {  tokens.add(arg);  }  else  {  options.add(opt);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
447	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  options.add(opt);  }  [CE]  'else'  without  'if'  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  options.add(opt);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  options.add(opt);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
448	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  options.add(opt);  }  [CE]  'else'  without  'if'  [FE]                  UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  options.add(opt);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  options.add(opt);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    options.add(opt);    }    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
449	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  1))  {  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  1))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  1))  {	  if(options.hasOption(arg.substring(0,    1))    {    	non-compiled	[CE]  ')'  expected	149	None	replace
450	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    1))    {    	non-compiled	[CE]  ')'  expected	149	None	replace
451	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  if(!stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	compilable	  [FE]  ComparisonFailure  	92	3	replace
452	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  if(!stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	compilable	  [FE]  ComparisonFailure  	92	3	replace
453	[BUG]  [BUGGY]  Option  options  =  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  options  =  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  options  =  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    Option    options    =    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ';'  expected	127	None	replace
454	[BUG]  [BUGGY]  Option  options  =  options.hasOption(arg.substring(0,  2))  &&  options.hasOption(opt))  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  options  =  options.hasOption(arg.substring(0,  2))  &&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  options  =  options.hasOption(arg.substring(0,  2))  &&  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    Option    options    =    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ';'  expected	127	None	replace
455	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasArg(arguments))  {  [CE]  cannot  find  symbol  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasArg(arguments))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||  options.hasArg(arguments))  {	  if(stopAtNonOption    ||    options.hasOption(opt))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
456	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arguments))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arguments))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||  options.hasOption(arguments))  {	  if(stopAtNonOption    ||    options.hasOption(opt))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	139	None	replace
457	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    If(!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	86	None	replace
458	[BUG]  [BUGGY]  if(!options.hasOption(opt))  {  If(!options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt))  {  If(!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt))  {  If(!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    If(!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  ';'  expected	86	None	replace
459	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  If(!options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  If(!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  If(!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    If(!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  ';'  expected	86	None	replace
460	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    	compilable	  [FE]  UnrecognizedOptionException  	141	4	replace
461	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    	compilable	  [FE]  UnrecognizedOptionException  	141	4	replace
462	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    ||    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	75	None	replace
463	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    ||    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
464	[BUG]  [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
465	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
466	[BUG]  [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
467	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	6	add
468	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	6	add
469	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
470	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]        IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
471	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]          IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
472	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  [CE]  'else'  without  'if'  [FE]            IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
473	[BUG]  [BUGGY]  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(1,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(1,  2));	  tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	29	None	replace
474	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2)  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2)  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2)	          if(options.hasOption(opt))    {    tokens.add(arg);    }    ||    options.hasOption(opt))    {    tokens.add(arg);    	non-compiled	[CE]  ')'  expected	39	None	replace
475	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)&|    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	50	None	replace
476	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	add
477	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  If(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  If(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    If(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  ';'  expected	71	None	add
478	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  1)))  {  [CE]  reached  end  of  file  while  parsing  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  1)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	add
479	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    1)))    {    if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	add
480	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    1)))    {    if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	add
481	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(1)))  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    1)))    {    if(!stopAtNonOption  &&  options.hasOption(arg.substring(1)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	add
482	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(1,  1)))  {  [CE]  reached  end  of  file  while  parsing  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(1,  1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    1)))    {    if(!stopAtNonOption  &&  options.hasOption(arg.substring(1,  1)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	add
483	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt  ==  null)  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt  ==  null)  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	61	None	replace
484	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	61	None	replace
485	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    =    stopAtNonOption;    }    	non-compiled	[CE]  'else'  without  'if'	175	None	replace
486	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    =    stopAtNonOption;    }    	compilable	  [FE]  UnrecognizedOptionException  	175	4	replace
487	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }  [FE]  UnrecognizedOptionException  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    =    stopAtNonOption;    }    	compilable	  [FE]  UnrecognizedOptionException  	175	4	replace
488	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    option.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	49	None	replace
489	[BUG]  [BUGGY]  options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    option.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  not  a  statement	49	None	replace
490	[BUG]  [BUGGY]  Option  option  =  options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  option  =  options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  option  =  options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    option.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
491	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(2))  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(2))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    option.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	49	None	replace
492	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg.substring(0,  2)))  {	          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
493	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  option  =  options.getOption(arg.substring(0,  2));	          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
494	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  if(!stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  if(!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  if(!stopAtNonOption)  {	  if(options.hasOption(opt))    {    if(!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	148	None	replace
495	[BUG]  [BUGGY]  if(options.hasOption(option))  {  if(!stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(option))  {  if(!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option))  {  if(!stopAtNonOption)  {	  if(options.hasOption(opt))    {    if(!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	148	None	replace
496	[BUG]  [BUGGY]  tors.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tors.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tors.add(arg.substring(0,  2));	  if(opt!=    null)    {    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
497	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  options  =  options.getOption(arg.substring(0,  2));	  if(opt!=    null)    {    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
498	[BUG]  [BUGGY]  Options  option  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Options  option  =  options.getOption(opt);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Options  option  =  options.getOption(opt);	  Option    option    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	134	None	replace
499	[BUG]  [BUGGY]  option  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  option  =  options.getOption(opt);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	option  =  options.getOption(opt);	  Option    option    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	134	None	replace
500	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  if(stopAtNonOption  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  if(stopAtNonOption  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    ||    options.hasOption(opt))    {    if(stopAtNonOption  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	add
501	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  if(stopAtNonOption  ||  options.hasOption(option))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  if(stopAtNonOption  ||  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    ||    options.hasOption(opt))    {    if(stopAtNonOption  ||  options.hasOption(option))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	add
502	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  If(stopAtNonOption  ||  options.hasOption(opt))  {  [CE]  ';'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  If(stopAtNonOption  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    ||    options.hasOption(opt))    {    If(stopAtNonOption  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  ';'  expected	138	None	add
503	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  if(stopAtNonOption  ||  options.hasOption(opt)1)  {  [CE]  ')'  expected  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  if(stopAtNonOption  ||  options.hasOption(opt)1)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    ||    options.hasOption(opt))    {    if(stopAtNonOption  ||  options.hasOption(opt)1)  {	  	non-compiled	[CE]  ')'  expected	138	None	add
504	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  &&  options.hasOption(option))  {	  if(stopAtNonOption    &&    options.hasOption(opt))    {    	non-compiled	[CE]  cannot  find  symbol  option	56	None	replace
505	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg;  }  tokens.add(arg);  [CE]  ')'  expected  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg;  }  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg;  }  tokens.add(arg);	  	non-compiled	[CE]  ')'  expected	41	None	add
506	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg;  [CE]  ')'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg;  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg;	  	non-compiled	[CE]  ')'  expected	41	None	add
507	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
508	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption)  {  if(options.hasOption(arg))  {  tokens.add(arg);  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    ||    options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  UnrecognizedOptionException  	38	4	replace
509	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(arg))  {  tokens.add(arg);  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    ||    options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  UnrecognizedOptionException  	38	4	replace
510	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    ||    options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  UnrecognizedOptionException  	38	4	replace
511	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    ||    options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  UnrecognizedOptionException  	38	4	replace
512	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg);  }	          if(options.hasOption(opt))    {    tokens.add(arg);    }    ||    options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	38	None	replace
513	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  -D  tokens.add(arg.substring(2,  2));  }  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  -D  tokens.add(arg.substring(2,  2));  }	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  not  a  statement	87	None	replace
514	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [CE]  'else'  without  'if'  [FE]    NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }	  	non-compiled	[CE]  'else'  without  'if'	170	None	add
515	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	170	None	add
516	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [CE]  'else'  without  'if'  [FE]        NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }	  	non-compiled	[CE]  'else'  without  'if'	170	None	add
517	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  ')'  expected  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  ')'  expected	45	None	replace
518	[BUG]  [BUGGY]  if(options.hasOption(option)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  ')'  expected  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(option)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  ')'  expected	45	None	replace
519	[BUG]  [BUGGY]  if(opt!=  null)  {  tokens.add(arg);  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt!=  null)  {  tokens.add(arg);  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt!=  null)  {  tokens.add(arg);  tokens.add(arg);  }	          tokens.add(arg);    tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
520	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }  else  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    else    {    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	129	None	add
521	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&  options.hasOption(option))  {	  if(options.hasOption(option)||    options.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol  option	132	None	replace
522	[BUG]  [BUGGY]  if(options.hasOption(opt,  arguments))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt,  arguments))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt,  arguments))  {	  if(options.hasOption(arguments))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	13	None	replace
523	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(1,  1))  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(1,  1))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    1))    ||    options.hasOption(opt))    {    if(options.hasOption(arg.substring(1,  1))  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	21	None	add
524	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  return  null;  }  [CE]  'else'  without  'if'  [FE]    NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  return  null;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  return  null;  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    	non-compiled	[CE]  'else'  without  'if'	171	None	replace
525	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  if(stopNonOption  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  if(stopNonOption  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    ||    options.hasOption(opt))    {    if(stopNonOption  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	add
526	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    1))    {    	non-compiled	[CE]  ')'  expected	149	None	replace
527	[BUG]  [BUGGY]  arg  =  options.getOption(options);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  arg  =  options.getOption(options);  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	arg  =  options.getOption(options);	  arg    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	172	None	replace
528	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	1	5	add
529	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	1	5	add
530	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)&&  options.hasOption(arg))  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	137	4	replace
531	[BUG]  [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg))  {  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&  options.hasOption(arg))  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	137	4	replace
532	[BUG]  [BUGGY]  if(opt  ==  null)  {  if(!options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt  ==  null)  {  if(!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt  ==  null)  {  if(!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	84	None	replace
533	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  MissingArgumentException  	105	5	replace
534	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  MissingArgumentException  	105	5	replace
535	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    =    stopAtNonOption;    }    	non-compiled	[CE]  'else'  without  'if'	175	None	replace
536	[BUG]  [BUGGY]  if(options.hasOption(option)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(option)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	48	None	replace
537	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	153	None	add
538	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(i  +  1));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(i  +  1));	  tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	83	None	replace
539	[BUG]  [BUGGY]  tokens.add(option  +  1);  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(option  +  1);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(option  +  1);	  tokens.add(option);    	non-compiled	[CE]  'else'  without  'if'	109	None	replace
540	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	98	None	replace
541	[BUG]  [BUGGY]  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]            MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(2,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(2,  2));	  tokens.add(arg.substring(0,    4));    	non-compiled	[CE]  'else'  without  'if'	31	None	replace
542	[BUG]  [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||!options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	115	None	add
543	[BUG]  [BUGGY]  if(options.hasOption(options))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(options))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(options))  {	  if(options.hasOption(opt))    {    else    if(options.hasOption(opt))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	147	None	replace
544	[BUG]  [BUGGY]  if(eatTheRest)  {  If(!stopAtNonOption)  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest)  {  If(!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(eatTheRest)  {  If(!stopAtNonOption)  {	  if(!stopAtNonOption)    {    If(!stopAtNonOption)    {    	non-compiled	[CE]  ';'  expected	33	None	replace
545	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  options.hasOption(arg.substring(1)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    If(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	63	4	replace
546	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(1)))  {  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(arg.substring(1)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    If(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	63	4	replace
547	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    if(options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
548	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(arg)||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(arg)||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    if(options.hasOption(arg)||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
549	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(arg)&&!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(arg)&&!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    if(options.hasOption(arg)&&!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
550	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(arg)&&  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(arg)&&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    if(options.hasOption(arg)&&  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
551	[BUG]  [BUGGY]  tokens.add(arg);  if(options.hasOption(else))  {  [CE]  illegal  start  of  expression  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg);  if(options.hasOption(else))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg);  if(options.hasOption(else))  {	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
552	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  ||  options.hasOption(arg.substring(1,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  ||  options.hasOption(arg.substring(1,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    if(stopAtNonOption  ||  options.hasOption(arg.substring(1,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	71	None	add
553	[BUG]  [BUGGY]  if(!options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(option))  {	  if(options.hasOption(opt))    {    if(!options.hasOption(opt))    {    	non-compiled	[CE]  cannot  find  symbol  option	136	None	replace
554	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arguments))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arguments))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arguments))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    ||    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	75	None	replace
555	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arguments[i]))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arguments[i]))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    ||    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	75	3	replace
556	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arguments[i]))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arguments[i]))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arguments[i]))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    ||    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	75	3	replace
557	[BUG]  [BUGGY]  tokens.add(arg.substring(1,  i));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(1,  i));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(1,  i));	  tokens.add(arg.substring(0,    i));    	non-compiled	[CE]  'else'  without  'if'	166	None	replace
558	[BUG]  [BUGGY]  if(stopAtNonOption)  {  If(stopAtNonOption)  {  [CE]  ';'  expected  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  If(stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    If(stopAtNonOption)  {	  	non-compiled	[CE]  ';'  expected	158	None	add
559	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(stopAtNONOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(stopAtNONOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(stopAtNONOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	add
560	[BUG]  [BUGGY]  if(stopAtNonOption)  {  while(stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  while(stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    while(stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	158	None	add
561	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	110	None	replace
562	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1,  2));  }	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    	non-compiled	[CE]  'else'  without  'if'	123	None	replace
563	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&  options.hasOption(arg.string(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&  options.hasOption(arg.string(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)&&  options.hasOption(arg.string(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	23	None	add
564	[BUG]  [BUGGY]  options.addOption(opt);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  options.addOption(opt);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	options.addOption(opt);	  Option    option    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	134	None	replace
565	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	140	None	add
566	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2);  }  else  {  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2);  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	140	None	add
567	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
568	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  &&  options.hasOption(arg.substring(2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(stopAtNonOption  &&  options.hasOption(arg.substring(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(stopAtNonOption  &&  options.hasOption(arg.substring(2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	67	None	add
569	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(stopAtNonOption))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(stopAtNonOption))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(stopAtNonOption))  {	  if(options.hasOption(opt))    {    if(!stopAtNonOption)    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	148	None	replace
570	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }  [CE]  ')'  expected  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
571	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  ||  options.hasOption(arg))  {	  if(stopAtNonOption    ||    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	139	4	replace
572	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||  options.hasOption(arg))  {	  if(stopAtNonOption    ||    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	139	4	replace
573	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	36	None	add
574	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	36	3	add
575	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	36	3	add
576	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.length()))  {  tokens.add(arg);  }  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.length()))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.length()))  {  tokens.add(arg);  }	  	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	36	None	add
577	[BUG]  [BUGGY]  Option  options  =  options.getOption(options);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  options  =  options.getOption(options);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  options  =  options.getOption(options);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
578	[BUG]  [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||!options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	120	None	replace
579	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(arg))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(option))    {    	compilable	  [FE]  UnrecognizedOptionException  	20	6	replace
580	[BUG]  [BUGGY]  if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(arg))  {  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt.substring(0,  2))  ||  options.hasOption(arg))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(option))    {    	compilable	  [FE]  UnrecognizedOptionException  	20	6	replace
581	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt)||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!options.hasOption(opt)||  stopAtNonOption)  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	122	3	replace
582	[BUG]  [BUGGY]  if(!options.hasOption(opt)||  stopAtNonOption)  {  [FE]  ComparisonFailure  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt)||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt)||  stopAtNonOption)  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	122	3	replace
583	[BUG]  [BUGGY]  if(options.hasArg(arg)||  options.hasOption(arg))  {  [CE]  cannot  find  symbol  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasArg(arg)||  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasArg(arg)||  options.hasOption(arg))  {	  if(options.hasOption(opt)||    options.hasOption(arg))    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
584	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  /  -D  tokens.add(arg.substring(0,  2));  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  /  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  /  -D  tokens.add(arg.substring(0,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
585	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
586	[BUG]  [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
587	[BUG]  [BUGGY]  if(options.hasOption(stopAtNonOption)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(stopAtNonOption)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(stopAtNonOption)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	145	None	replace
588	[BUG]  [BUGGY]  if(options.hasOption(eatTheRest)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(eatTheRest)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(eatTheRest)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	145	None	replace
589	[BUG]  [BUGGY]  if(options.hasOption(stop)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [CE]  cannot  find  symbol  stop  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(stop)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(stop)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  stop	145	None	replace
590	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  arguments.length  >  2)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  ||  arguments.length  >  2)  {	  if(!stopAtNonOption    &&    arguments.length    >    2)    {    	compilable	  [FE]  UnrecognizedOptionException  	58	4	replace
591	[BUG]  [BUGGY]  if(stopAtNonOption  ||  arguments.length  >  2)  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  arguments.length  >  2)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||  arguments.length  >  2)  {	  if(!stopAtNonOption    &&    arguments.length    >    2)    {    	compilable	  [FE]  UnrecognizedOptionException  	58	4	replace
592	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }	  	non-compiled	[CE]  'else'  without  'if'	15	None	add
593	[BUG]  [BUGGY]  Option  options  =  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(option))  {  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  options  =  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  options  =  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(option))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    Option    options    =    options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ';'  expected	127	None	replace
594	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	99	None	add
595	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  reached  end  of  file  while  parsing  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	99	None	add
596	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    	compilable	  [FE]  UnrecognizedOptionException  	169	4	replace
597	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    	compilable	  [FE]  UnrecognizedOptionException  	169	4	replace
598	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    	compilable	  [FE]  UnrecognizedOptionException  	169	5	replace
599	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    	compilable	  [FE]  UnrecognizedOptionException  	169	5	replace
600	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    	compilable	  [FE]  UnrecognizedOptionException  	169	4	replace
601	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    	compilable	  [FE]  UnrecognizedOptionException  	169	4	replace
602	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(!options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(!options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(!options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	151	None	add
603	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	151	None	add
604	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	151	None	add
605	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  if(!options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  if(!options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  {  if(!options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(!options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	174	None	replace
606	[BUG]  [BUGGY]  if(opt)  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt)  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt)  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
607	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	160	None	add
608	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	160	None	add
609	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  option.hasOption(arg.substring(0,  2)))  {  [CE]  cannot  find  symbol  option  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  option.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&  option.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  cannot  find  symbol  option	164	None	replace
610	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	97	5	add
611	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	97	5	add
612	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	88	None	add
613	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	88	None	add
614	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {	  	non-compiled	[CE]  'else'  without  'if'	104	None	add
615	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	104	None	add
616	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]        IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	104	None	add
617	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  IllegalArgumentException  	104	6	add
618	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  IllegalArgumentException  	104	6	add
619	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
620	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	25	None	add
621	[BUG]  [BUGGY]  if(eatTheRest)  {  while(!stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest)  {  while(!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(eatTheRest)  {  while(!stopAtNonOption)  {	  if(!stopAtNonOption)    {    while(!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
622	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {	  	non-compiled	[CE]  'else'  without  'if'	102	None	add
623	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	102	None	add
624	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	102	None	add
625	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }	  	non-compiled	[CE]  'else'  without  'if'	181	None	add
626	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {	  	non-compiled	[CE]  ')'  expected	27	None	add
627	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  reached  end  of  file  while  parsing	107	None	add
628	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
629	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg);  if(options.hasOption(opt))  {	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
630	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(i,  2));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(i,  2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(i,  2));	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(i,    2));    	non-compiled	[CE]  'else'  without  'if'	52	None	replace
631	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
632	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(stopAtNonOption)  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
633	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {	  	non-compiled	[CE]  'else'  without  'if'	176	None	add
634	[BUG]  [BUGGY]  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&!!options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&&!!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)&&!!options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	117	None	add
635	[BUG]  [BUGGY]  if(options.hasOption(option)&&!options.hasOption(arg.substring(0,  2)))  {  [CE]  cannot  find  symbol  option  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(option)&&!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option)&&!options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  cannot  find  symbol  option	118	None	replace
636	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)&&!options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	118	4	replace
637	[BUG]  [BUGGY]  if(options.hasOption(arg)&&!options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&!options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	118	4	replace
638	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  if(options.hasOption(opt)&|  options.hasOption(arg))  {  [CE]  illegal  start  of  expression  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  if(options.hasOption(opt)&|  options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg))    {    if(options.hasOption(opt)&|  options.hasOption(arg))  {	  	non-compiled	[CE]  illegal  start  of  expression	155	None	add
639	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  option  =  options.getOption(options);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	65	None	replace
640	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add( "- ");  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add( "- ");	  tokens.add(opt);    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
641	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	78	None	add
642	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(2,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	78	None	add
643	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3,  2));  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(3,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	78	None	add
644	[BUG]  [BUGGY]  if(eatTheRest)  {  if(stopAtNonOption)  {  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest)  {  if(stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(eatTheRest)  {  if(stopAtNonOption)  {	  if(!stopAtNonOption)    {    if(!stopAtNONOption)    {    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
645	[BUG]  [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	163	None	add
646	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }  [CE]  'else'  without  'if'  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    options.toArray(arguments[i]);    }    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
647	[BUG]  [BUGGY]  if(options.hasOption(option)&&  options.hasOption(arg.substring(1)))  {  [CE]  cannot  find  symbol  option  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(option)&&  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option)&&  options.hasOption(arg.substring(1)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	non-compiled	[CE]  cannot  find  symbol  option	28	None	replace
648	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(4));  }	  	non-compiled	[CE]  'else'  without  'if'	94	None	add
649	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
650	[BUG]  [BUGGY]  if(options.hasOption(option)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  ')'  expected  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(option)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  ')'  expected	44	None	replace
651	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.charAt(0)))  {  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.charAt(0)))  {  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    if(options.hasOption(arg.charAt(0)))  {  tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	168	None	add
652	[BUG]  [BUGGY]  if(options.hasOption(option)&&  stopAtNonOption)  {  [CE]  cannot  find  symbol  option  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(option)&&  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option)&&  stopAtNonOption)  {	  if(options.hasOption(opt))    {    if(options.hasOption(opt)&&!stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  option	135	None	replace
653	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(eatTheRest  ||  options.hasOption(arg.substring(0,  2)))  {	  if(stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	72	3	replace
654	[BUG]  [BUGGY]  if(eatTheRest  ||  options.hasOption(arg.substring(0,  2)))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(eatTheRest  ||  options.hasOption(arg.substring(0,  2)))  {	  if(stopAtNonOption    ||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	72	3	replace
655	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  if(!stopAtNonOption  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  if(!stopAtNonOption  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(opt))    {    if(!stopAtNonOption  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
656	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
657	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  Option  option  =  options.getOption(option);  [CE]  variable  option  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  Option  option  =  options.getOption(option);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        Option    option    =    options.getOption(opt);    Option  option  =  options.getOption(option);	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  flatten(Options,String[],boolean)	125	None	add
658	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option!=  null)  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option!=  null)  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        Option    option    =    options.getOption(opt);    if(option!=  null)  {	  	non-compiled	[CE]  'else'  without  'if'	125	None	add
659	[BUG]  [BUGGY]  tokens.add(arg.substring(i));  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(i));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(i));	  tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
660	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {	          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	42	None	replace
661	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(arg)&&  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  ')'  expected  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(arg)&&  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(options.hasOption(arg)&&  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  ')'  expected	45	None	replace
662	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(arg)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  ')'  expected  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(arg)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(options.hasOption(arg)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  ')'  expected	45	None	replace
663	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(stopAtNonOption)  {  if(options.hasOption(opt))  <  tokens.add(arg.substring(0,  2));  }  [CE]  >  expected  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(stopAtNonOption)  {  if(options.hasOption(opt))  <  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(stopAtNonOption)  {  if(options.hasOption(opt))  <  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  >  expected	107	None	add
664	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  1));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  tokens.add(arg.substring(i,  1));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(i,  1));	  tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	29	None	replace
665	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring((1));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring((1));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring((1));  }	  	non-compiled	[CE]  'else'  without  'if'	94	None	add
666	[BUG]  [BUGGY]  if(stopAtNonOption)  {  If(!options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  If(!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  If(!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    If(!options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  ';'  expected	86	None	replace
667	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option  ==  null)  {  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);  if(option  ==  null)  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        Option    option    =    options.getOption(opt);    if(option  ==  null)  {	  	non-compiled	[CE]  'else'  without  'if'	125	None	add
668	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2);  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	140	None	add
669	[BUG]  [BUGGY]  if(!options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	121	None	replace
670	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	3	None	add
671	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	3	5	add
672	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	3	5	add
673	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  	non-compiled	[CE]  'else'  without  'if'	158	None	add
674	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  	non-compiled	[CE]  'else'  without  'if'	158	None	add
675	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2  +  1));  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2  +  1));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2  +  1));	  	non-compiled	[CE]  'else'  without  'if'	158	None	add
676	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));	  	non-compiled	[CE]  'else'  without  'if'	158	None	add
677	[BUG]  [BUGGY]  if(options.hasOption(stop)&&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [CE]  cannot  find  symbol  stop  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(stop)&&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(stop)&&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2))    ||    stopAtNonOption)    {    	non-compiled	[CE]  cannot  find  symbol  stop	145	None	replace
678	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  1)  ||  options.hasOption(opt))  {  [CE]  ')'  expected  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  1)  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    1))    ||    options.hasOption(opt))    {    if(options.hasOption(arg.substring(0,  1)  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  ')'  expected	21	None	add
679	[BUG]  [BUGGY]  if(!options.hasOption(opt)||!options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt)||!options.hasOption(arg.substring(0,  2))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt)||!options.hasOption(arg.substring(0,  2))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||!options.hasOption(arg.substring(0,    2))    {    	non-compiled	[CE]  ')'  expected	120	None	replace
680	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	151	None	add
681	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	151	None	add
682	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  NullPointerException  	170	6	add
683	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  NullPointerException  	170	6	add
684	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	170	6	add
685	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	170	6	add
686	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]        NullPointerException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    return    null;    }    if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	170	None	add
687	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	99	5	add
688	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	99	5	add
689	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	99	None	add
690	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    	non-compiled	[CE]  'else'  without  'if'	141	None	replace
691	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    	non-compiled	[CE]  'else'  without  'if'	141	None	replace
692	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	41	5	add
693	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	41	5	add
694	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	41	None	add
695	[BUG]  [BUGGY]  ||!stopAtNonOption)  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  ||!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||!stopAtNonOption)  {	  if(!stopAtNonOption)    {    If(!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
696	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    	compilable	  [FE]  UnrecognizedOptionException  	114	4	replace
697	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    	compilable	  [FE]  UnrecognizedOptionException  	114	4	replace
698	[BUG]  [BUGGY]  arg  =  options.getOption(option);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  arg  =  options.getOption(option);  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	arg  =  options.getOption(option);	  arg    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	172	None	replace
699	[BUG]  [BUGGY]  arg  =  options.getOption(options.getValue(opt));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  arg  =  options.getOption(options.getValue(opt));  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	arg  =  options.getOption(options.getValue(opt));	  arg    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	172	None	replace
700	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt!=  null)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(opt!=  null)  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	119	3	replace
701	[BUG]  [BUGGY]  if(opt!=  null)  {  [FE]  ComparisonFailure  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt!=  null)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt!=  null)  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    2))    ||!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	119	3	replace
702	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt.equals(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(opt.equals(arg))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	85	4	replace
703	[BUG]  [BUGGY]  if(opt.equals(arg))  {  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt.equals(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt.equals(arg))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,    1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	85	4	replace
704	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!eatTheRest)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!eatTheRest)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  if(!stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	92	None	replace
705	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(!options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(!options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(!options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	113	None	add
706	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(1,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)&&  options.hasOption(arg.substring(1,  2)))  {	  if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	164	4	replace
707	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(1,  2)))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(1,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&  options.hasOption(arg.substring(1,  2)))  {	  if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	164	4	replace
708	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	compilable	  [FE]  UnrecognizedOptionException  	95	4	replace
709	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	compilable	  [FE]  UnrecognizedOptionException  	95	4	replace
710	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  if(stopAtNONOption  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  if(stopAtNONOption  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption    ||    options.hasOption(opt))    {    if(stopAtNONOption  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	138	None	add
711	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt)&&!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!options.hasOption(opt)&&!stopAtNonOption)  {	  if(!options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	19	3	replace
712	[BUG]  [BUGGY]  if(!options.hasOption(opt)&&!stopAtNonOption)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(opt)&&!stopAtNonOption)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt)&&!stopAtNonOption)  {	  if(!options.hasOption(opt))    {    	compilable	  [FE]  ComparisonFailure  	19	3	replace
713	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    If(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	74	None	replace
714	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)||!options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	116	4	replace
715	[BUG]  [BUGGY]  if(options.hasOption(arg)||!options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||!options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	116	4	replace
716	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(opt!=  null)  {  tokens.add(arg);  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                tokens.add(arg);        tokens.add(arg);    if(opt!=  null)  {  tokens.add(arg);  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	1	5	add
717	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(opt!=  null)  {  tokens.add(arg);  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(opt!=  null)  {  tokens.add(arg);  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        tokens.add(arg);    if(opt!=  null)  {  tokens.add(arg);  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	1	5	add
718	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!eatTheRest)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!eatTheRest)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  if(!stopAtNonOption)    {    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
719	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  if(!stopAtNonOption)    {    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
720	[BUG]  [BUGGY]  if(opt.equals( " "))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(opt.equals( " "))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt.equals( " "))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  }	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
721	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  }  else  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  }  else  {	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
722	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)&&  options.hasOption(arg.substring(1)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	28	4	replace
723	[BUG]  [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(1)))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&  options.hasOption(arg.substring(1)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	compilable	  [FE]  UnrecognizedOptionException  	28	4	replace
724	[BUG]  [BUGGY]  if(options.hasOption(arguments)||  options.hasOption(arg.substring(1)))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arguments)||  options.hasOption(arg.substring(1)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arguments)||  options.hasOption(arg.substring(1)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(1)))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	28	None	replace
725	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	aughtExceptionHandler.handleMissingException( " ");	  if(opt!=    null)    {    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
726	[BUG]  [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed();  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  aughtExceptionHandler.handleMoreGuaranteed();  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	aughtExceptionHandler.handleMoreGuaranteed();	  if(opt!=    null)    {    if(options.hasOption(arg.substring(0,    2))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	157	None	replace
727	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!eatTheRest)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!eatTheRest)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  if(!stopAtNonOption)    {    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
728	[BUG]  [BUGGY]  If(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  If(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	If(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    If(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  ';'  expected	63	None	replace
729	[BUG]  [BUGGY]  while(!eatTheRest)  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  while(!eatTheRest)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	while(!eatTheRest)  {	  if(!stopAtNonOption)    {    while(!stopAtNonOption)    {    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
730	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(!options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(!options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(!options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	160	None	add
731	[BUG]  [BUGGY]  if(option!=  null)  {  [CE]  cannot  find  symbol  option  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(option!=  null)  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(option!=  null)  {	          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option    option    =    options.getOption(opt);    	non-compiled	[CE]  cannot  find  symbol  option	126	None	replace
732	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  else  {	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    	compilable	  [FE]  UnrecognizedOptionException  	123	4	replace
733	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  else  {  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  else  {	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    	compilable	  [FE]  UnrecognizedOptionException  	123	4	replace
734	[BUG]  [BUGGY]  /*  -D  tokens.add(arg.substring(0,  2));  [CE]  unclosed  comment  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  /*  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	/*  -D  tokens.add(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  unclosed  comment	142	None	replace
735	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option    options    =    options.getOption(opt);    	compilable	  [FE]  MissingArgumentException  	124	4	replace
736	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [FE]  MissingArgumentException  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	          if(options.hasOption(opt))    {    tokens.add(arg);    }    Option    options    =    options.getOption(opt);    	compilable	  [FE]  MissingArgumentException  	124	4	replace
737	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(eatTheRest  ||  options.hasOption(opt))  {	  if(stopAtNonOption    ||    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	139	4	replace
738	[BUG]  [BUGGY]  if(eatTheRest  ||  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest  ||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(eatTheRest  ||  options.hasOption(opt))  {	  if(stopAtNonOption    ||    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	139	4	replace
739	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    	compilable	  [FE]  UnrecognizedOptionException  	79	4	replace
740	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    	compilable	  [FE]  UnrecognizedOptionException  	79	4	replace
741	[BUG]  [BUGGY]  &&  options.hasOption(opt))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  &&  options.hasOption(opt))  {  tokens.add(arg);  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	&&  options.hasOption(opt))  {  tokens.add(arg);	  ||    options.hasOption(opt))    {    tokens.add(arg);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
742	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(option))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(option))  {	  if(options.hasOption(option)||    options.hasOption(option))    {    	non-compiled	[CE]  cannot  find  symbol  option	132	None	replace
743	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(opt))  {	  if(options.hasOption(option)||    options.hasOption(option))    {    	compilable	  [FE]  UnrecognizedOptionException  	132	4	replace
744	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(opt)||  options.hasOption(opt))  {	  if(options.hasOption(option)||    options.hasOption(option))    {    	compilable	  [FE]  UnrecognizedOptionException  	132	4	replace
745	[BUG]  [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  else  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  else  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&    options.hasOption(arg.substring(0,    2)))    {    else  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	163	None	add
746	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(arg)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  ')'  expected  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(arg)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  if(options.hasOption(arg)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  ')'  expected	44	None	replace
747	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  ')'  expected  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  if(options.hasOption(opt)||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  if(options.hasOption(opt))    {    if(options.hasOption(opt)    ||    arguments.contains(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  ')'  expected	44	None	replace
748	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    else  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	181	None	add
749	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(!options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  if(!options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    if(!options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  	non-compiled	[CE]  'else'  without  'if'	181	None	add
750	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
751	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
752	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
753	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(!stopAtNonOption)    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	176	5	add
754	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(!options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  if(!options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1,    2));    }    if(!options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(1,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	153	None	add
755	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	5	None	add
756	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  else  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  else  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&    options.hasOption(arg.substring(0,    2)))    {    else  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	23	None	add
757	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2  &&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  arguments.length  >  2  &&  options.hasOption(opt))  {	  if(!stopAtNonOption    &&    arguments.length    >    2)    {    	compilable	  [FE]  UnrecognizedOptionException  	58	4	replace
758	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2  &&  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2  &&  options.hasOption(opt))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  arguments.length  >  2  &&  options.hasOption(opt))  {	  if(!stopAtNonOption    &&    arguments.length    >    2)    {    	compilable	  [FE]  UnrecognizedOptionException  	58	4	replace
759	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }	  	non-compiled	[CE]  'else'  without  'if'	168	None	add
760	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.length()))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.length()))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    if(options.hasOption(arg.length()))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }	  	non-compiled	[CE]  'else'  without  'if'	168	None	add
761	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    break;    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	168	None	add
762	[BUG]  [BUGGY]  if(options.hasOption(arg.length()))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg.length()))  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.length()))  {	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	146	None	replace
763	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)&&  options.hasOption(arg.substring(2)))  {	  if(options.hasOption(opt)&&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	24	4	replace
764	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(2)))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&  options.hasOption(arg.substring(2)))  {	  if(options.hasOption(opt)&&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	24	4	replace
765	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	36	None	add
766	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	36	None	add
767	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	178	None	add
768	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	178	None	add
769	[BUG]  [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]          if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	                if(options.hasOption(opt))        {        tokens.add(arg);        }        if(options.hasOption(arg))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	178	None	add
770	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	78	None	add
771	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	105	6	replace
772	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	105	6	replace
773	[BUG]  [BUGGY]  if(eatTheRest  ==  null)  {  [CE]  incomparable  types:  boolean  and  <null>  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(eatTheRest  ==  null)  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(eatTheRest  ==  null)  {	  if(!stopAtNonOption)    {    if(!stopAtNONOption)    {    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	35	None	replace
774	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  if(!options.hasOption(arg))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  if(!options.hasOption(arg))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))    {    if(!options.hasOption(arg))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
775	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    	compilable	  [FE]  UnrecognizedOptionException  	93	4	replace
776	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {  [FE]  UnrecognizedOptionException  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  else  {	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    	compilable	  [FE]  UnrecognizedOptionException  	93	4	replace
777	[BUG]  [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
778	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	88	None	add
779	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(!options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(!options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(!options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	88	None	add
780	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    ||!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	165	4	replace
781	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    ||!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	165	4	replace
782	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	compilable	  [FE]  UnrecognizedOptionException  	89	4	replace
783	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	compilable	  [FE]  UnrecognizedOptionException  	89	4	replace
