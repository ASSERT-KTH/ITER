bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  tokens.add(arg);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	13	5	add
2	[BUG]  [BUGGY]      tokens.add(arg);  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  tokens.add(arg);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	13	5	add
3	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	13	5	add
4	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	13	5	add
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	6	add
6	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	6	add
7	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  options.add(opt);  }  [CE]  cannot  find  symbol  [FE]          UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  options.add(opt);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  options.add(opt);  }	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
8	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }  [CE]  cannot  find  symbol  [FE]            UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  options.toArray(arguments[i]);  }	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
9	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg))  {	  if(options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	2	4	replace
10	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {	  if(options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	2	4	replace
11	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  options.hasOption(opt))  {	  if(options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	2	4	replace
12	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(opt))  {	  if(options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	2	4	replace
13	[BUG]  [BUGGY]  if(options.hasOption(arguments))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arguments))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arguments))  {	  if(options.hasOption(opt))    {    	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	2	None	replace
14	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
15	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	compilable	  [FE]  UnrecognizedOptionException  	9	4	replace
16	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	compilable	  [FE]  UnrecognizedOptionException  	9	4	replace
17	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!options.hasOption(opt))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	4	3	replace
19	[BUG]  [BUGGY]  if(!options.hasOption(opt))  {  [FE]  ComparisonFailure  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(opt))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	4	3	replace
20	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(option))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(option))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  cannot  find  symbol  option	6	None	replace
21	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	6	4	replace
22	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  1))  ||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	6	4	replace
23	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	21	4	replace
24	[BUG]  [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	21	4	replace
25	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	21	3	replace
26	[BUG]  [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)||  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	21	3	replace
27	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	21	4	replace
28	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  [FE]  UnrecognizedOptionException  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(1)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	21	4	replace
29	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  1));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  1));	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
30	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  3));  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  3));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  3));	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
31	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  4));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  4));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  4));	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
32	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption)  {  if(!stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)    {    if(!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	add
33	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  If(!stopAtNonOption)  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption)  {  If(!stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)    {    If(!stopAtNonOption)  {	  	non-compiled	[CE]  ';'  expected	22	None	add
34	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  ||!stopAtNonOption)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption)  {  ||!stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)    {    ||!stopAtNonOption)  {	  	non-compiled	[CE]  illegal  start  of  expression	22	None	add
35	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(!stopAtNONOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption)  {  if(!stopAtNONOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)    {    if(!stopAtNONOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	add
36	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	15	3	add
37	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	15	3	add
38	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  ||  options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  ||  options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    ||  options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
39	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  ||  options.hasOption(opt))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  ||  options.hasOption(opt))  {  tokens.add(arg);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    ||  options.hasOption(opt))  {  tokens.add(arg);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
40	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	15	None	add
41	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	15	5	add
42	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	15	5	add
43	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    if(options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
44	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt)  ||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  ')'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt)  ||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    if(options.hasOption(opt)  ||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  	non-compiled	[CE]  ')'  expected	1	None	add
45	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt)  ||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  ')'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt)  ||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    if(options.hasOption(opt)  ||  arguments.contains(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	  	non-compiled	[CE]  ')'  expected	1	None	add
46	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt)  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]          UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt)  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    if(options.hasOption(opt)  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
47	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	20	None	add
48	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  	non-compiled	[CE]  ')'  expected	20	None	add
49	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  option.hasOption(arg.substring(0,  2))  {	  	non-compiled	[CE]  ')'  expected	20	None	add
50	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&|  options.hasOption(arg.substring(0,  2)))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  if(options.hasOption(opt)&|  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    if(options.hasOption(opt)&|  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
51	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  'else'  without  'if'	7	None	replace
52	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i,  2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i,  2));  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i,  2));	      	non-compiled	[CE]  'else'  without  'if'	7	None	replace
53	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
54	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
55	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  &&  options.hasOption(opt))  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	23	4	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption  &&  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  &&  options.hasOption(opt))  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	23	4	replace
57	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  arguments.length  >  2)  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	23	4	replace
58	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  arguments.length  >  2)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  arguments.length  >  2)  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	23	4	replace
59	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!eatTheRest)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!eatTheRest)  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	23	3	replace
60	[BUG]  [BUGGY]  if(!eatTheRest)  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!eatTheRest)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!eatTheRest)  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  ComparisonFailure  	23	3	replace
61	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	add
62	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	add
63	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  If(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  If(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    If(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  ';'  expected	26	None	add
64	[BUG]  [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(opt))  {  tokens.add(arg);  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
65	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  option  =  options.getOption(opt);	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
66	[BUG]  [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(opt))  {  tokens.add(arg);	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
67	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	27	4	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	27	4	replace
69	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	27	4	replace
70	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  1)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	27	4	replace
71	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	27	3	replace
72	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||  options.hasOption(arg.substring(0,  2)))  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	27	3	replace
73	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
74	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    If(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  ';'  expected	5	None	add
75	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  ||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  ||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    ||  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
76	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
78	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	compilable	  [FE]  UnrecognizedOptionException  	25	4	replace
79	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	compilable	  [FE]  UnrecognizedOptionException  	25	4	replace
80	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
81	[BUG]  [BUGGY]  tokens.add(opt);  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(opt);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(opt);	      tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
82	[BUG]  [BUGGY]  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(2));	      tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
83	[BUG]  [BUGGY]  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(1));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(1));	      tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
84	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
85	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  1)))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  1)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,  1)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
86	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  If(!options.hasOption(arg.substring(0,  2)))  {  [CE]  ';'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  If(!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,    2)))    {    If(!options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
87	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
88	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	compilable	  [FE]  UnrecognizedOptionException  	17	4	replace
89	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	compilable	  [FE]  UnrecognizedOptionException  	17	4	replace
90	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
91	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
92	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
93	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
94	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	compilable	  [FE]  UnrecognizedOptionException  	12	4	replace
95	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [FE]  UnrecognizedOptionException  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	compilable	  [FE]  UnrecognizedOptionException  	12	4	replace
96	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
97	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	10	5	add
98	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	10	5	add
99	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	10	5	add
100	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	10	5	add
101	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
102	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	10	5	add
103	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	10	5	add
104	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	10	6	add
105	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	10	6	add
106	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
107	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	compilable	  [FE]  UnrecognizedOptionException  	17	4	replace
108	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	compilable	  [FE]  UnrecognizedOptionException  	17	4	replace
109	[BUG]  [BUGGY]  tokens.add(option);  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(option);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(option);	      tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
110	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
111	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2)+  1);  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  2)+  1);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  2)+  1);	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
112	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  while(!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption)  {  while(!stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)    {    while(!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	22	None	add
113	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	compilable	  [FE]  UnrecognizedOptionException  	25	4	replace
114	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [FE]  UnrecognizedOptionException  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	compilable	  [FE]  UnrecognizedOptionException  	25	4	replace
115	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	4	4	replace
116	[BUG]  [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	4	4	replace
117	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	4	4	replace
118	[BUG]  [BUGGY]  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)&&!options.hasOption(arg.substring(0,  2)))  {	  if(!options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	4	4	replace
119	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
120	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,  2))  ||!options.hasOption(arg.substring(0,  2))  {	  	non-compiled	[CE]  ')'  expected	3	None	add
121	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [CE]  ')'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {	  	non-compiled	[CE]  ')'  expected	3	None	add
122	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]          UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,    2)))    {    if(!options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	3	None	add
123	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    }    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
124	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  Option  options  =  options.getOption(opt);  [CE]  variable  options  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  Option  options  =  options.getOption(opt);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  options  =  options.getOption(opt);	  	non-compiled	[CE]  variable  options  is  already  defined  in  method  flatten(Options,String[],boolean)	15	None	add
125	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  Option  option  =  options.getOption(opt);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);	  	compilable	  [FE]  ComparisonFailure  	15	3	add
126	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  Option  option  =  options.getOption(opt);  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  Option  option  =  options.getOption(opt);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    Option  option  =  options.getOption(opt);	  	compilable	  [FE]  ComparisonFailure  	15	3	add
127	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  Option  options  =  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  ';'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  Option  options  =  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    Option  options  =  options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  ';'  expected	5	None	add
128	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.string(0,  2)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.string(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption  &&  options.hasOption(arg.string(0,  2)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	add
129	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	compilable	  [FE]  UnrecognizedOptionException  	9	4	replace
130	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [FE]  UnrecognizedOptionException  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  else  {	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	compilable	  [FE]  UnrecognizedOptionException  	9	4	replace
131	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
132	[BUG]  [BUGGY]  if(options.hasOption(option)||  options.hasOption(option))  {  [CE]  cannot  find  symbol  option  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(option)||  options.hasOption(option))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option)||  options.hasOption(option))  {	  if(options.hasOption(opt))    {    	non-compiled	[CE]  cannot  find  symbol  option	2	None	replace
133	[BUG]  [BUGGY]  Option  options  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  Option  options  =  options.getOption(opt);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  options  =  options.getOption(opt);	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
134	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg);  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  Option  option  =  options.getOption(arg);  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	Option  option  =  options.getOption(arg);	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
135	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt)&&!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt)&&!stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    if(options.hasOption(opt)&&!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
136	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  if(!options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    if(!options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
137	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt)&&  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  if(options.hasOption(opt)&&  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    if(options.hasOption(opt)&&  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
138	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption  ||  options.hasOption(opt))  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	23	4	replace
139	[BUG]  [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption  ||  options.hasOption(opt))  {	  if(!stopAtNonOption)    {    	compilable	  [FE]  UnrecognizedOptionException  	23	4	replace
140	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	compilable	  [FE]  UnrecognizedOptionException  	18	4	replace
141	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [FE]  UnrecognizedOptionException  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	compilable	  [FE]  UnrecognizedOptionException  	18	4	replace
142	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
143	[BUG]  [BUGGY]  if(options.hasOption(option)&&  options.hasOption(arg.substring(0,  2)))  {  [CE]  cannot  find  symbol  option  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(option)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(option)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	non-compiled	[CE]  cannot  find  symbol  option	21	None	replace
144	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	21	3	replace
145	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  ComparisonFailure  	21	3	replace
146	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	13	None	add
147	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  else  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  else  if(options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    else  if(options.hasOption(opt))  {	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
148	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt))  {  if(!stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))    {    if(!stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	1	None	add
149	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  1))  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  1))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  1))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
150	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)||  options.hasOption(opt))  {  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2)||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)||  options.hasOption(opt))  {	  if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
151	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  MissingArgumentException  	16	4	replace
152	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  MissingArgumentException  	16	4	replace
153	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  MissingArgumentException  	16	4	replace
154	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [FE]  MissingArgumentException  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg);    }    	compilable	  [FE]  MissingArgumentException  	16	4	replace
155	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)||  options.hasOption(arg))  {	  if(options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	2	4	replace
156	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg))  {	  if(options.hasOption(opt))    {    	compilable	  [FE]  UnrecognizedOptionException  	2	4	replace
157	[BUG]  [BUGGY]  if(opt!=  null)  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(opt!=  null)  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt!=  null)  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  ')'  expected	25	None	replace
158	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(stopAtNonOption)  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	27	4	replace
159	[BUG]  [BUGGY]  if(stopAtNonOption)  {  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(stopAtNonOption)  {	  if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	27	4	replace
160	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	compilable	  [FE]  UnrecognizedOptionException  	17	4	replace
161	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  UnrecognizedOptionException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	compilable	  [FE]  UnrecognizedOptionException  	17	4	replace
162	[BUG]  [BUGGY]  if(opt!=  null)  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(opt!=  null)  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt!=  null)  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  ')'  expected	18	None	replace
163	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	21	4	replace
164	[BUG]  [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg)&&  options.hasOption(arg.substring(0,  2)))  {	  if(options.hasOption(opt)||    options.hasOption(arg.substring(0,    2)))    {    	compilable	  [FE]  UnrecognizedOptionException  	21	4	replace
165	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  ||!options.hasOption(arg.substring(0,  2)))  {  [CE]  illegal  start  of  expression  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  ||!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,    2)))    {    ||!options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
166	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  i));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  tokens.add(arg.substring(0,  i));  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	tokens.add(arg.substring(0,  i));	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
167	[BUG]  [BUGGY]  if(opt!=  null)  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(opt!=  null)  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(opt!=  null)  {  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  ')'  expected	9	None	replace
168	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }	  	compilable	  [FE]  UnrecognizedOptionException  	13	4	add
169	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  break;  }	  	compilable	  [FE]  UnrecognizedOptionException  	13	4	add
170	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	13	6	add
171	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [FE]  NullPointerException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  return  null;  }	  	compilable	  [FE]  NullPointerException  	13	6	add
172	[BUG]  [BUGGY]  arg  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  arg  =  options.getOption(opt);  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	arg  =  options.getOption(opt);	      	non-compiled	[CE]  'else'  without  'if'	7	None	replace
173	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  2)  ||  options.hasOption(opt))  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  if(options.hasOption(arg.substring(0,  2)  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(options.hasOption(arg.substring(0,  2)  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  ')'  expected	5	None	add
174	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [CE]  reached  end  of  file  while  parsing  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(opt))    {    if(!options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	5	None	add
175	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  =  stopAtNonOption;  }	  	non-compiled	[CE]  'else'  without  'if'	10	None	add
176	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	5	add
177	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	5	add
178	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	15	3	add
179	[BUG]  [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]      if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	15	3	add
180	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {  [BUGGY]    {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption    &&    options.hasOption(arg.substring(0,    2)))    {    if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2))  ||  stopAtNonOption)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	26	None	add
181	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	compilable	  [FE]  UnrecognizedOptionException  	19	4	replace
182	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [FE]  UnrecognizedOptionException  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {    [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	      if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	compilable	  [FE]  UnrecognizedOptionException  	19	4	replace
