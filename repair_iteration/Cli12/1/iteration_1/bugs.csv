bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(options.hasOption(opt))  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt))  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  UnrecognizedOptionException  	1	4	replace
2	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(options.hasOption(opt))  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt))  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  UnrecognizedOptionException  	1	4	replace
3	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!options.hasOption(arg.substring(0,  2)))  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  UnrecognizedOptionException  	1	4	replace
4	[BUG]  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(!options.hasOption(arg.substring(0,  2)))  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!options.hasOption(arg.substring(0,  2)))  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  UnrecognizedOptionException  	1	4	replace
5	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  ComparisonFailure  	1	3	replace
6	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  ComparisonFailure  	1	3	replace
7	[BUG]  [BUGGY]    [CE]  'else'  without  'if'  [FE]          ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	  	if  (options.hasOption(arg.substring(0,  2)))    {  	non-compiled	[CE]  'else'  without  'if'	1	None	replace
8	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }		non-compiled	[CE]  'else'  without  'if'	2	None	add
9	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));		non-compiled	[CE]  'else'  without  'if'	2	None	add
10	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    tokens.add(arg.substring(0,  2));  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	    tokens.add(arg.substring(0,  2));		compilable	  [FE]  MissingArgumentException  	2	5	add
11	[BUG]  [BUGGY]    tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]        ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    tokens.add(arg.substring(0,  2));  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    tokens.add(arg.substring(0,  2));		compilable	  [FE]  MissingArgumentException  	2	5	add
12	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }		non-compiled	[CE]  'else'  without  'if'	2	None	add
13	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    tokens.add(arg);  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	    tokens.add(arg);		compilable	  [FE]  UnrecognizedOptionException  	2	5	add
14	[BUG]  [BUGGY]    tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    tokens.add(arg);  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    tokens.add(arg);		compilable	  [FE]  UnrecognizedOptionException  	2	5	add
15	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	    if(options.hasOption(opt))  {  tokens.add(arg);  }		compilable	  [FE]  ComparisonFailure  	2	3	add
16	[BUG]  [BUGGY]    if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    if(options.hasOption(opt))  {  tokens.add(arg);  }		compilable	  [FE]  ComparisonFailure  	2	3	add
17	[BUG]  [BUGGY]    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));		non-compiled	[CE]  'else'  without  'if'	2	None	add
18	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));		non-compiled	[CE]  'else'  without  'if'	2	None	add
19	[BUG]  [BUGGY]    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));		non-compiled	[CE]  'else'  without  'if'	2	None	add
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  ComparisonFailure  	1	3	replace
21	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  ComparisonFailure  	1	3	replace
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(!stopAtNonOption)  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption)  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  ComparisonFailure  	1	3	replace
23	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(!stopAtNonOption)  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption)  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  ComparisonFailure  	1	3	replace
24	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }		non-compiled	[CE]  'else'  without  'if'	2	None	add
25	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]  if  (options.hasOption(arg.substring(0,  2)))      {  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));		non-compiled	[CE]  'else'  without  'if'	2	None	add
26	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	add	if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  ComparisonFailure  	1	3	replace
27	[BUG]  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  [BUGGY]  if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {  [BUGGY]  {    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.7071067811865476	81	82	3	replace	if(!stopAtNonOption  &&  options.hasOption(arg.substring(0,  2)))  {	if  (options.hasOption(arg.substring(0,  2)))    {  	compilable	  [FE]  ComparisonFailure  	1	3	replace
