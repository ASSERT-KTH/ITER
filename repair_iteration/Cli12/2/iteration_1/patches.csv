bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
2	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
4	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
5	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
7	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
8	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  Option  option  =  options.getOption(arg);  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg);	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
9	[BUG]  [BUGGY]  options.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  options.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options.add(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
10	[BUG]  [BUGGY]  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
11	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(i  +  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(i  +  2));	      tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
12	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
13	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
14	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	3	4	add
15	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	3	4	add
16	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
17	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
18	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
19	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
20	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
21	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
22	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
24	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(0,  1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  1));	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
25	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  3));  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(0,  3));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  3));	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
26	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  5));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(0,  5));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  5));	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
27	[BUG]  [BUGGY]  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));	      if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
28	[BUG]  [BUGGY]  tors.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tors.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tors.add(arg.substring(i  +  1));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
29	[BUG]  [BUGGY]  tors.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tors.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tors.add(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
30	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
31	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
33	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
34	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
35	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
36	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
37	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
38	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
39	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]            UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
40	[BUG]  [BUGGY]  tokens.add(opt);  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(opt);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(opt);	      tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
41	[BUG]  [BUGGY]  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(2));	      tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
42	[BUG]  [BUGGY]  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(1));	      tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
43	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  ters.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	ters.add(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	21	None	replace
44	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	19	3	add
45	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	19	3	add
46	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	19	3	add
47	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	19	3	add
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	19	3	add
49	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	19	3	add
50	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	19	3	add
51	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	19	3	add
52	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	19	4	add
53	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	19	4	add
54	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
55	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
56	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
57	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  else  {  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
58	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	17	3	add
59	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	17	3	add
60	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	17	4	add
61	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	17	4	add
62	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
63	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
64	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  Option  option  =  options.hasOption(arg.substring(2));  [CE]  incompatible  types  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  Option  option  =  options.hasOption(arg.substring(2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    Option  option  =  options.hasOption(arg.substring(2));	  	non-compiled	[CE]  incompatible  types	17	None	add
65	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  tokens.add(arg);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	13	4	add
66	[BUG]  [BUGGY]      tokens.add(arg);  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  tokens.add(arg);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	13	4	add
67	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	13	None	add
68	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	13	4	add
69	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	13	4	add
70	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	4	add
71	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	4	add
72	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	13	None	add
73	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	1	4	add
74	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	1	4	add
75	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	1	4	add
76	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	1	4	add
77	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
78	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]          MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
79	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	1	4	add
80	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	1	4	add
81	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
82	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(arg.substring(0,  2));	      if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
83	[BUG]  [BUGGY]  options.addOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  options.addOption(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options.addOption(arg.substring(0,  2));	      if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
84	[BUG]  [BUGGY]  tokens.add(arg.substring(i));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(i));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(i));	      tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
85	[BUG]  [BUGGY]  if(opt  ==  null)  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(opt  ==  null)  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(opt  ==  null)  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	      tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
86	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
87	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
88	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	3	4	add
89	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2)+  1);  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(0,  2)+  1);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2)+  1);	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
90	[BUG]  [BUGGY]  tokens.add(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(1,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(1,  2));	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
91	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	13	None	add
92	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.getOptionCount();  i++)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.getOptionCount();  i++)  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.getOptionCount();  i++)  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	13	None	add
93	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	13	None	add
94	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
95	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
96	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }  [CE]  ')'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }	  	non-compiled	[CE]  ')'  expected	15	None	add
97	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  ')'  expected	19	None	add
98	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  ')'  expected	19	None	add
99	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  ')'  expected	19	None	add
100	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [CE]  ')'  expected  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  ')'  expected	19	None	add
101	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	1	4	add
102	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	1	4	add
103	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
104	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [FE]  ComparisonFailure  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }	  	compilable	  [FE]  ComparisonFailure  	1	4	add
105	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  }	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
106	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg);  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  Option  options  =  options.getOption(arg);  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(arg);	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
107	[BUG]  [BUGGY]  Option  options  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  Option  options  =  options.getOption(opt);  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(opt);	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	11	None	replace
108	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2));  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2));  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
109	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  Option  option  =  options.getOption(opt);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(opt);	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
110	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  Option  options  =  options.getOption(arg.substring(0,  2));  [CE]  variable  options  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  Option  options  =  options.getOption(arg.substring(0,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    Option  options  =  options.getOption(arg.substring(0,  2));	  	non-compiled	[CE]  variable  options  is  already  defined  in  method  flatten(Options,String[],boolean)	17	None	add
111	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	17	3	add
112	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	17	3	add
113	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }	  tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
114	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(2));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
115	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
116	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  else  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  else  {  tokens.add(arg.substring(2));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
117	[BUG]  [BUGGY]  Option  option  =  options.getOption(i);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  Option  option  =  options.getOption(i);  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(i);	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	12	None	replace
118	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	13	None	add
119	[BUG]  [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	13	None	add
120	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	17	3	add
121	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	17	3	add
122	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(i  +  1,  2));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(i  +  1,  2));	      tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	20	None	replace
123	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
124	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  'else'  without  'if'	1	None	add
125	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  i));  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  tokens.add(arg.substring(0,  i));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  i));	      tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	2	None	replace
126	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
127	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1,  1));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1,  1));  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1,  1));  }	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	7	None	replace
128	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  1));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	9	None	replace
129	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
130	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {	  	non-compiled	[CE]  'else'  without  'if'	19	None	add
131	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	19	3	add
132	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	19	3	add
133	[BUG]  [BUGGY]      tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(i    +    1));    TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
134	[BUG]  [BUGGY]  options.add(arg);  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  options.add(arg);  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options.add(arg);	      if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	16	None	replace
135	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
136	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]    tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	22	None	replace
137	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
138	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
139	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
140	[BUG]  [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	15	4	add
141	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  Option  option  =  options.getOption(arg.substring(i  +  1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg.substring(i  +  1));	      if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
142	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  1));  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg.substring(0,  1));	      if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	18	None	replace
143	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  MissingArgumentException  	3	4	add
144	[BUG]  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]    if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {      [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  MissingArgumentException  	3	4	add
