bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    tokens.add(arg.substring(0,  2));  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	    tokens.add(arg.substring(0,  2));		compilable	  [FE]  MissingArgumentException  	4	4	add
2	[BUG]  [BUGGY]    tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    tokens.add(arg.substring(0,  2));  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	    tokens.add(arg.substring(0,  2));		compilable	  [FE]  MissingArgumentException  	4	4	add
3	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));		compilable	  [FE]  MissingArgumentException  	4	4	add
4	[BUG]  [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));		compilable	  [FE]  MissingArgumentException  	4	4	add
5	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));		non-compiled	[CE]  'else'  without  'if'	4	None	add
6	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }		non-compiled	[CE]  'else'  without  'if'	4	None	add
7	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));		non-compiled	[CE]  'else'  without  'if'	4	None	add
8	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  [BUGGY]  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));	tokens.add(arg.substring(0,  2));  //  -D    tokens.add(arg.substring(2));  //  property=value      }  	non-compiled	[CE]  'else'  without  'if'	3	None	replace
9	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  [BUGGY]  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));	tokens.add(arg.substring(0,  2));  //  -D    tokens.add(arg.substring(2));  //  property=value      }  	non-compiled	[CE]  'else'  without  'if'	3	None	replace
10	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [BUGGY]  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));	tokens.add(arg.substring(0,  2));  //  -D    tokens.add(arg.substring(2));  //  property=value      }  	non-compiled	[CE]  'else'  without  'if'	3	None	replace
11	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	tokens.add(arg.substring(0,  2));  //  -D    tokens.add(arg.substring(2));  //  property=value      }  	non-compiled	[CE]  'else'  without  'if'	3	None	replace
12	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(i  +  1));  }	tokens.add(arg.substring(0,  2));  //  -D    tokens.add(arg.substring(2));  //  property=value      }  	non-compiled	[CE]  'else'  without  'if'	3	None	replace
13	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    tokens.add(arg);  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	    tokens.add(arg);		compilable	  [FE]  UnrecognizedOptionException  	4	4	add
14	[BUG]  [BUGGY]    tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    tokens.add(arg);  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	    tokens.add(arg);		compilable	  [FE]  UnrecognizedOptionException  	4	4	add
15	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }		compilable	  [FE]  UnrecognizedOptionException  	4	4	add
16	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }		compilable	  [FE]  UnrecognizedOptionException  	4	4	add
17	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }		compilable	  [FE]  ComparisonFailure  	4	3	add
18	[BUG]  [BUGGY]    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }		compilable	  [FE]  ComparisonFailure  	4	3	add
19	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    tokens.add(arg.substring(i  +  1));  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	    tokens.add(arg.substring(i  +  1));		compilable	  [FE]  ComparisonFailure  	4	3	add
20	[BUG]  [BUGGY]    tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]    tokens.add(arg.substring(i  +  1));  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	    tokens.add(arg.substring(i  +  1));		compilable	  [FE]  ComparisonFailure  	4	3	add
21	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	tokens.add(arg.substring(0,  2));  //  -D    tokens.add(arg.substring(2));  //  property=value      }  	non-compiled	[CE]  'else'  without  'if'	3	None	replace
22	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure  [CONTEXT]  if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {    [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	tokens.add(arg.substring(0,  2));  //  -D    tokens.add(arg.substring(2));  //  property=value      }  	non-compiled	[CE]  'else'  without  'if'	3	None	replace
