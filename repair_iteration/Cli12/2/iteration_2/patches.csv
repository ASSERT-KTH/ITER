bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	97	None	replace
2	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	14	4	add
3	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	14	4	add
4	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	14	4	add
5	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	14	4	add
6	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	14	4	add
7	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	14	4	add
8	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	14	4	add
9	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	14	4	add
10	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	14	4	add
11	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	14	4	add
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(2));  }	  if(!stopAtNonOption)    {    tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	55	None	replace
13	[BUG]  [BUGGY]  parent.addArg(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  parent.addArg(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	parent.addArg(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	140	None	replace
14	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
15	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
16	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
17	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
18	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
19	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
20	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);	  	non-compiled	[CE]  illegal  start  of  expression	32	None	add
21	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
22	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
23	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
24	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
25	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
26	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]              MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	78	None	replace
27	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens  [CE]  not  a  statement  [FE]                MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  not  a  statement	78	None	replace
28	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]                  MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  ')'  expected	78	None	replace
29	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  options.add(arg);  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  options.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  options.add(arg);  }	  options.add(arg);    	non-compiled	[CE]  'else'  without  'if'	134	None	replace
30	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
31	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
32	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
33	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
34	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
35	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
36	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
37	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
39	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
40	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	65	4	add
41	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	65	4	add
42	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	65	4	add
43	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	65	4	add
44	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	65	4	add
45	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	65	4	add
46	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  options.add(opt);  }  [CE]  cannot  find  symbol  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  options.add(opt);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  options.add(opt);  }	  	non-compiled	[CE]  cannot  find  symbol	65	None	add
47	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  Option  option  =  options.getOption(opt);  if(option.hasOption(option))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  Option  option  =  options.getOption(opt);  if(option.hasOption(option))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  tokens.add(arg);  }  else  {  Option  option  =  options.getOption(opt);  if(option.hasOption(option))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	65	None	add
48	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2)+  2);  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2)+  2);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2)+  2);	  tokens.add(arg.substring(0,    2)+    1);    	non-compiled	[CE]  'else'  without  'if'	89	None	replace
49	[BUG]  [BUGGY]  -D  tokens.add(arg.substring(2));  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  -D  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	-D  tokens.add(arg.substring(2));	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  not  a  statement	108	None	replace
50	[BUG]  [BUGGY]  /  -D  tokens.add(arg.substring(2));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  /  -D  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	/  -D  tokens.add(arg.substring(2));	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
51	[BUG]  [BUGGY]  /  2.0;/  -D  tokens.add(arg.substring(2));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  /  2.0;/  -D  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	/  2.0;/  -D  tokens.add(arg.substring(2));	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
52	[BUG]  [BUGGY]  parent!=  null  &&  option.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  [CE]  not  a  statement  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  parent!=  null  &&  option.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	parent!=  null  &&  option.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  not  a  statement	138	None	replace
53	[BUG]  [BUGGY]  parent!=  null  &&  option.hasOption(arg.substring(0,  2));  [CE]  not  a  statement  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  parent!=  null  &&  option.hasOption(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	parent!=  null  &&  option.hasOption(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  not  a  statement	138	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.hasOption(arg.substring(2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.hasOption(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.hasOption(arg.substring(2));	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    Option    option    =    options.hasOption(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
55	[BUG]  [BUGGY]  options.hasOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  options.hasOption(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options.hasOption(arg.substring(0,  2));	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    Option    option    =    options.hasOption(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
56	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2));  //  -D  tokens.add(option.substring(option.substring(option.substring(option.length()  -  1)));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2));  //  -D  tokens.add(option.substring(option.substring(option.substring(option.length()  -  1)));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg.substring(0,  2));  //  -D  tokens.add(option.substring(option.substring(option.substring(option.length()  -  1)));	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	59	None	replace
57	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
58	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
59	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
60	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
61	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
62	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
63	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
64	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
65	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
66	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
67	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(option);	  Option    option    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
68	[BUG]  [BUGGY]  Options  option  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Options  option  =  options.getOption(opt);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Options  option  =  options.getOption(opt);	  Option    option    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	8	None	replace
69	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	12	4	add
70	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	12	4	add
71	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	12	4	add
72	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	12	4	add
73	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	12	4	add
74	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	12	4	add
75	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	12	4	add
76	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	12	4	add
77	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	12	4	add
78	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	12	4	add
79	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(1));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
80	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
81	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  if(!stopAtNonOption)    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	81	None	replace
82	[BUG]  [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
83	[BUG]  [BUGGY]  while(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  while(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	while(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	49	None	replace
84	[BUG]  [BUGGY]  Option  options  =  options.getOption(i);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  options  =  options.getOption(i);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(i);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	107	None	replace
85	[BUG]  [BUGGY]  Option  options  =  options.getOption(arguments[i]);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  options  =  options.getOption(arguments[i]);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(arguments[i]);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	107	None	replace
86	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }	  	compilable	  [FE]  UnrecognizedOptionException  	103	4	add
87	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [FE]  UnrecognizedOptionException  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }	  	compilable	  [FE]  UnrecognizedOptionException  	103	4	add
88	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	103	None	add
89	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens	  	non-compiled	[CE]  ';'  expected	103	None	add
90	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  if(options.hasOption(arguments[i]))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  if(options.hasOption(arguments[i]))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    if(options.hasOption(arguments[i]))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }	  	non-compiled	[CE]  'else'  without  'if'	103	None	add
91	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  ComparisonFailure  	103	4	add
92	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  ComparisonFailure  	103	4	add
93	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	121	None	replace
94	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
95	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]                  UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
96	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
97	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
98	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
99	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
100	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
101	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
102	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
103	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.	  	non-compiled	[CE]  'else'  without  'if'	137	None	add
104	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    	non-compiled	[CE]  'else'  without  'if'	86	None	replace
105	[BUG]  [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(stopAtNonOption)  {  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    	non-compiled	[CE]  'else'  without  'if'	86	None	replace
106	[BUG]  [BUGGY]  Option  arg  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  arg  =  options.getOption(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  arg  =  options.getOption(arg.substring(0,  2));	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	35	None	replace
107	[BUG]  [BUGGY]  /  -D  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  /  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	/  -D  tokens.add(arg.substring(0,  2));	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
108	[BUG]  [BUGGY]  -D  tokens.add(arg.substring(0,  2));  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	-D  tokens.add(arg.substring(0,  2));	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  not  a  statement	2	None	replace
109	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
110	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    ||    options.hasOption(arg.substring(2)))    {    tokens.add(arg);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
111	[BUG]  [BUGGY]  tokens.add(arg.substring(1));  //  -D  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(1));  //  -D  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(1));  //  -D  tokens.add(arg.substring(2));	  if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	115	None	replace
112	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	75	4	add
113	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	75	4	add
114	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	75	None	add
115	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	75	None	add
116	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	75	4	add
117	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	75	4	add
118	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	75	None	add
119	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	87	4	add
120	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	87	4	add
121	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	87	4	add
122	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	87	4	add
123	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	87	4	add
124	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	87	4	add
125	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	87	4	add
126	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	87	4	add
127	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	87	4	add
128	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	87	4	add
129	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	68	4	add
130	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	68	4	add
131	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	68	None	add
132	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	68	None	add
133	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	68	4	add
134	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	68	4	add
135	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);	  	non-compiled	[CE]  'else'  without  'if'	68	None	add
136	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	50	3	add
137	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	50	3	add
138	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {	  	non-compiled	[CE]  'else'  without  'if'	50	None	add
139	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	50	4	add
140	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	50	4	add
141	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens	  	non-compiled	[CE]  ';'  expected	50	None	add
142	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	50	None	add
143	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	37	4	add
144	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	37	4	add
145	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	37	4	add
146	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	37	4	add
147	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	37	4	add
148	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	37	4	add
149	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	37	4	add
150	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	37	4	add
151	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring  [CE]  ')'  expected  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring	  	non-compiled	[CE]  ')'  expected	37	None	add
152	[BUG]  [BUGGY]  tokens.add(arguments[i]);  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arguments[i]);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arguments[i]);	  tokens.add(opt);    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
153	[BUG]  [BUGGY]  tokens.remove(arg);  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.remove(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.remove(arg);	  tokens.add(opt);    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
154	[BUG]  [BUGGY]  tokens.add(option);  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(option);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(option);	  tokens.add(opt);    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
155	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1,  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(i  +  1,  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(i  +  1,  1));	  tokens.add(arg.substring(i    +    1,    2));    	non-compiled	[CE]  'else'  without  'if'	122	None	replace
156	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	48	3	add
157	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	48	3	add
158	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	48	None	add
159	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	48	3	add
160	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	48	3	add
161	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  MissingArgumentException  	48	4	add
162	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [FE]  MissingArgumentException  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  MissingArgumentException  	48	4	add
163	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	48	None	add
164	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	46	3	add
165	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	46	3	add
166	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {	  	non-compiled	[CE]  'else'  without  'if'	46	None	add
167	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	46	4	add
168	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	46	4	add
169	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens	  	non-compiled	[CE]  ';'  expected	46	None	add
170	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	46	None	add
171	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    if(options.hasOption(opt))    {    	non-compiled	[CE]  'else'  without  'if'	130	None	replace
172	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    if(options.hasOption(opt))    {    	non-compiled	[CE]  'else'  without  'if'	130	None	replace
173	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(i  +  1));  if(options.hasOption(opt))  {	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    if(options.hasOption(opt))    {    	non-compiled	[CE]  'else'  without  'if'	130	None	replace
174	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	44	3	add
175	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	44	3	add
176	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	44	4	add
177	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	44	4	add
178	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	44	3	add
179	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	44	3	add
180	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	44	3	add
181	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  ComparisonFailure  	44	3	add
182	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  else  {  options.add(opt);  }  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  else  {  options.add(opt);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  else  {  options.add(opt);  }	  	non-compiled	[CE]  cannot  find  symbol	44	None	add
183	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));/  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));/  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));/  else  {  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
184	[BUG]  [BUGGY]  ters.add(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ters.add(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	ters.add(arg.substring(0,  1));	  ters.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
185	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
186	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
187	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
188	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
189	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
190	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
191	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
192	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
193	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
194	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
195	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	51	None	replace
196	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(opt.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	51	None	replace
197	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	51	None	replace
198	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    opt.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	119	None	replace
199	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2  +  1));  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2  +  1));	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    opt.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	119	None	replace
200	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  5));  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  5));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  5));  }	  tokens.add(arg.substring(0,    5));    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
201	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]              MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    5));    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
202	[BUG]  [BUGGY]  tokens.add(arg.substring(3));  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(3));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(3));	  tokens.add(arg.substring(1));    	non-compiled	[CE]  'else'  without  'if'	42	None	replace
203	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  reached  end  of  file  while  parsing  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	69	None	replace
204	[BUG]  [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	69	None	replace
205	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
206	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
207	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
208	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
209	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
210	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
211	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	58	4	add
212	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	58	4	add
213	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
214	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
215	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  }	  if(!stopAtNonOption)    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	3	None	replace
216	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1))    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	99	None	replace
217	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(1));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	105	None	replace
218	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ters.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	ters.add(arg.substring(0,  2));  tokens.add(arg.substring(1));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	105	None	replace
219	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	105	None	replace
220	[BUG]  [BUGGY]  Städten.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Städten.add(arg.substring(0,  2));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Städten.add(arg.substring(0,  2));  tokens.add(arg.substring(1));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	105	None	replace
221	[BUG]  [BUGGY]  options.addOption(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  options.addOption(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options.addOption(arg.substring(0,  1));	  options.addOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	83	None	replace
222	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	45	None	replace
223	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  options.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    i));    	non-compiled	[CE]  'else'  without  'if'	125	None	replace
224	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
225	[BUG]  [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  &&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	&&  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
226	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ||  options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(1)))  {  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
227	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    	non-compiled	[CE]  'else'  without  'if'	104	None	replace
228	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    	non-compiled	[CE]  'else'  without  'if'	104	None	replace
229	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(arg.substring(0,  1));	  Option    options    =    options.getOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
230	[BUG]  [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  2)  +  1);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  options  =  options.getOption(arg.substring(0,  2)  +  1);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(arg.substring(0,  2)  +  1);	  Option    options    =    options.getOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
231	[BUG]  [BUGGY]  Options  options  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Options  options  =  options.getOption(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Options  options  =  options.getOption(arg.substring(0,  2));	  Option    options    =    options.getOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	82	None	replace
232	[BUG]  [BUGGY]  parent  ==  null)  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  not  a  statement  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  parent  ==  null)  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	parent  ==  null)  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  if(opt    ==    null)    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  not  a  statement	85	None	replace
233	[BUG]  [BUGGY]  parent  ==  null)  {  tokens.add(arg.substring(0,  2);  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  not  a  statement  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  parent  ==  null)  {  tokens.add(arg.substring(0,  2);  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	parent  ==  null)  {  tokens.add(arg.substring(0,  2);  }  else  {  tokens.add(arg.substring(0,  2));  }	  if(opt    ==    null)    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  not  a  statement	85	None	replace
234	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
235	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
236	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
237	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
238	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
239	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
240	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
241	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
242	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	131	3	add
243	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	131	3	add
244	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(2));	  if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
245	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(1));	  if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    1));    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	114	None	replace
246	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
247	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	16	4	add
248	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	16	4	add
249	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	16	4	add
250	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	16	4	add
251	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	16	4	add
252	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	16	4	add
253	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  1));	  	compilable	  [FE]  MissingArgumentException  	16	4	add
254	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  1));  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  1));	  	compilable	  [FE]  MissingArgumentException  	16	4	add
255	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	16	4	add
256	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	16	4	add
257	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	139	4	add
258	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	139	4	add
259	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	139	4	add
260	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	139	4	add
261	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	139	4	add
262	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	139	4	add
263	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
264	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  ||  options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  ||  options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    ||  options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
265	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	79	4	add
266	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	79	4	add
267	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	79	4	add
268	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	79	4	add
269	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	79	None	add
270	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {	  	non-compiled	[CE]  'else'  without  'if'	79	None	add
271	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(  [CE]  ')'  expected  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(	  	non-compiled	[CE]  ')'  expected	79	None	add
272	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  3));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  3));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  3));  }  else  {  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
273	[BUG]  [BUGGY]  tokens.add(arg.substring(i,  2));  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(i,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(i,  2));	  tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	41	None	replace
274	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(options);	  Option    option    =    options.getOption(i);    	non-compiled	[CE]  'else'  without  'if'	117	None	replace
275	[BUG]  [BUGGY]  Option  option  =  options.getOption(option)+  1;  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(option)+  1;  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(option)+  1;	  Option    option    =    options.getOption(i);    	non-compiled	[CE]  'else'  without  'if'	117	None	replace
276	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
277	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
278	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
279	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
280	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	18	4	add
281	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	18	4	add
282	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
283	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
284	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
285	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
286	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1),  arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(i  +  1),  arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(i  +  1),  arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1),    arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
287	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1),    arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
288	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens  =  new  TokenBuffer(arg.substring(i  +  1),  arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1),    arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
289	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  options.add(opt);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  options.add(opt);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  options.add(opt);  }	          tokens.add(arg);    tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
290	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	71	None	replace
291	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	71	None	replace
292	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	70	4	add
293	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	70	4	add
294	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	70	None	add
295	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg);	  	compilable	  [FE]  IllegalArgumentException  	70	4	add
296	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg);	  	compilable	  [FE]  IllegalArgumentException  	70	4	add
297	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(1,  2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(arg.substring(1,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg.substring(1,  2));	  Option    option    =    options.getOption(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	142	None	replace
298	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt.substring(0,  1));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(opt.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(opt.substring(0,  1));	  Option    option    =    options.getOption(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	142	None	replace
299	[BUG]  [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
300	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
301	[BUG]  [BUGGY]  tors.add(arg.substring(0,  1));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tors.add(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tors.add(arg.substring(0,  1));	  tors.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	29	None	replace
302	[BUG]  [BUGGY]  tors.add(arg.substring(0,  i));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tors.add(arg.substring(0,  i));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tors.add(arg.substring(0,  i));	  tors.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	29	None	replace
303	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  IllegalArgumentException  	52	4	add
304	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(i  +  1));  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  IllegalArgumentException  	52	4	add
305	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));	  	non-compiled	[CE]  'else'  without  'if'	52	None	add
306	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]        IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	52	None	add
307	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	52	4	add
308	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	52	4	add
309	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]            IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	52	None	add
310	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  options.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
311	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  }	  options.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
312	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  options.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
313	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  i  +  1));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	129	None	replace
314	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	129	None	replace
315	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments);  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(arguments);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arguments);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	109	None	replace
316	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	143	4	add
317	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	143	4	add
318	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	143	4	add
319	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	143	4	add
320	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  MissingArgumentException  	143	4	add
321	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  MissingArgumentException  	143	4	add
322	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	143	4	add
323	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	143	4	add
324	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	143	4	add
325	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	143	4	add
326	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
327	[BUG]  [BUGGY]  Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Städten.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	4	None	replace
328	[BUG]  [BUGGY]  options  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  options  =  options.getOption(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options  =  options.getOption(arg.substring(0,  2));	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    Option    options    =    options.getOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	110	None	replace
329	[BUG]  [BUGGY]  Option  opt  =  options.getOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  opt  =  options.getOption(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  opt  =  options.getOption(arg.substring(0,  2));	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	112	None	replace
330	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	144	None	replace
331	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	144	None	replace
332	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
333	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
334	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
335	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    arguments.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	77	None	replace
336	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens  [CE]  not  a  statement  [FE]              MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    arguments.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  not  a  statement	77	None	replace
337	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  }  [CE]  'else'  without  'if'  [FE]                MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    arguments.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	77	None	replace
338	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(i  +  2));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg.substring(i  +  2));	  Option    option    =    options.getOption(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	141	None	replace
339	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(i  +  1),  opt);  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(arg.substring(i  +  1),  opt);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg.substring(i  +  1),  opt);	  Option    option    =    options.getOption(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	141	None	replace
340	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	73	4	add
341	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	73	4	add
342	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	73	4	add
343	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	73	4	add
344	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [CE]  cannot  find  symbol  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    TokenBuffer  tokens  =  new  TokenBuffer(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  cannot  find  symbol	73	None	add
345	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	73	4	add
346	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	73	4	add
347	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	73	4	add
348	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	73	4	add
349	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }	  tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
350	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  else  {  throw  new  MissingArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  else  {  throw  new  MissingArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  }  else  {  throw  new  MissingArgumentException( " ");  }	  tokens.add(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	24	None	replace
351	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    opt.length();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	124	None	replace
352	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens  [CE]  not  a  statement  [FE]            MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    opt.length();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  not  a  statement	124	None	replace
353	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]              MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    opt.length();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  ')'  expected	124	None	replace
354	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	61	None	replace
355	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2,  2));  }	  options.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
356	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(1));  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(1));	  if(options.hasOption(arg))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
357	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2)  +  1);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(arg.substring(0,  2)  +  1);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg.substring(0,  2)  +  1);	  Option    option    =    options.getOption(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	6	None	replace
358	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    ||    options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
359	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
360	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
361	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));	  	non-compiled	[CE]  'else'  without  'if'	101	None	add
362	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	101	4	add
363	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	101	4	add
364	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]        IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	101	None	add
365	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  IllegalArgumentException  	101	4	add
366	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  IllegalArgumentException  	101	4	add
367	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]            IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  Il  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	101	None	add
368	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	20	4	add
369	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	20	4	add
370	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	20	4	add
371	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	20	4	add
372	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	20	4	add
373	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]        MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	20	4	add
374	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	20	4	add
375	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]          MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	20	4	add
376	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	20	4	add
377	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]            MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));/  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	20	4	add
378	[BUG]  [BUGGY]  tors.add(arg.substring(i  +  2));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tors.add(arg.substring(i  +  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tors.add(arg.substring(i  +  2));	  tors.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	28	None	replace
379	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	34	4	add
380	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	34	4	add
381	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	34	4	add
382	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	34	4	add
383	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(  [CE]  ')'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(	  	non-compiled	[CE]  ')'  expected	34	None	add
384	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring  [CE]  ')'  expected  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring	  	non-compiled	[CE]  ')'  expected	34	None	add
385	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	34	4	add
386	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	34	4	add
387	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
388	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	33	None	replace
389	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens  [CE]  not  a  statement  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  not  a  statement	123	None	replace
390	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.  [CE]  <identifier>  expected  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
391	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(  [CE]  illegal  start  of  expression  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
392	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  ters.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
393	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  ters.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
394	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  ters.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  ters.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  ters.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }	  ters.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
395	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ters.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	ters.add(arg.substring(0,  2));  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	113	None	replace
396	[BUG]  [BUGGY]  Städten.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Städten.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Städten.add(arg.substring(0,  2));  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	113	None	replace
397	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	94	4	add
398	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	94	4	add
399	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }  [CE]  ')'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }	  	non-compiled	[CE]  ')'  expected	94	None	add
400	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  [CE]  illegal  start  of  expression  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
401	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	94	4	add
402	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	94	4	add
403	[BUG]  [BUGGY]  Option  options  =  options.getOption(option);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  options  =  options.getOption(option);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(option);	  Option    options    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	106	None	replace
404	[BUG]  [BUGGY]  Options  options  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Options  options  =  options.getOption(opt);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Options  options  =  options.getOption(opt);	  Option    options    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	106	None	replace
405	[BUG]  [BUGGY]  options  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  options  =  options.getOption(opt);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options  =  options.getOption(opt);	  Option    options    =    options.getOption(arg);    	non-compiled	[CE]  'else'  without  'if'	106	None	replace
406	[BUG]  [BUGGY]  Option  arg  =  options.getOption(opt);  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  arg  =  options.getOption(opt);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  arg  =  options.getOption(opt);	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	95	None	replace
407	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	14	4	add
408	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	14	4	add
409	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	14	4	add
410	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	14	4	add
411	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  while(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    ||    options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
412	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    ||    options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
413	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
414	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.substring(0,  2));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(options.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(options.substring(0,  2));	  Option    option    =    options.getOption(i);    	non-compiled	[CE]  'else'  without  'if'	117	None	replace
415	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	46	None	add
416	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  MissingArgumentException  	46	4	add
417	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [FE]  MissingArgumentException  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  MissingArgumentException  	46	4	add
418	[BUG]  [BUGGY]  tokens.add(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(2,  2));	  tokens.add(arg.substring(0,    3));    	non-compiled	[CE]  'else'  without  'if'	25	None	replace
419	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
420	[BUG]  [BUGGY]  Option  options  =  options.getOption(options);  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  options  =  options.getOption(options);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(options);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	107	None	replace
421	[BUG]  [BUGGY]  Option  options  =  options.getOption(arguments);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  options  =  options.getOption(arguments);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(arguments);	  Option    options    =    options.getOption(opt);    	non-compiled	[CE]  'else'  without  'if'	107	None	replace
422	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	12	4	add
423	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	12	4	add
424	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	12	4	add
425	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	12	4	add
426	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg);  if(options.hasOption(opt))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg);  if(options.hasOption(opt))  {	  	non-compiled	[CE]  'else'  without  'if'	70	None	add
427	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	87	4	add
428	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	87	4	add
429	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
430	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
431	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
432	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  ComparisonFailure  	131	3	add
433	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	98	None	replace
434	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
435	[BUG]  [BUGGY]  parent.addValue(arg);  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  parent.addValue(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	parent.addValue(arg);	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	140	None	replace
436	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.getOptionCount();  i++)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.getOptionCount();  i++)  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.getOptionCount();  i++)  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.getOptionCount();    i++)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	92	None	replace
437	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.getOptionCount();  i++)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.getOptionCount();  i++)  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.getOptionCount();  i++)  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.getOptionCount();    i++)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	92	None	replace
438	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
439	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
440	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
441	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
442	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	102	None	replace
443	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  reached  end  of  file  while  parsing  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  reached  end  of  file  while  parsing	102	None	replace
444	[BUG]  [BUGGY]  options.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  options.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options.add(arg.substring(0,  2));  tokens.add(arg.substring(2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(2));    }    	non-compiled	[CE]  'else'  without  'if'	113	None	replace
445	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  tokens.add(arg.substring(2,  2));  }	  options.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
446	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	44	3	add
447	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  ComparisonFailure  	44	3	add
448	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	50	None	add
449	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  MissingArgumentException  	50	4	add
450	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [FE]  MissingArgumentException  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  MissingArgumentException  	50	4	add
451	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	37	None	add
452	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	91	None	replace
453	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	91	None	replace
454	[BUG]  [BUGGY]  if(options.hasOption(options.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(options.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(options.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	91	None	replace
455	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
456	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
457	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
458	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	58	3	add
459	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  [CE]  'else'  without  'if'  [FE]        ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {	  	non-compiled	[CE]  'else'  without  'if'	58	None	add
460	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    opt.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	119	None	replace
461	[BUG]  [BUGGY]  tokens.add(arg.substring(1,  i));  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(1,  i));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(1,  i));	  tokens.add(arg.substring(0,    i));    	non-compiled	[CE]  'else'  without  'if'	125	None	replace
462	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
463	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
464	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  [CE]  'else'  without  'if'  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    opt.length();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	124	None	replace
465	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arguments[i]))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arguments[i]))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(arguments[i]))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	103	None	add
466	[BUG]  [BUGGY]  Option  options  =  options.getOption(options.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  options  =  options.getOption(options.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  options  =  options.getOption(options.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	126	None	replace
467	[BUG]  [BUGGY]  kens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  kens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	kens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    	non-compiled	[CE]  'else'  without  'if'	86	None	replace
468	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	45	None	replace
469	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {	  	non-compiled	[CE]  'else'  without  'if'	101	None	add
470	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	65	4	add
471	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  tokens.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        tokens.add(arg);    tokens.add(arg);	  	compilable	  [FE]  UnrecognizedOptionException  	65	4	add
472	[BUG]  [BUGGY]  Option  option  =  options.hasOption(arg.substring(0,  2));  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.hasOption(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.hasOption(arg.substring(0,  2));	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    Option    option    =    options.hasOption(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	64	None	replace
473	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add( "- ");  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add( "- ");	  tokens.add(opt);    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
474	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add( "n ");  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add( "n ");	  tokens.add(opt);    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
475	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(2));  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg.substring(2));	  Option    option    =    options.getOption(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	142	None	replace
476	[BUG]  [BUGGY]  Option  option  =  options.getOption(arg.substring(2,  2));  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(arg.substring(2,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(arg.substring(2,  2));	  Option    option    =    options.getOption(arg.substring(0,    1));    	non-compiled	[CE]  'else'  without  'if'	142	None	replace
477	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	19	None	replace
478	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	61	None	replace
479	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));	  	compilable	  [FE]  MissingArgumentException  	16	4	add
480	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));	  	compilable	  [FE]  MissingArgumentException  	16	4	add
481	[BUG]  [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	74	None	replace
482	[BUG]  [BUGGY]  Option  option  =  options.hasOption(arg);  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.hasOption(arg);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.hasOption(arg);	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(1));    }    	non-compiled	[CE]  'else'  without  'if'	5	None	replace
483	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	94	4	add
484	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	94	4	add
485	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(  [CE]  ')'  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(	  	non-compiled	[CE]  ')'  expected	94	None	add
486	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	94	4	add
487	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	94	4	add
488	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add  [CE]  ';'  expected  [FE]          UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add	  	non-compiled	[CE]  ';'  expected	94	None	add
489	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	94	4	add
490	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]            UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2))  ||  options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	94	4	add
491	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	73	4	add
492	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	73	4	add
493	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
494	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
495	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	18	4	add
496	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	18	4	add
497	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	118	None	replace
498	[BUG]  [BUGGY]  if(options.hasOption(options.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(options.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(options.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	118	None	replace
499	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	118	None	replace
500	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
501	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    if(options.hasOption(opt))    {    	non-compiled	[CE]  'else'  without  'if'	130	None	replace
502	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  MissingArgumentException( " ");  }	          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	144	None	replace
503	[BUG]  [BUGGY]  if(opt  ==  null)  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(opt  ==  null)  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(opt  ==  null)  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	132	None	replace
504	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  IllegalArgumentException  	52	4	add
505	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  IllegalArgumentException  	52	4	add
506	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  [CE]  'else'  without  'if'  [FE]      IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {	  	non-compiled	[CE]  'else'  without  'if'	52	None	add
507	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  IllegalArgumentException  	52	4	add
508	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(i  +  1));	  	compilable	  [FE]  IllegalArgumentException  	52	4	add
509	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]          IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	52	None	add
510	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	79	None	add
511	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  [CE]  'else'  without  'if'  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {	  	non-compiled	[CE]  'else'  without  'if'	79	None	add
512	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    i++)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	93	None	replace
513	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]              UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    i++)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	93	None	replace
514	[BUG]  [BUGGY]  if(options.hasOption(options.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(options.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(options.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    i++)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	93	None	replace
515	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
516	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
517	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	1	None	replace
518	[BUG]  [BUGGY]  parent  ==  null)  {  tokens.add(arg.substring(0,  2));  [CE]  not  a  statement  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  parent  ==  null)  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	parent  ==  null)  {  tokens.add(arg.substring(0,  2));	  if(opt    ==    null)    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  not  a  statement	85	None	replace
519	[BUG]  [BUGGY]  parent  ==  null)  {  tokens.add(arg.substring(0,  2));  }  [CE]  not  a  statement  [FE]          MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  parent  ==  null)  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	parent  ==  null)  {  tokens.add(arg.substring(0,  2));  }	  if(opt    ==    null)    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  not  a  statement	85	None	replace
520	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
521	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
522	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  ters.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  ters.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  ters.add(arg.substring(0,  2));  tokens.add(arg.substring(2));  }	  ters.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
523	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  ters.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  ters.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  ters.add(arg.substring(0,  2));  }	  ters.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
524	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  ters.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                  ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  ters.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  ters.add(arg.substring(0,  2));  }	  ters.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
525	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  -D  tokens.add(arg.substring(0,  2));  }  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  -D  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  not  a  statement	2	None	replace
526	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  [CE]  'else'  without  'if'  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	123	None	replace
527	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	non-compiled	[CE]  'else'  without  'if'	75	None	add
528	[BUG]  [BUGGY]  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  }  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	}  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
529	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  -D  tokens.add(arg.substring(0,  2));  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  -D  tokens.add(arg.substring(0,  2));	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  not  a  statement	30	None	replace
530	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	34	4	add
531	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	34	4	add
532	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	34	None	add
533	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	34	4	add
534	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	34	4	add
535	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    arguments.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	72	None	replace
536	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  [CE]  'else'  without  'if'  [FE]            MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    arguments.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	77	None	replace
537	[BUG]  [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]              MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	else  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    arguments.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	77	None	replace
538	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	139	4	add
539	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	139	4	add
540	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	139	4	add
541	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	139	4	add
542	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg;  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  ')'  expected  [FE]        UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg;  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg;  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  ')'  expected	139	None	add
543	[BUG]  [BUGGY]  ters.add(arg.substring(0,  2)+  1);  [CE]  'else'  without  'if'  [FE]            ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ters.add(arg.substring(0,  2)+  1);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	ters.add(arg.substring(0,  2)+  1);	  ters.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	43	None	replace
544	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  options.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	10	None	replace
545	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(2));  }	          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	51	None	replace
546	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(arg,  arg.substring(i  +  1),  arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens  =  new  TokenBuffer(arg,  arg.substring(i  +  1),  arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens  =  new  TokenBuffer(arg,  arg.substring(i  +  1),  arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1),    arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
547	[BUG]  [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens  =  new  TokenBuffer(arg.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens  =  new  TokenBuffer(arg.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	129	None	replace
548	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	48	4	add
549	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	48	4	add
550	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {	  	non-compiled	[CE]  'else'  without  'if'	48	None	add
551	[BUG]  [BUGGY]  options.add(opt);  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  options.add(opt);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	options.add(opt);	  options.add(arg);    	non-compiled	[CE]  'else'  without  'if'	134	None	replace
552	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1),  opt.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(i  +  1),  opt.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(i  +  1),  opt.substring(i  +  1));	          tokens.add(arg.substring(i    +    1));    TokenBuffer    tokens    =    new    TokenBuffer(arg.substring(i    +    1),    arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	133	None	replace
553	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	118	None	replace
554	[BUG]  [BUGGY]  tors.add(arg.substring(0,  2)  +  1);  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tors.add(arg.substring(0,  2)  +  1);  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tors.add(arg.substring(0,  2)  +  1);	  tors.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	29	None	replace
555	[BUG]  [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }  [CE]  ')'  expected  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt)||  options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2))    {    tokens.add(arg);    }    	non-compiled	[CE]  ')'  expected	96	None	replace
556	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  ters.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(2));  }	  ters.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  'else'  without  'if'	54	None	replace
557	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    tokens.add(arg.substring(0,  2));  if(options.hasOption(arg.substring(i  +  1)))  {	  	non-compiled	[CE]  'else'  without  'if'	50	None	add
558	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  [CE]  'else'  without  'if'  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(opt.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(opt.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {	  	non-compiled	[CE]  'else'  without  'if'	50	None	add
559	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]        MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  [Delete]  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	[Delete]	  if(opt    ==    null)    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
560	[BUG]  [BUGGY]  if(opt!=  null)  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(opt!=  null)  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(opt!=  null)  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    	non-compiled	[CE]  'else'  without  'if'	132	None	replace
561	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	73	4	add
562	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	73	4	add
563	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.substring(i  +  1));  [CE]  'else'  without  'if'  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  Option  option  =  options.getOption(options.substring(i  +  1));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	Option  option  =  options.getOption(options.substring(i  +  1));	  Option    option    =    options.getOption(i);    	non-compiled	[CE]  'else'  without  'if'	117	None	replace
564	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
565	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(1)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(1)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	120	3	add
566	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length;  ++i)  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length;  ++i)  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length;  ++i)  {  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    opt.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	119	None	replace
567	[BUG]  [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  else  {	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    else    {    	non-compiled	[CE]  'else'  without  'if'	86	None	replace
568	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arguments[i]);    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arguments[i]);  }	  	non-compiled	[CE]  'else'  without  'if'	103	None	add
569	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	126	None	replace
570	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2);  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  ')'  expected	126	None	replace
571	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1);  }  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1);  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  ')'  expected	126	None	replace
572	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
573	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	18	4	add
574	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
575	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
576	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(4)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
577	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(4)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(3)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(4)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  ComparisonFailure  	111	3	add
578	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  1)))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    1)))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	37	None	add
579	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	58	None	add
580	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  5));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]            MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  5));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  5));  }  else  {  tokens.add(arg.substring(0,  2));  }	  tokens.add(arg.substring(0,    5));    	non-compiled	[CE]  'else'  without  'if'	26	None	replace
581	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	139	None	add
582	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	16	4	add
583	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  1));  //  -D  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	16	4	add
584	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	30	None	replace
585	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  1));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  1));  }	          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,    1));    //    -D    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	17	None	replace
586	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	131	3	add
587	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	131	3	add
588	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	131	3	add
589	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  }  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        tokens.add(arg.substring(i    +    1));    //    -D    tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg.substring(i  +  1));  tokens.add(arg.substring(i  +  1));  //  -D  tokens.add(arg.substring(i  +  1));  }	  	compilable	  [FE]  ComparisonFailure  	131	3	add
590	[BUG]  [BUGGY]  tokens.add(arg.substring(i  +  1,  2  +  1));  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(arg.substring(i  +  1,  2  +  1));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(arg.substring(i  +  1,  2  +  1));	  tokens.add(arg.substring(i    +    1,    2));    	non-compiled	[CE]  'else'  without  'if'	122	None	replace
591	[BUG]  [BUGGY]  ||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(0,  2));  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	||  options.hasOption(arg.substring(1,  2)))  {  tokens.add(arg.substring(0,  2));	  ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
592	[BUG]  [BUGGY]  parent  ==  null  &&  parent  ==  null;  [CE]  not  a  statement  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  parent  ==  null  &&  parent  ==  null;  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	parent  ==  null  &&  parent  ==  null;	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  not  a  statement	140	None	replace
593	[BUG]  [BUGGY]  parent  ==  null  &&  parent!=  null;  [CE]  not  a  statement  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  parent  ==  null  &&  parent!=  null;  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	parent  ==  null  &&  parent!=  null;	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else    if(options.hasOption(opt))    {    tokens.add(arg);    }    	non-compiled	[CE]  not  a  statement	140	None	replace
594	[BUG]  [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  else  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	else  if(options.hasOption(opt))  {  tokens.add(arg);  }	          tokens.add(arg);    tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
595	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg);  }	          tokens.add(arg);    tokens.add(arg);    	non-compiled	[CE]  'else'  without  'if'	66	None	replace
596	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]            MissingArgumentException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring	          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    arguments.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  ')'  expected	77	None	replace
597	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
598	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  else  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	60	4	add
599	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(options.hasOption(arg.substring(2)))  {  tokens.add(arg);  }  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	60	None	add
600	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]            UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  options.size();  i++)  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.size();    i++)    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	93	None	replace
601	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	65	4	add
602	[BUG]  [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    tokens.add(arg);  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        tokens.add(arg);    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	65	4	add
603	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  i++)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    arguments.length;    i++)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	67	None	replace
604	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  tokens.add(arg);  if(options.hasOption(opt))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	68	None	add
605	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	68	4	add
606	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    if(options.hasOption(opt))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	68	4	add
607	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	12	4	add
608	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));	  	compilable	  [FE]  MissingArgumentException  	12	4	add
609	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	12	4	add
610	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]      MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	12	4	add
611	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
612	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	32	4	add
613	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]      UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    tokens.add(arg);  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        tokens.add(arg);    if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	32	None	add
614	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	14	4	add
615	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [FE]  MissingArgumentException  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        //        -D        tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }	  	compilable	  [FE]  MissingArgumentException  	14	4	add
616	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1))  {  tokens.add(arg.substring(i  +  1));  }	  	non-compiled	[CE]  ')'  expected	48	None	add
617	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]                UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  {  for(int  i  =  0;  i  <  arguments.length;  ++i)  {  tokens.add(arg.substring(i  +  1));  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    arguments.length;    ++i)    {    tokens.add(arg.substring(i    +    1));    }    	non-compiled	[CE]  'else'  without  'if'	72	None	replace
618	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring  [CE]  ')'  expected  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    tokens.add(arg.substring(0,    2));    }    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring	  	non-compiled	[CE]  ')'  expected	79	None	add
619	[BUG]  [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  [CE]  reached  end  of  file  while  parsing  [FE]    ComparisonFailure    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(i    +    1));    if(options.hasOption(arg.substring(i  +  1)))  {  tokens.add(arg.substring(i  +  1));  }  else  {  tokens.add(arg.substring(i  +  1));  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(i        +        1));        if(options.hasOption(arg.substring(i    +    1)))    {    tokens.add(arg.substring(i    +    1));    }    else    {    tokens.add(arg.substring(i    +    1));    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg.substring(i  +  1));  if(options.hasOption(arg.substring(i  +  1)))  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	46	None	add
620	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [CE]  'else'  without  'if'  [FE]        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  options.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(1,  2));  }	  options.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(2,    2));    	non-compiled	[CE]  'else'  without  'if'	27	None	replace
621	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
622	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    else  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        else    if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  else  if(options.hasOption(arg.substring(3)))  {  tokens.add(arg);  }	  	compilable	  [FE]  UnrecognizedOptionException  	137	4	add
623	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	add	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	70	4	add
624	[BUG]  [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg);    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg);        if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(options.hasOption(opt))  {  tokens.add(arg);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	70	4	add
625	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1,  1));  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1,  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1,  1));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1,    1));    }    	non-compiled	[CE]  'else'  without  'if'	127	None	replace
626	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  1));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1,  1));  }  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  1));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1,  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  1));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(i  +  1,  1));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1,    1));    }    	non-compiled	[CE]  'else'  without  'if'	127	None	replace
627	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  for(int  i  =  0;  i  <  options.size();  ++i)  {  tokens.add(arg.substring(	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    for(int    i    =    0;    i    <    options.size();    ++i)    {    tokens.add(arg.substring(i    +    1,    1));    }    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
628	[BUG]  [BUGGY]  tokens.add(i);  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  tokens.add(i);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	tokens.add(i);	  tokens.add(opt);    	non-compiled	[CE]  'else'  without  'if'	40	None	replace
629	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]    MissingArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  //  -D  tokens.add(arg.substring(0,  2));  }	          tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    //    -D    tokens.add(arg.substring(0,    2));    }    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
630	[BUG]  [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }  [CE]  ')'  expected  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg.substring(0,  2))  {  tokens.add(arg);  }	          tokens.add(arg);    if(options.hasOption(opt))    {    tokens.add(arg);    }    else    {    for(int    i    =    0;    i    <    options.getOptionCount();    i++)    {    tokens.add(arg);    }    	non-compiled	[CE]  ')'  expected	92	None	replace
631	[BUG]  [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  'else'  without  'if'  [FE]    IllegalArgumentException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          tokens.add(arg.substring(0,    2));    if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                tokens.add(arg.substring(0,        2));        if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!stopAtNonOption)  {  tokens.add(arg.substring(0,  2));  if(options.hasOption(opt))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  'else'  without  'if'	101	None	add
632	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  options.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]        UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  options.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  options.add(arg);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  options.add(arg);    	non-compiled	[CE]  'else'  without  'if'	134	None	replace
633	[BUG]  [BUGGY]  if(options.hasOption(opt))  {  options.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [CE]  'else'  without  'if'  [FE]          UnrecognizedOptionException      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(opt))  {  options.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring(i  +  1));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(opt))  {  options.add(arg);  }  else  {  for(int  i  =  0;  i  <  opt.length();  ++i)  {  tokens.add(arg.substring(i  +  1));  }	  options.add(arg);    	non-compiled	[CE]  'else'  without  'if'	134	None	replace
634	[BUG]  [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	                if(options.hasOption(arg.substring(0,        2)))        {        tokens.add(arg);        }        if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(!stopAtNonOption)  {  if(options.hasOption(arg.substring(0,  2)))  {  tokens.add(arg);  }	  	non-compiled	[CE]  'else'  without  'if'	34	None	add
635	[BUG]  [BUGGY]  /  2.0  tokens.add(arg.substring(2));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  /  2.0  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	/  2.0  tokens.add(arg.substring(2));	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
636	[BUG]  [BUGGY]  /*  -D  tokens.add(arg.substring(2));  [CE]  unclosed  comment  [FE]                ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  /*  -D  tokens.add(arg.substring(2));  [BUGGY]      tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	/*  -D  tokens.add(arg.substring(2));	  tokens.add(arg.substring(0,    2));/    -D    tokens.add(arg.substring(2));    	non-compiled	[CE]  unclosed  comment	108	None	replace
637	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [CE]  'else'  without  'if'  [FE]                      ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  tokens.add(arg.substring(0,  2));  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
638	[BUG]  [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]                        ComparisonFailure      [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	if(options.hasOption(arg))  {  tokens.add(arg.substring(0,  2));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(options.hasOption(opt))    {    tokens.add(arg.substring(0,    2));    	non-compiled	[CE]  'else'  without  'if'	23	None	replace
639	[BUG]  [BUGGY]  ters.add(arg);  [CE]  'else'  without  'if'  [FE]    UnrecognizedOptionException    [CONTEXT]      if  (options.hasOption(opt))  {  tokens.add(arg);  }  else  {  if  (options.hasOption(arg.substring(0,  2)))  {        [BUGGY]  ters.add(arg);  [BUGGY]      tokens.add(arg.substring(0,  2));  //  -D      tokens.add(arg.substring(2));  //  property=value          }  tokens.add(arg.substring(2));  //  property=value  }  else  {  eatTheRest  =  stopAtNonOption;  tokens.add(arg);  }  }  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.6666666666666666	85	87	3	replace	ters.add(arg);	          if(options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    if(options.hasOption(arg.substring(0,    2))    ||    options.hasOption(arg.substring(0,    2)))    {    tokens.add(arg);    }    	non-compiled	[CE]  'else'  without  'if'	95	None	replace
