bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  arguments.length;  i++)  {  [CE]  '.class'  expected  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  For(int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	For(int  i  =  0;  i  <  arguments.length;  i++)  {	  for(int    i    =    0;    i    <    argument.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	20	None	replace
2	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	14	replace
3	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	14	replace
4	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	14	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	12	14	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  argument.length  -  2;  i++)  {  [CE]  cannot  find  symbol  argument  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  argument.length  -  2;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  argument.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  argument	10	None	replace
7	[BUG]  [BUGGY]  tokens.add( "- ".equals(opt));  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  tokens.add( "- ".equals(opt));  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- ".equals(opt));	      tokens.add(   "-   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  tokens.add( "- ".equals(arg));  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  tokens.add( "- ".equals(arg));  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- ".equals(arg));	      tokens.add(   "-   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  tokens.add( "- "  +  eatTheRest);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  tokens.add( "- "  +  eatTheRest);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- "  +  eatTheRest);	      tokens.add(   "-   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList();  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	ArrayList  <  String>  tokens  =  new  ArrayList();	      List    <    String>    tokens    =    new    ArrayList();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  1);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length  +  1);	      List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length);	      List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  2);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  2);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length  +  2);	      List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  [FE]  MissingArgumentException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    	compilable	  [FE]  MissingArgumentException  	8	13	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  [FE]  MissingArgumentException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    	compilable	  [FE]  MissingArgumentException  	8	13	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  argument.length  -  1;  i++)  {  [CE]  cannot  find  symbol  argument  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  argument.length  -  1;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  argument.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    	non-compiled	[CE]  cannot  find  symbol  argument	8	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    int  i  =  0;  i  <  arguments.length  -  1;  i++)  {	  	non-compiled	[CE]  >  expected	7	None	add
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List  <  String>  tokens  =  new  ArrayList(arguments.length);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
22	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  1);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  1);	      List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
23	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length);	      List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  2);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  2);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  2);	      List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
25	[BUG]  [BUGGY]  String[]  arguments  =  options.getValues();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  String[]  arguments  =  options.getValues();  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getValues();	      String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
26	[BUG]  [BUGGY]  String[]  arguments  =  options.getArguments();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  String[]  arguments  =  options.getArguments();  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getArguments();	      String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
27	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptions(opt);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  String[]  arguments  =  options.getOptions(opt);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getOptions(opt);	      String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
28	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
29	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.values());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.values());  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.values());	      TokenBuffer    tokens    =    new    TokenBuffer(tokens);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
30	[BUG]  [BUGGY]  tokens.add( "-- ".equals(opt));  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- ".equals(opt));  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- ".equals(opt));	      tokens.add(   "--   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
31	[BUG]  [BUGGY]  tokens.add( "-- "  +  opt);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- "  +  opt);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- "  +  opt);	      tokens.add(   "--   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
32	[BUG]  [BUGGY]  tokens.add( "-- ".equals(arg));  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- ".equals(arg));  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- ".equals(arg));	      tokens.add(   "--   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
33	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  1);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
34	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size());  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size());  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size());	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
35	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  +  1);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size()  -  2);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.size());    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "--   ");  tokens.add( "--   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	        tokens.add(   "--   ");    tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	13	13	add
38	[BUG]  [BUGGY]      tokens.add(   "--   ");  tokens.add( "--   ");  [FE]  UnrecognizedOptionException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "--   ");  tokens.add( "--   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	        tokens.add(   "--   ");    tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	13	13	add
39	[BUG]  [BUGGY]      tokens.add(   "--   ");  tokens.add( "-- ".);  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "--   ");  tokens.add( "-- ".);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	        tokens.add(   "--   ");    tokens.add( "-- ".);	  	non-compiled	[CE]  <identifier>  expected	13	None	add
40	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "--   ");  tokens.add( ",--   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	        tokens.add(   "--   ");    tokens.add( ",--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	13	13	add
41	[BUG]  [BUGGY]      tokens.add(   "--   ");  tokens.add( ",--   ");  [FE]  UnrecognizedOptionException  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "--   ");  tokens.add( ",--   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	        tokens.add(   "--   ");    tokens.add( ",--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	13	13	add
42	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]          AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "--   ");  tokens.add( ".--   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	        tokens.add(   "--   ");    tokens.add( ".--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	13	13	add
43	[BUG]  [BUGGY]      tokens.add(   "--   ");  tokens.add( ".--   ");  [FE]  UnrecognizedOptionException  [FE]          AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "--   ");  tokens.add( ".--   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	        tokens.add(   "--   ");    tokens.add( ".--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	13	13	add
44	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
45	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    int  i  =  0;  i  <  arguments.length  +  1;  i++)  {	  	non-compiled	[CE]  >  expected	11	None	add
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  for(int  i  =  0;  i  <  argument.length  +  1;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  for(int  i  =  0;  i  <  argument.length  +  1;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    for(int  i  =  0;  i  <  argument.length  +  1;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  reached  end  of  file  while  parsing  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [CE]  reached  end  of  file  while  parsing  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    int  i  =  0;  i  <  arguments.length  -  2;  i++)  {	  	non-compiled	[CE]  >  expected	9	None	add
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]          AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]            AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
54	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	ArrayList  <  String>  tokens  =  new  ArrayList  <  String>();	      List    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments);	      List    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  arguments);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  arguments);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt.nextToken(),  arguments);	      Tokens    tokens    =    new    Tokens(opt.nextToken());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  stopAtNonOption);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt.nextToken(),  stopAtNonOption);	      Tokens    tokens    =    new    Tokens(opt.nextToken());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  options);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  options);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt.nextToken(),  options);	      Tokens    tokens    =    new    Tokens(opt.nextToken());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
59	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
60	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  +  1);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  +  1);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
61	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1);	      TokenBuffer    tokens    =    new    TokenBuffer(tokens.length);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
62	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "-   ");  tokens.add( "-   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	        tokens.add(   "-   ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
63	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "-   ");  tokens.add( "-   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	        tokens.add(   "-   ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
64	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "-   ");  tokens.add( ".-   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	        tokens.add(   "-   ");    tokens.add( ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
65	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add( ".-   ");  [FE]  UnrecognizedOptionException  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "-   ");  tokens.add( ".-   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	        tokens.add(   "-   ");    tokens.add( ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
66	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "-   ");  tokens.add( ",-   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	        tokens.add(   "-   ");    tokens.add( ",-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
67	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add( ",-   ");  [FE]  UnrecognizedOptionException  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "-   ");  tokens.add( ",-   ");  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	        tokens.add(   "-   ");    tokens.add( ",-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	1	13	add
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  String[]  arguments  =  options.get(i);  [CE]  reached  end  of  file  while  parsing  [FE]        AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  String[]  arguments  =  options.get(i);  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    String[]  arguments  =  options.get(i);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
71	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  stopAtNonOption);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length,  stopAtNonOption);	      List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
72	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[options.size()  ]);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  String[]  arguments  =  options.toArray(new  String[options.size()  ]);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.toArray(new  String[options.size()  ]);	      String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
73	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ]);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  ]);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  ]);	      String[]    arguments    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
74	[BUG]  [BUGGY]      tokens.add(   "--   ");  tokens.add( "--   "));  [CE]  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "--   ");  tokens.add( "--   "));  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	        tokens.add(   "--   ");    tokens.add( "--   "));	  	non-compiled	[CE]  	13	None	add
75	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  stopAtNonOption);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  stopAtNonOption);	      List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  String[]  arguments  =  options.get(i);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  String[]  arguments  =  options.get(i);  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    String[]  arguments  =  options.get(i);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
78	[BUG]  [BUGGY]      tokens.add(   "-   ");  tokens.add( "- ".);  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]      tokens.add(   "-   ");  tokens.add( "- ".);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	        tokens.add(   "-   ");    tokens.add( "- ".);	  	non-compiled	[CE]  <identifier>  expected	1	None	add
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  String[]  arguments  =  options.get(i);  [CE]  reached  end  of  file  while  parsing  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  String[]  arguments  =  options.get(i);  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    String[]  arguments  =  options.get(i);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
81	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  LinkedList  <  String>();  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  List  <  String>  tokens  =  new  LinkedList  <  String>();  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  LinkedList  <  String>();	      List    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	11	None	add
83	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt,  options.nextToken());  [CE]  illegal  start  of  type  [FE]                ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  Tokens  tokens  =  new  Tokens(opt,  options.nextToken());  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt,  options.nextToken());	      Tokens    tokens    =    new    Tokens(opt.nextToken());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
84	[BUG]  [BUGGY]  tokens.add( "-- ".equals(option));  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  tokens.add( "-- ".equals(option));  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- ".equals(option));	      tokens.add(   "--   ");    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
85	[BUG]  [BUGGY]  tokens.add( "- ".equals(option));  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  tokens.add( "- ".equals(option));  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- ".equals(option));	      tokens.add(   "-   ");    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
86	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [BUGGY]    for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);	      List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  for(int  i  =  0;  i  <  argument.length  -  2;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  for(int  i  =  0;  i  <  argument.length  -  2;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    for(int  i  =  0;  i  <  argument.length  -  2;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [CE]  reached  end  of  file  while  parsing  [FE]      AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	9	None	add
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  for(int  i  =  0;  i  <  argument.length  -  1;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    AssertionFailedError    [CONTEXT]    {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;    [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  for(int  i  =  0;  i  <  argument.length  -  1;  i++)  {  [BUGGY]    {  String  arg  =  arguments[i];  if  (   "--   ".equals(arg))  {  eatTheRest  =  true;  tokens.add(   "--   ");  }  else  if  (   "-   ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    for(int  i  =  0;  i  <  argument.length  -  1;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	7	None	add
