bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add( "- "  +  opt);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "- "  +  opt);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- "  +  opt);	  tokens.add(   "-   "    +    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  tokens.add( "- "  +  option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "- "  +  option);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- "  +  option);	  tokens.add(   "-   "    +    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  tokens.add( "- "  +  arg);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "- "  +  arg);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- "  +  arg);	  tokens.add(   "-   "    +    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	48	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  }  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  }	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	48	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  1);  }  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  1);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  1);  }	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
8	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  -  1);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.size());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
9	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  +  1);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.size());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
10	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  -  2);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size()  -  2);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.size());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
11	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   ",--     ");  tokens.add( "--   ");  tokens.add( ",--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "--       ");        tokens.add(   ",--       ");    tokens.add( "--   ");  tokens.add( ",--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	40	13	add
12	[BUG]  [BUGGY]          tokens.add(     "--     ");    tokens.add(   ",--     ");  tokens.add( "--   ");  tokens.add( ",--   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   ",--     ");  tokens.add( "--   ");  tokens.add( ",--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "--       ");        tokens.add(   ",--       ");    tokens.add( "--   ");  tokens.add( ",--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	40	13	add
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	70	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);  }	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  String[]  arguments  =  options.get(i);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  String[]  arguments  =  options.get(i);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  String[]  arguments  =  options.get(i);  }	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  }	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i]);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  }	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i]);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
18	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i].size());    for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	53	None	replace
19	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i].size());    for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	68	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  }	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  }	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
23	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  3);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length  +  3);	  List    <    String>    tokens    =    new    ArrayList(arguments.length    +    2);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  }	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
25	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  options.length);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  options.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  options.length);	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
26	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length);	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
27	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  opt);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  opt);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  opt);	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
28	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length;  i++)  {  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	51	None	replace
29	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	51	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  }	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    3;    i++)    {    for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  [CE]  >  expected  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    3;    i++)    {    int  i  =  0;  i  <  arguments.length  -  3;  i++)  {	  	non-compiled	[CE]  >  expected	14	None	add
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  for(int  i  =  0;  i  <  arguments.length  -  4;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]        MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  for(int  i  =  0;  i  <  arguments.length  -  4;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    3;    i++)    {    for(int  i  =  0;  i  <  arguments.length  -  4;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  reached  end  of  file  while  parsing  [FE]          MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    3;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [CE]  reached  end  of  file  while  parsing  [FE]            MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    3;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
36	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  For(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	For(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    for(int    i    =    0;    i    <    argument.length    -    1;    i++)    {    	non-compiled	[CE]  '.class'  expected	89	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  String[]  arguments  =  options.get(i);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  String[]  arguments  =  options.get(i);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  String[]  arguments  =  options.get(i);	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	80	None	replace
38	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptions(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.getOptions(opt,  stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getOptions(opt,  stopAtNonOption);	  String[]    arguments    =    options.getOptions(opt);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
39	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptions(stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.getOptions(stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getOptions(stopAtNonOption);	  String[]    arguments    =    options.getOptions(opt);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
40	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptions(options);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.getOptions(options);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getOptions(options);	  String[]    arguments    =    options.getOptions(opt);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
41	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptions(opt,  tokens);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.getOptions(opt,  tokens);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getOptions(opt,  tokens);	  String[]    arguments    =    options.getOptions(opt);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
42	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length  +  1);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    arguments.length);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
43	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length  -  1);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    arguments.length);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
44	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments.length);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments.length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    arguments.length);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
45	[BUG]  [BUGGY]  String[]  arguments  =  options.getAllArguments();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.getAllArguments();  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getAllArguments();	  String[]    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    2;    i++)    {    for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    2;    i++)    {    int  i  =  0;  i  <  arguments.length  +  2;  i++)  {	  	non-compiled	[CE]  >  expected	2	None	add
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  reached  end  of  file  while  parsing  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    2;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  reached  end  of  file  while  parsing  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    2;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  2);  [CE]  reached  end  of  file  while  parsing  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  2);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    2;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  2);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  int  i  =  0;  i  <  arguments.length;  i++)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  int  i  =  0;  i  <  arguments.length;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  >  expected	50	None	replace
52	[BUG]  [BUGGY]  int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	int  i  =  0;  i  <  arguments.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  >  expected	50	None	replace
53	[BUG]  [BUGGY]  tokens.add( "-- ",  eatTheRest);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ",  eatTheRest);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- ",  eatTheRest);	          tokens.add(       "--       ");    tokens.add(   "--   ".);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
54	[BUG]  [BUGGY]  tokens.add( "-- ".);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ".);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- ".);	          tokens.add(       "--       ");    tokens.add(   "--   ".);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
55	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(options,  opt.nextToken());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(options,  opt.nextToken());  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(options,  opt.nextToken());	  Tokens    tokens    =    new    Tokens(opt,    options.nextToken());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
56	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt,  options.nextToken(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(opt,  options.nextToken(),  stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt,  options.nextToken(),  stopAtNonOption);	  Tokens    tokens    =    new    Tokens(opt,    options.nextToken());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
57	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(options.nextToken());  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(options.nextToken());  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(options.nextToken());	  Tokens    tokens    =    new    Tokens(opt,    options.nextToken());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
58	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt,  options.nextToken()  +  1);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(opt,  options.nextToken()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt,  options.nextToken()  +  1);	  Tokens    tokens    =    new    Tokens(opt,    options.nextToken());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
59	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments,  stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments,  stopAtNonOption);	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
60	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  illegal  start  of  type  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "n ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "n ");	          tokens.add(       "--       ");    tokens.add(   ".--       ");    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
61	[BUG]  [BUGGY]  tokens.add( ";-- ");  [CE]  illegal  start  of  type  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( ";-- ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( ";-- ");	          tokens.add(       "--       ");    tokens.add(   ".--       ");    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
62	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   "--     ");  tokens.add( "--   ");  tokens.add( "--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "--       ");        tokens.add(   "--       ");    tokens.add( "--   ");  tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	37	13	add
63	[BUG]  [BUGGY]          tokens.add(     "--     ");    tokens.add(   "--     ");  tokens.add( "--   ");  tokens.add( "--   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   "--     ");  tokens.add( "--   ");  tokens.add( "--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "--       ");        tokens.add(   "--       ");    tokens.add( "--   ");  tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	37	13	add
64	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   "--     ");  tokens.add( "--. ");  tokens.add( "--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "--       ");        tokens.add(   "--       ");    tokens.add( "--. ");  tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	37	13	add
65	[BUG]  [BUGGY]          tokens.add(     "--     ");    tokens.add(   "--     ");  tokens.add( "--. ");  tokens.add( "--   ");  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   "--     ");  tokens.add( "--. ");  tokens.add( "--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "--       ");        tokens.add(   "--       ");    tokens.add( "--. ");  tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	37	13	add
66	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   "--     ");  tokens.add( "--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "--       ");        tokens.add(   "--       ");    tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	37	13	add
67	[BUG]  [BUGGY]          tokens.add(     "--     ");    tokens.add(   "--     ");  tokens.add( "--   ");  [FE]  UnrecognizedOptionException  [FE]        UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   "--     ");  tokens.add( "--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "--       ");        tokens.add(   "--       ");    tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	37	13	add
68	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  +  2);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  +  2);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
69	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  /  1);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  /  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  /  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
70	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  *  1);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  *  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
71	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  3);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  3);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  3);	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length    +    2);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
72	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  stopAtNonOption,  arguments);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt.nextToken(),  stopAtNonOption,  arguments);	  Tokens    tokens    =    new    Tokens(opt.nextToken(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
73	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  arguments,  stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt.nextToken(),  arguments,  stopAtNonOption);	  Tokens    tokens    =    new    Tokens(opt.nextToken(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
74	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  stopAtNonOption,  options);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt.nextToken(),  stopAtNonOption,  options);	  Tokens    tokens    =    new    Tokens(opt.nextToken(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
75	[BUG]  [BUGGY]  tokens.add( ",- ");  [CE]  illegal  start  of  type  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( ",- ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( ",- ");	          tokens.add(       "-       ");    tokens.add(   ",-       ");    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
76	[BUG]  [BUGGY]  tokens.add( "- ");  tokens.add( ";- ");  [CE]  illegal  start  of  type  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "- ");  tokens.add( ";- ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- ");  tokens.add( ";- ");	          tokens.add(       "-       ");    tokens.add(   ",-       ");    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
77	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  1);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  1);	  ArrayList    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
78	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  *  1);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  *  1);	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
79	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  2);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  2);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
80	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1,  arguments.length  -  1);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1,  arguments.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1,  arguments.length  -  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
81	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1  +  1);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
82	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  -  1]);	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
83	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.toArray(new  String[arguments.size()  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.toArray(new  String[arguments.size()  +  1]);	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
84	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[tokens.size()  ]);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.toArray(new  String[tokens.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.toArray(new  String[tokens.size()  ]);	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
85	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   ".--     ");  tokens.add( "--   ");  tokens.add( ".--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "--       ");        tokens.add(   ".--       ");    tokens.add( "--   ");  tokens.add( ".--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
86	[BUG]  [BUGGY]          tokens.add(     "--     ");    tokens.add(   ".--     ");  tokens.add( "--   ");  tokens.add( ".--   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   ".--     ");  tokens.add( "--   ");  tokens.add( ".--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "--       ");        tokens.add(   ".--       ");    tokens.add( "--   ");  tokens.add( ".--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
87	[BUG]  [BUGGY]          tokens.add(     "--     ");    tokens.add(   ".--     ");  tokens.add( "--   ");  tokens.add( ".-- ".);  [CE]  <identifier>  expected  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   ".--     ");  tokens.add( "--   ");  tokens.add( ".-- ".);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "--       ");        tokens.add(   ".--       ");    tokens.add( "--   ");  tokens.add( ".-- ".);	  	non-compiled	[CE]  <identifier>  expected	42	None	add
88	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.size());  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.size());  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(TokenBuffer.size());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
89	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [CE]  '.class'  expected  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  For(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	For(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {	  For(int    i    =    0;    i    <    arguments.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	1	None	replace
90	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  arguments[i].length;  i++)  {  [CE]  '.class'  expected  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  For(int  i  =  0;  i  <  arguments[i].length;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	For(int  i  =  0;  i  <  arguments[i].length;  i++)  {	  For(int    i    =    0;    i    <    arguments.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	1	None	replace
91	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add( ".-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");  tokens.add( ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	64	13	add
92	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add( ".-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add( ".-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");  tokens.add( ".-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	64	13	add
93	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add(. ".-   ");  [CE]  illegal  start  of  expression  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  tokens.add(. ".-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");  tokens.add(. ".-   ");	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
94	[BUG]  [BUGGY]  tokens.add( "- ".);  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "- ".);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- ".);	          tokens.add(       "-       ");    tokens.add(   "-   ".);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
95	[BUG]  [BUGGY]  String[]  arguments  =  opt.getValues();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  opt.getValues();  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  opt.getValues();	  String[]    arguments    =    options.getValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
96	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt,  stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
97	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  options);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  options);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  options);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
98	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  arguments);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
99	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt,  eatTheRest);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  opt,  eatTheRest);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
100	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i]);    for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	52	None	replace
101	[BUG]  [BUGGY]  tokens.add( "-1 ");  [CE]  illegal  start  of  type  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-1 ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-1 ");	          tokens.add(       "-       ");    tokens.add(   "-       ");    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
102	[BUG]  [BUGGY]  tokens.add( "0 ");  [CE]  illegal  start  of  type  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "0 ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "0 ");	          tokens.add(       "-       ");    tokens.add(   "-       ");    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
103	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  options.length);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  options.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length,  options.length);	  List    <    String>    tokens    =    new    ArrayList(arguments.length,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
104	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	ArrayList  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length);	  List    <    String>    tokens    =    new    ArrayList(arguments.length,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
105	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  opt);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  opt);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length,  opt);	  List    <    String>    tokens    =    new    ArrayList(arguments.length,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
106	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  tokens.add( "-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	62	13	add
107	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  tokens.add( "-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	62	13	add
108	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-. ");  tokens.add( "-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-. ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	62	13	add
109	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-. ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-. ");  tokens.add( "-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-. ");  tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	62	13	add
110	[BUG]  [BUGGY]  int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	int  i  =  0;  i  <  arguments.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    	non-compiled	[CE]  >  expected	18	None	replace
111	[BUG]  [BUGGY]  tokens.add( "-- "  +  arg);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  arg);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- "  +  arg);	  tokens.add(   "--   "    +    opt);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
112	[BUG]  [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  eatTheRest);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- "  +  eatTheRest);	  tokens.add(   "--   "    +    opt);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
113	[BUG]  [BUGGY]  tokens.add( "-- "  +  option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  option);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- "  +  option);	  tokens.add(   "--   "    +    opt);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
114	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  options,  stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt.nextToken(),  options,  stopAtNonOption);	  Tokens    tokens    =    new    Tokens(opt.nextToken(),    options);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
115	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(options.nextToken(),  opt);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(options.nextToken(),  opt);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(options.nextToken(),  opt);	  Tokens    tokens    =    new    Tokens(opt.nextToken(),    options);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
116	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt.getToken(),  options);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(opt.getToken(),  options);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt.getToken(),  options);	  Tokens    tokens    =    new    Tokens(opt.nextToken(),    options);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
117	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.keySet());  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.keySet());  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.keySet());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.values());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
118	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.values(),  tokens.length);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.values(),  tokens.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.values(),  tokens.length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.values());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
119	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.values(),  arguments.length);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.values(),  arguments.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.values(),  arguments.length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.values());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
120	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.values()  +  1);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.values()  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.values()  +  1);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.values());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    3;    i++)    {    for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    3;    i++)    {    int  i  =  0;  i  <  arguments.length  +  3;  i++)  {	  	non-compiled	[CE]  >  expected	4	None	add
123	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  for(int  i  =  0;  i  <  argument.length  +  3;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  for(int  i  =  0;  i  <  argument.length  +  3;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    3;    i++)    {    for(int  i  =  0;  i  <  argument.length  +  3;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
124	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  for(int  i  =  0;  i  <  arguments.length  +  4;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  for(int  i  =  0;  i  <  arguments.length  +  4;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    3;    i++)    {    for(int  i  =  0;  i  <  arguments.length  +  4;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  reached  end  of  file  while  parsing  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    3;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
126	[BUG]  [BUGGY]  tokens.add( ",-- ");  [CE]  illegal  start  of  type  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( ",-- ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( ",-- ");	          tokens.add(       "--       ");    tokens.add(   ",--       ");    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i]);    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	47	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  }  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  }	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i]);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
129	[BUG]  [BUGGY]  int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	int  i  =  0;  i  <  arguments.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    	non-compiled	[CE]  >  expected	45	None	replace
130	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length  *  1);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length  *  1);	  List    <    String>    tokens    =    new    ArrayList(arguments.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
131	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  tokens.add( ",- ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "-       ");        tokens.add(   ",-       ");    tokens.add( "-   ");  tokens.add( ",- ");	  	compilable	  [FE]  UnrecognizedOptionException  	66	13	add
132	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  tokens.add( ",- ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  tokens.add( ",- ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "-       ");        tokens.add(   ",-       ");    tokens.add( "-   ");  tokens.add( ",- ");	  	compilable	  [FE]  UnrecognizedOptionException  	66	13	add
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  String[]  arguments  =  options.get(i);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  String[]  arguments  =  options.get(i);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  String[]  arguments  =  options.get(i);  }	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
134	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  }	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                  AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	21	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  1);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  1);  }	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
137	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.size();	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    -    2);    	non-compiled	[CE]  ')'  expected	36	None	replace
138	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length());  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length());  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.size()    -    2);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
139	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length  +  1);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length  +  1);	  List    <    String>    tokens    =    new    ArrayList(arguments.length,    arguments.length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
140	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length  +  2);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length  +  2);	  List    <    String>    tokens    =    new    ArrayList(arguments.length,    arguments.length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
141	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length  *  2);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length  *  2);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length,  arguments.length  *  2);	  List    <    String>    tokens    =    new    ArrayList(arguments.length,    arguments.length);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
142	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length  +  1);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length  +  1);	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length,    arguments.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
143	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length  +  2);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  arguments.length  +  2);	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length,    arguments.length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
144	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  arguments,  null);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(opt.nextToken(),  arguments,  null);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt.nextToken(),  arguments,  null);	  Tokens    tokens    =    new    Tokens(opt.nextToken(),    arguments);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
145	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt.getToken(),  arguments);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(opt.getToken(),  arguments);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt.getToken(),  arguments);	  Tokens    tokens    =    new    Tokens(opt.nextToken(),    arguments);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
146	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[options.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.toArray(new  String[options.size()  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.toArray(new  String[options.size()  +  1]);	  String[]    arguments    =    options.toArray(new    String[options.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
147	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[options.size()  -  1]);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.toArray(new  String[options.size()  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.toArray(new  String[options.size()  -  1]);	  String[]    arguments    =    options.toArray(new    String[options.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
148	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[options.size()  *  2]);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.toArray(new  String[options.size()  *  2]);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.toArray(new  String[options.size()  *  2]);	  String[]    arguments    =    options.toArray(new    String[options.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  }	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
150	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  2;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  }	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
151	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList(arguments.length);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList(arguments.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	ArrayList  <  String>  tokens  =  new  ArrayList(arguments.length);	  ArrayList    <    String>    tokens    =    new    ArrayList();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    2;    i++)    {    ArrayList  <  String>  tokens  =  new  ArrayList  <  String>();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  int  i  =  0;  i  <  arguments.length  +  1;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    	non-compiled	[CE]  >  expected	45	None	replace
154	[BUG]  [BUGGY]  int  i  =  0;  i  <  arguments.length;  i++)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	int  i  =  0;  i  <  arguments.length;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    	non-compiled	[CE]  >  expected	45	None	replace
155	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length,  stopAtNonOption,  options);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length,  stopAtNonOption,  options);	  List    <    String>    tokens    =    new    ArrayList(arguments.length,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
156	[BUG]  [BUGGY]  tokens.add( "-- ").equals(arg));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ").equals(arg));  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- ").equals(arg));	  tokens.add(   "--   ".equals(arg));    	non-compiled	[CE]  	32	None	replace
157	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  argument.length  -  2;  i++)  {  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  argument.length  -  2;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  argument.length  -  2;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	51	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  options.length  -  1;  i++)  {  String[]  arguments  =  options.get(i);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  options.length  -  1;  i++)  {  String[]  arguments  =  options.get(i);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  options.length  -  1;  i++)  {  String[]  arguments  =  options.get(i);  }	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
159	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length  *  2);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList(arguments.length  *  2);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList(arguments.length  *  2);	  List    <    String>    tokens    =    new    ArrayList(arguments.length    +    2);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
160	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptionArgs();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.getOptionArgs();  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getOptionArgs();	  String[]    arguments    =    options.getArguments();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
161	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[compiler.size()  ]);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.toArray(new  String[compiler.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.toArray(new  String[compiler.size()  ]);	  String[]    arguments    =    options.toArray(new    String[arguments.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    3;    i++)    {    ArrayList  <  String>  tokens  =  new  ArrayList  <  String>();	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  reached  end  of  file  while  parsing  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    3;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
164	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  stopAtNonOption,  options);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length,  stopAtNonOption,  options);	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
165	[BUG]  [BUGGY]  Set  <  String>  tokens  =  new  HashSet  <  String>();  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Set  <  String>  tokens  =  new  HashSet  <  String>();  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Set  <  String>  tokens  =  new  HashSet  <  String>();	  ArrayList    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
166	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   ",--     ");  tokens.add( "--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "--       ");        tokens.add(   ",--       ");    tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	40	13	add
167	[BUG]  [BUGGY]          tokens.add(     "--     ");    tokens.add(   ",--     ");  tokens.add( "--   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   ",--     ");  tokens.add( "--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "--       ");        tokens.add(   ",--       ");    tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	40	13	add
168	[BUG]  [BUGGY]  tokens.add( "-- "  +  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- "  +  stopAtNonOption);	  tokens.add(   "--   "    +    opt);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
169	[BUG]  [BUGGY]  tokens.add( "-- "  +  options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- "  +  options);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- "  +  options);	  tokens.add(   "--   "    +    opt);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
170	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  String[]  arguments  =  options.get(i);  [CE]  reached  end  of  file  while  parsing  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  String[]  arguments  =  options.get(i);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    3;    i++)    {    String[]  arguments  =  options.get(i);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  Arrays.sort(tokens);  [CE]  reached  end  of  file  while  parsing  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  Arrays.sort(tokens);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    3;    i++)    {    Arrays.sort(tokens);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  options.length  -  2;  i++)  {  String[]  arguments  =  options.get(i);  [CE]  cannot  find  symbol  length  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  options.length  -  2;  i++)  {  String[]  arguments  =  options.get(i);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  options.length  -  2;  i++)  {  String[]  arguments  =  options.get(i);	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  cannot  find  symbol  length	70	None	replace
173	[BUG]  [BUGGY]  tokens.add( "--. ");  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "--. ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "--. ");	          tokens.add(       "--       ");    tokens.add(   "--   ".);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
174	[BUG]  [BUGGY]  tokens.add( ", ");  [CE]  illegal  start  of  type  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( ", ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( ", ");	          tokens.add(       "--       ");    tokens.add(   ",--       ");    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
175	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  [CE]  '.class'  expected  [FE]            ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  For(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	For(int  i  =  0;  i  <  arguments.length  +  1;  i++)  {	  For(int    i    =    0;    i    <    arguments.length;    i++)    {    	non-compiled	[CE]  '.class'  expected	1	None	replace
176	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	64	13	add
177	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ".-     ");  tokens.add( "-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "-       ");        tokens.add(   ".-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	64	13	add
178	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   ".--     ");  tokens.add( "--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "--       ");        tokens.add(   ".--       ");    tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
179	[BUG]  [BUGGY]          tokens.add(     "--     ");    tokens.add(   ".--     ");  tokens.add( "--   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "--     ");    tokens.add(   ".--     ");  tokens.add( "--   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "--       ");        tokens.add(   ".--       ");    tokens.add( "--   ");	  	compilable	  [FE]  UnrecognizedOptionException  	42	13	add
180	[BUG]  [BUGGY]  tokens.add( "--n ");  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "--n ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "--n ");	          tokens.add(       "--       ");    tokens.add(   "--       "));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
181	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens,  stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens,  stopAtNonOption);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens,    opt);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
182	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	62	13	add
183	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	62	13	add
184	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-n ");  tokens.add( "-n ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-n ");  tokens.add( "-n ");	  	compilable	  [FE]  UnrecognizedOptionException  	62	13	add
185	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-n ");  tokens.add( "-n ");  [FE]  UnrecognizedOptionException  [FE]      UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   "-     ");  tokens.add( "-n ");  tokens.add( "-n ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "-       ");        tokens.add(   "-       ");    tokens.add( "-n ");  tokens.add( "-n ");	  	compilable	  [FE]  UnrecognizedOptionException  	62	13	add
186	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(option.nextToken(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(option.nextToken(),  stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(option.nextToken(),  stopAtNonOption);	  Tokens    tokens    =    new    Tokens(opt.nextToken(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
187	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options.size());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(options.size());  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(options.size());	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.size());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
188	[BUG]  [BUGGY]  tokens.add( "- ".equals(arguments[opt));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "- ".equals(arguments[opt));  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- ".equals(arguments[opt));	  tokens.add(   "-   ".equals(opt));    	non-compiled	[CE]  	7	None	replace
189	[BUG]  [BUGGY]  tokens.add( "- ".equals(arguments[i]));  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "- ".equals(arguments[i]));  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- ".equals(arguments[i]));	  tokens.add(   "-   ".equals(opt));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
190	[BUG]  [BUGGY]  tokens.add( "-- ".equals(arguments[i]));  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ".equals(arguments[i]));  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- ".equals(arguments[i]));	  tokens.add(   "--   ".equals(option));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
191	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.values());  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.values());  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.values());	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.values());    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
192	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(8);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(8);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(8);	  ArrayList    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
193	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.size());	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
194	[BUG]  [BUGGY]  tokens.add( "- "  +  options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "- "  +  options);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- "  +  options);	  tokens.add(   "-   "    +    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  for(int  i  =  0;  i  <  argument.length  -  3;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  for(int  i  =  0;  i  <  argument.length  -  3;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    3;    i++)    {    for(int  i  =  0;  i  <  argument.length  -  3;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	14	None	add
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  int  i  =  0;  i  <  argument.length  -  3;  i++)  {  [CE]  >  expected  [FE]      MissingArgumentException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  3;  i++)  {  int  i  =  0;  i  <  argument.length  -  3;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    -    3;    i++)    {    int  i  =  0;  i  <  argument.length  -  3;  i++)  {	  	non-compiled	[CE]  >  expected	14	None	add
197	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1,  arguments.length);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1,  arguments.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length  -  1,  arguments.length);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  for(int  i  =  0;  i  <  argument.length  +  2;  i++)  {  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  2;  i++)  {  for(int  i  =  0;  i  <  argument.length  +  2;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    2;    i++)    {    for(int  i  =  0;  i  <  argument.length  +  2;  i++)  {	  	non-compiled	[CE]  reached  end  of  file  while  parsing	2	None	add
199	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i]);    for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
200	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i]);    for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	52	None	replace
201	[BUG]  [BUGGY]  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	add	                tokens.add(       "-       ");        tokens.add(   ",-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	66	13	add
202	[BUG]  [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  [FE]  UnrecognizedOptionException  [FE]    UnrecognizedOptionException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]          tokens.add(     "-     ");    tokens.add(   ",-     ");  tokens.add( "-   ");  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	                tokens.add(       "-       ");        tokens.add(   ",-       ");    tokens.add( "-   ");	  	compilable	  [FE]  UnrecognizedOptionException  	66	13	add
203	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  *  2);  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  *  2);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  *  2);	  List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length    +    2);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [CE]  cannot  find  symbol  argument  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  argument.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  cannot  find  symbol  argument	48	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  cannot  find  symbol  argument  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  argument.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i]);    	non-compiled	[CE]  cannot  find  symbol  argument	69	None	replace
206	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  '.class'  expected  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  For(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	For(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i]);    	non-compiled	[CE]  '.class'  expected	69	None	replace
207	[BUG]  [BUGGY]  tokens.add( "- ".equals(arguments[0]));  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "- ".equals(arguments[0]));  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- ".equals(arguments[0]));	  tokens.add(   "-   ".equals(option));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
208	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  '.class'  expected  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  For(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	For(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  '.class'  expected	68	None	replace
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  cannot  find  symbol  argument  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  argument.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  argument.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  cannot  find  symbol  argument	68	None	replace
210	[BUG]  [BUGGY]  int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  >  expected	80	None	replace
211	[BUG]  [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length;  i++)  {  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	ArrayList  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  for(int  i  =  0;  i  <  arguments.length;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	51	None	replace
212	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size(),  arguments.length);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(arguments.size(),  arguments.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(arguments.size(),  arguments.length);	  TokenBuffer    tokens    =    new    TokenBuffer(arguments.size());    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  String[]  arguments  =  options.get(i  +  1);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  String[]  arguments  =  options.get(i  +  1);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length  -  1;  i++)  {  String[]  arguments  =  options.get(i  +  1);	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	77	None	replace
214	[BUG]  [BUGGY]  int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>();	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>();    	non-compiled	[CE]  >  expected	79	None	replace
215	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [CE]  '.class'  expected  [FE]          AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  For(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	For(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length);	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments.length);    	non-compiled	[CE]  '.class'  expected	88	None	replace
216	[BUG]  [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length,  opt);  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length,  opt);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	TokenBuffer  tokens  =  new  TokenBuffer(tokens.length,  arguments.length,  opt);	  TokenBuffer    tokens    =    new    TokenBuffer(tokens.length,    arguments.length);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i  +  1);  [CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]            AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i  +  1);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i  +  1);	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  variable  arguments  is  already  defined  in  method  flatten(Options,String[],boolean)	70	None	replace
218	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  For(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	For(int  i  =  0;  i  <  arguments.length;  i++)  {  String[]  arguments  =  options.get(i);	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    String[]    arguments    =    options.get(i);    	non-compiled	[CE]  '.class'  expected	70	None	replace
219	[BUG]  [BUGGY]  String[]  arguments  =  options.getAllValues();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.getAllValues();  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getAllValues();	  String[]    arguments    =    options.getValues();    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
220	[BUG]  [BUGGY]  Tokens  tokens  =  new  Tokens(opt,  options.nextToken(),  arguments.length);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  Tokens  tokens  =  new  Tokens(opt,  options.nextToken(),  arguments.length);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	Tokens  tokens  =  new  Tokens(opt,  options.nextToken(),  arguments.length);	  Tokens    tokens    =    new    Tokens(opt,    options.nextToken());    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
221	[BUG]  [BUGGY]  String[]  arguments  =  options.getOptions(turnAtNonOption);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.getOptions(turnAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.getOptions(turnAtNonOption);	  String[]    arguments    =    options.getOptions(opt);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	21	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  }  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length);  }	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  1);  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                    AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  1);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList(arguments.length  +  1);	  for(int    i    =    0;    i    <    arguments.length    -    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList(arguments.length);    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	21	None	replace
225	[BUG]  [BUGGY]  int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	int  i  =  0;  i  <  arguments.length;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i]);	  for(int    i    =    0;    i    <    arguments.length    +    1;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i]);    	non-compiled	[CE]  >  expected	47	None	replace
226	[BUG]  [BUGGY]  tokens.add( "- ",  new  String[]  {   "- "  }  );  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "- ",  new  String[]  {   "- "  }  );  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "- ",  new  String[]  {   "- "  }  );	          tokens.add(       "-       ");    tokens.add(   "-   ".);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
227	[BUG]  [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  for(int  i  =  0;  i  <  arguments.length;  i++)  {  [CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)  [FE]                AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  for(int  i  =  0;  i  <  arguments.length;  i++)  {  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	List  <  String>  tokens  =  new  ArrayList  <  String>(arguments[i].size());  for(int  i  =  0;  i  <  arguments.length;  i++)  {	  for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    List    <    String>    tokens    =    new    ArrayList    <    String>(arguments[i].size());    for(int    i    =    0;    i    <    arguments.length    -    2;    i++)    {    	non-compiled	[CE]  variable  tokens  is  already  defined  in  method  flatten(Options,String[],boolean)	53	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  3);  [CE]  reached  end  of  file  while  parsing  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  for(int  i  =  0;  i  <  arguments.length  +  3;  i++)  {  List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  3);  [BUGGY]      {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	for(int    i    =    0;    i    <    arguments.length    +    3;    i++)    {    List  <  String>  tokens  =  new  ArrayList  <  String>(arguments.length  +  3);	  	non-compiled	[CE]  reached  end  of  file  while  parsing	4	None	add
229	[BUG]  [BUGGY]  String[]  arguments  =  options.toArray(new  String[options.size()  ],  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  String[]  arguments  =  options.toArray(new  String[options.size()  ],  stopAtNonOption);  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	String[]  arguments  =  options.toArray(new  String[options.size()  ],  stopAtNonOption);	  String[]    arguments    =    options.toArray(new    String[options.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
230	[BUG]  [BUGGY]  tokens.add( "-- ".equals(arguments[opt));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      {  List  tokens  =  new  ArrayList();  boolean  eatTheRest  =  false;      [BUGGY]  tokens.add( "-- ".equals(arguments[opt));  [BUGGY]      for  (int  i  =  0;  i  <  arguments.length;  i++)  {  {  String  arg  =  arguments[i];  if  (     "--     ".equals(arg))  {  eatTheRest  =  true;  tokens.add(     "--     ");  }  else  if  (     "-     ".equals(arg))  {  [CLASS]  GnuParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  List  tokens  String[]  arguments  String  arg  opt  int  i  	projects/Cli12/src/java/org/apache/commons/cli/GnuParser.java	0.4629100498862757	58	59	3	replace	tokens.add( "-- ".equals(arguments[opt));	  tokens.add(   "--   ".equals(opt));    	non-compiled	[CE]  	30	None	replace
