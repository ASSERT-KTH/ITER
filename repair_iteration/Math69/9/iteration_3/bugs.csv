bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getEntryDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  covarianceMatrix  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  covarianceMatrix.getEntryDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  covarianceMatrix.getEntryDimension();  out[i][j]  =  0d;	  int    nObs    =    correlationMatrix.getEntryDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	141	None	replace
2	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getEntryDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  dataMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getEntryDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getEntryDimension();  out[i][j]  =  0d;	  int    nObs    =    correlationMatrix.getEntryDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	141	None	replace
3	[BUG]  [BUGGY]  int  nObs  =  i.getEntryDimension();  out[i][j]  =  0d;  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  i.getEntryDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  i.getEntryDimension();  out[i][j]  =  0d;	  int    nObs    =    correlationMatrix.getEntryDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  int  cannot  be  dereferenced	141	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  out[i][j]  =  0L;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    0L;    out[i][j]  =  0L;	  	compilable	  [FE]  AssertionFailedError  	14	2	add
5	[BUG]  [BUGGY]  out[i][j]  =  0L;  out[i][j]  =  0L;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  out[i][j]  =  0L;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    out[i][j]  =  0L;	  	compilable	  [FE]  AssertionFailedError  	14	2	add
6	[BUG]  [BUGGY]  out[i][j]  =  0L;  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0L;  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0L;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0L;	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	14	None	add
7	[BUG]  [BUGGY]  out[i][j]  =  0L;  int  j  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  int  j  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    int  j  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	14	None	add
8	[BUG]  [BUGGY]  out[i][j]  =  0L;  int  j  =  correlationMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  int  j  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    int  j  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	14	None	add
9	[BUG]  [BUGGY]  out[i][j]  =  0L;  int  j  =  correlationMatrix.getEntry(i);  out[i][j]  =  0L;  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  int  j  =  correlationMatrix.getEntry(i);  out[i][j]  =  0L;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    int  j  =  correlationMatrix.getEntry(i);  out[i][j]  =  0L;	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	14	None	add
10	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.cumulativeProbability(j),  i);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.cumulativeProbability(j),  i);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(correlationMatrix.cumulativeProbability(j),  i);	  double    d    =    Math.abs(correlationMatrix.cumulativeProbability(j));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
11	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.cumulativeProbability(j),  tDistribution);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.cumulativeProbability(j),  tDistribution);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(correlationMatrix.cumulativeProbability(j),  tDistribution);	  double    d    =    Math.abs(correlationMatrix.cumulativeProbability(j));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
12	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	65	None	replace
13	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  dataMatrix  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getRowDimension();  out[i][j]  =  0d;	          int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d;    int    nObs    =    dataMatrix.getColumnDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	77	None	replace
14	[BUG]  [BUGGY]  int  nObs  =  datasetMatrix.getColumnDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  datasetMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  datasetMatrix.getColumnDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  datasetMatrix.getColumnDimension();  out[i][j]  =  0d;	          int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d;    int    nObs    =    dataMatrix.getColumnDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  datasetMatrix	77	None	replace
15	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [CE]  cannot  find  symbol  t  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2;    	non-compiled	[CE]  cannot  find  symbol  t	17	None	replace
16	[BUG]  [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2  *  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2;    	non-compiled	[CE]  ';'  expected	17	None	replace
17	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)+  1;  [CE]  cannot  find  symbol  t  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)+  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(t)+  1;	  out[i][j]    =    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol  t	123	None	replace
18	[BUG]  [BUGGY]  out[i][j]  =  correlationMatrix.cumulativeProbability(t));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  correlationMatrix.cumulativeProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  correlationMatrix.cumulativeProbability(t));	  out[i][j]    =    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	123	None	replace
19	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(j));	  out[i][j]    =    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	123	None	replace
20	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }	  out[i][j]    =    0D;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	138	None	replace
21	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  'else'  without  'if'  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);	  out[i][j]    =    0D;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
22	[BUG]  [BUGGY]  out[i][j]  =  1;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }	  out[i][j]    =    0D;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	138	None	replace
23	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }	  out[i][j]    =    0D;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	138	None	replace
24	[BUG]  [BUGGY]  double  d  =  comparisonMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  comparisonMatrix  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  comparisonMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  comparisonMatrix.getEntry(i,  j);	          double    d    =    correlationMatrix.getEntry(i,    j);    double    d    =    comparisonMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  comparisonMatrix	148	None	replace
25	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getRowDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  covarianceMatrix.getRowDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  covarianceMatrix.getRowDimension();  int  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	66	None	replace
26	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  int  nObs  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  int  nObs  =  dataMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getRowDimension();  int  nObs  =  dataMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	66	None	replace
27	[BUG]  [BUGGY]  out[i][j]  =  0;  int  j  =  correlationMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  j  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  j  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	110	None	replace
28	[BUG]  [BUGGY]  out[i][j]  =  0;  int  j  =  correlationMatrix.getRowDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  j  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  j  =  correlationMatrix.getRowDimension();	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	110	None	replace
29	[BUG]  [BUGGY]  int  j  =  correlationMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  j  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  j  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	110	None	replace
30	[BUG]  [BUGGY]  out[i][j]  =  0;  int  j  =  covarianceMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  j  =  covarianceMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  j  =  covarianceMatrix.getColumnDimension();	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	110	None	replace
31	[BUG]  [BUGGY]  out[i][j]  =  0xff;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0xff;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0xff;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0xff;  }	  out[i][j]    =    0xff;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    0xff;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	146	None	replace
32	[BUG]  [BUGGY]  out[i][j]  =  0xff;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0xff  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0xff  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0xff	  out[i][j]    =    0xff;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    0xff;    }    	non-compiled	[CE]  ';'  expected	146	None	replace
33	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	62	None	replace
34	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  covarianceMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	62	None	replace
35	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Integer  nObs  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Integer  nObs  =  dataMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  Integer  nObs  =  dataMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	62	None	replace
36	[BUG]  [BUGGY]  double[][]  out  =  new  double[nObs][i];  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nObs][i];  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nObs][i];	  double[][]    out    =    new    double[nVars][i];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	133	None	replace
37	[BUG]  [BUGGY]  double[][]  out  =  new  double[1][nVars][i];  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[1][nVars][i];  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[1][nVars][i];	  double[][]    out    =    new    double[nVars][i];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	133	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0.0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0.0;	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    	compilable	  [FE]  AssertionFailedError  	54	2	replace
39	[BUG]  [BUGGY]  out[i][j]  =  0.0;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0.0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0.0;	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    	compilable	  [FE]  AssertionFailedError  	54	2	replace
40	[BUG]  [BUGGY]  double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  correlationMatrix);  [CE]  cannot  find  symbol  relativeMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  correlationMatrix);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  correlationMatrix);	  double    d    =    Math.abs(covarianceMatrix.getEntry(i,    j),    correlationMatrix);    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	149	None	replace
41	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  nVars);  [CE]  no  suitable  method  found  for  abs(double,int)  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  nVars);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  nVars);	  double    d    =    Math.abs(covarianceMatrix.getEntry(i,    j),    correlationMatrix);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,int)	149	None	replace
42	[BUG]  [BUGGY]  double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  covarianceMatrix);  [CE]  cannot  find  symbol  relativeMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  covarianceMatrix);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  covarianceMatrix);	  double    d    =    Math.abs(covarianceMatrix.getEntry(i,    j),    correlationMatrix);    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	149	None	replace
43	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xff;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xff;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xff;  }	  out[i][j]    =    0xff;    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0xff;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	44	None	replace
44	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [CE]  cannot  find  symbol  t  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    n    *    j)));    	non-compiled	[CE]  cannot  find  symbol  t	12	None	replace
45	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [CE]  cannot  find  symbol  relativeProbability  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    n    *    j)));    	non-compiled	[CE]  cannot  find  symbol  relativeProbability	12	None	replace
46	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(matrix  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [CE]  cannot  find  symbol  matrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(matrix  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(matrix  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    n    *    j)));    	non-compiled	[CE]  cannot  find  symbol  matrix	12	None	replace
47	[BUG]  [BUGGY]  double[][]  out  =  new  double[nObs][j].doubleValue();  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nObs][j].doubleValue();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nObs][j].doubleValue();	  double[][]    out    =    new    double[nVars][j].doubleValue();    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	107	None	replace
48	[BUG]  [BUGGY]  double[][]  out  =  new  double[nVars][j].doubleValue()  +  1;  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nVars][j].doubleValue()  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nVars][j].doubleValue()  +  1;	  double[][]    out    =    new    double[nVars][j].doubleValue();    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	107	None	replace
49	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  covarianceMatrix.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  covarianceMatrix.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }	  int    nObs    =    correlationMatrix.getEntryDimension();    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0d;    }    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	106	None	replace
50	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [CE]  cannot  find  symbol  dataMatrix  [FE]                      AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }	  int    nObs    =    correlationMatrix.getEntryDimension();    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0d;    }    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	106	None	replace
51	[BUG]  [BUGGY]  int  nObs  =  nVars.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  nVars.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  nVars.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }	  int    nObs    =    correlationMatrix.getEntryDimension();    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0d;    }    	non-compiled	[CE]  int  cannot  be  dereferenced	106	None	replace
52	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	127	None	add
53	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	127	None	add
54	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    int  j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;	  	non-compiled	[CE]  ';'  expected	127	None	add
55	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	127	None	add
56	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	127	None	add
57	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getEntry(i).getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  covarianceMatrix.getEntry(i).getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  covarianceMatrix.getEntry(i).getColumnDimension();	  int    nObs    =    correlationMatrix.getEntry(i).getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	139	None	replace
58	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getEntry(i).getRowDimension();  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getEntry(i).getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getEntry(i).getRowDimension();	  int    nObs    =    correlationMatrix.getEntry(i).getColumnDimension();    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	139	None	replace
59	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getEntry(j).getColumnDimension();  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getEntry(j).getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getEntry(j).getColumnDimension();	  int    nObs    =    correlationMatrix.getEntry(i).getColumnDimension();    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	139	None	replace
60	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getEntry(i).getColumnDimension()  +  1;  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getEntry(i).getColumnDimension()  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getEntry(i).getColumnDimension()  +  1;	  int    nObs    =    correlationMatrix.getEntry(i).getColumnDimension();    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	139	None	replace
61	[BUG]  [BUGGY]  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  nObs  =  correlationMatrix.getEntry(i,  j  +  1);	  double    nObs    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	2	7	replace
62	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j  +  1);  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  nObs  =  correlationMatrix.getEntry(i,  j  +  1);	  double    nObs    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	2	7	replace
63	[BUG]  [BUGGY]  double  nObs  =  covarianceMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  nObs  =  covarianceMatrix.getEntry(i,  j);	  double    nObs    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	2	None	replace
64	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j,  nVars);  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j,  nVars);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  nObs  =  correlationMatrix.getEntry(i,  j,  nVars);	  double    nObs    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	2	None	replace
65	[BUG]  [BUGGY]  double  d  =  Math.abs(columnMatrix.cumulativeProbability(j));  [CE]  cannot  find  symbol  columnMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(columnMatrix.cumulativeProbability(j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(columnMatrix.cumulativeProbability(j));	  double    d    =    Math.abs(relativeMatrix.cumulativeProbability(j));    	non-compiled	[CE]  cannot  find  symbol  columnMatrix	69	None	replace
66	[BUG]  [BUGGY]  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	Double  nObs  =  correlationMatrix.getEntry(i,  j  +  1);	  Double    nObs    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	4	7	replace
67	[BUG]  [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j  +  1);  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double  nObs  =  correlationMatrix.getEntry(i,  j  +  1);	  Double    nObs    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	4	7	replace
68	[BUG]  [BUGGY]  Double  nObs  =  covarianceMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double  nObs  =  covarianceMatrix.getEntry(i,  j);	  Double    nObs    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	4	None	replace
69	[BUG]  [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j,  nVars);  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j,  nVars);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double  nObs  =  correlationMatrix.getEntry(i,  j,  nVars);	  Double    nObs    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	4	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xff;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xff;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
71	[BUG]  [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xff;  out[i][j]  =  0xff;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xff;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xff;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xf;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  0xf;  out[i][j]  =  0xff;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
73	[BUG]  [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xf;  out[i][j]  =  0xff;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xf;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  0xf;  out[i][j]  =  0xff;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xfF;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  0xfF;  out[i][j]  =  0xff;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
75	[BUG]  [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xfF;  out[i][j]  =  0xff;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xfF;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  0xfF;  out[i][j]  =  0xff;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
76	[BUG]  [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xf);  out[i][j]  =  0xff;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0xf);  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  0xf);  out[i][j]  =  0xff;	  	non-compiled	[CE]  ';'  expected	42	None	add
77	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nObs;  i++)  {  out[i][j]  =  0;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nObs;  i++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nObs;  i++)  {  out[i][j]  =  0;  }	  out[i][j]    =    0D;    for(int    i][j]    =    0D;    i    <    nObs;    i++)    {    out[i][j]    =    0D;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
78	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0;  }	  out[i][j]    =    0D;    for(int    i][j]    =    0D;    i    <    nObs;    i++)    {    out[i][j]    =    0D;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
79	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i  [j]  =  0;  i  <  nObs;  i++)  {  out[i][j]  =  0;  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i  [j]  =  0;  i  <  nObs;  i++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i  [j]  =  0;  i  <  nObs;  i++)  {  out[i][j]  =  0;  }	  out[i][j]    =    0D;    for(int    i][j]    =    0D;    i    <    nObs;    i++)    {    out[i][j]    =    0D;    }    	non-compiled	[CE]  ']'  expected	52	None	replace
80	[BUG]  [BUGGY]  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  r  =  correlationMatrix.getEntry(i,  j  +  1);	  double    r    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	10	7	replace
81	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j  +  1);  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  r  =  correlationMatrix.getEntry(i,  j  +  1);	  double    r    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	10	7	replace
82	[BUG]  [BUGGY]  double  r  =  covarianceMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  r  =  covarianceMatrix.getEntry(i,  j);	  double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	10	None	replace
83	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j,  nVars);  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j,  nVars);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  r  =  correlationMatrix.getEntry(i,  j,  nVars);	  double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	10	None	replace
84	[BUG]  [BUGGY]  int  nObs  =  matrix.getColumnDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  matrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  matrix.getColumnDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  matrix.getColumnDimension();  out[i][j]  =  0d;	  int    nObs    =    covarianceMatrix.getColumnDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  matrix	86	None	replace
85	[BUG]  [BUGGY]  int  nObs  =  dataset.getColumnDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  dataset  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataset.getColumnDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataset.getColumnDimension();  out[i][j]  =  0d;	  int    nObs    =    covarianceMatrix.getColumnDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  dataset	86	None	replace
86	[BUG]  [BUGGY]  double[][]  out  =  new  double[nObs][j  -  1];  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nObs][j  -  1];  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nObs][j  -  1];	  double[][]    out    =    new    double[nObs][j];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	72	None	replace
87	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0xff;  i  <  nObs;  i++)  {  out[i][j]  =  0xff;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0xff;  i  <  nObs;  i++)  {  out[i][j]  =  0xff;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i][j]  =  0xff;  i  <  nObs;  i++)  {  out[i][j]  =  0xff;  }	  out[i][j]    =    0xff;    for(int    i][j]    =    0xff;    i    <    nObs;    i++)    {    out[i][j]    =    0xff;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
88	[BUG]  [BUGGY]  out[i][j]  =  0xf;  for(int  i][j]  =  0xff;  i  <  nObs;  i++)  {  out[i][j]  =  0xff;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  for(int  i][j]  =  0xff;  i  <  nObs;  i++)  {  out[i][j]  =  0xff;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xf;  for(int  i][j]  =  0xff;  i  <  nObs;  i++)  {  out[i][j]  =  0xff;  }	  out[i][j]    =    0xff;    for(int    i][j]    =    0xff;    i    <    nObs;    i++)    {    out[i][j]    =    0xff;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  -1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  -1;	  out[i][j]    =    0;    out[i][j]    =    0;    	compilable	  [FE]  AssertionFailedError  	19	5	replace
90	[BUG]  [BUGGY]  out[i][j]  =  -1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  -1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  -1;	  out[i][j]    =    0;    out[i][j]    =    0;    	compilable	  [FE]  AssertionFailedError  	19	5	replace
91	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(t);  [CE]  cannot  find  symbol  t  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(t);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1  +  tDistribution.cumulativeProbability(t);	  out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    	non-compiled	[CE]  cannot  find  symbol  t	116	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  *  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  1  *  tDistribution.cumulativeProbability(j);	  out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    	compilable	  [FE]  AssertionFailedError  	116	5	replace
93	[BUG]  [BUGGY]  out[i][j]  =  1  *  tDistribution.cumulativeProbability(j);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  *  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1  *  tDistribution.cumulativeProbability(j);	  out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    	compilable	  [FE]  AssertionFailedError  	116	5	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  2  *  tDistribution.cumulativeProbability(j);	  out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    	compilable	  [FE]  AssertionFailedError  	116	5	replace
95	[BUG]  [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(j);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2  *  tDistribution.cumulativeProbability(j);	  out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    	compilable	  [FE]  AssertionFailedError  	116	5	replace
96	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1  +  tDistribution.cumulativeProbability(t));	  out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    	non-compiled	[CE]  ';'  expected	116	None	replace
97	[BUG]  [BUGGY]  int  nObs  =  matrix.getColumnDimension();  [CE]  cannot  find  symbol  matrix  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  matrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  matrix.getColumnDimension();	  int    nObs    =    covarianceMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  matrix	24	None	replace
98	[BUG]  [BUGGY]  int  nObs  =  datasetMatrix.getColumnDimension();  [CE]  cannot  find  symbol  datasetMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  datasetMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  datasetMatrix.getColumnDimension();	  int    nObs    =    covarianceMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  datasetMatrix	24	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  d  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	Double  d  =  correlationMatrix.getEntry(i,  j);	          double    d    =    correlationMatrix.getEntry(i,    j);    Double    d    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  AssertionFailedError  	38	2	replace
100	[BUG]  [BUGGY]  Double  d  =  correlationMatrix.getEntry(i,  j);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  d  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double  d  =  correlationMatrix.getEntry(i,  j);	          double    d    =    correlationMatrix.getEntry(i,    j);    Double    d    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  AssertionFailedError  	38	2	replace
101	[BUG]  [BUGGY]  Double  d  =  covarianceMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  d  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double  d  =  covarianceMatrix.getEntry(i,  j);	          double    d    =    correlationMatrix.getEntry(i,    j);    Double    d    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	38	None	replace
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	125	2	replace
103	[BUG]  [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	125	2	replace
104	[BUG]  [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getEntryDimension();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getEntryDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  nObs  =  correlationMatrix.getEntryDimension();	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
105	[BUG]  [BUGGY]  out[i][j]  =  0;  int  nObs  =  covarianceMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  nObs  =  covarianceMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  nObs  =  covarianceMatrix.getColumnDimension();	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	125	None	replace
106	[BUG]  [BUGGY]  out[i][j]  =  0;  int  nObs  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  nObs  =  dataMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  nObs  =  dataMatrix.getColumnDimension();	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	125	None	replace
107	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  1;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  1;  }	  out[i][j]    =    0;    for(int    j]    =    0;    j    <    nObs;    j++)    {    out[i][j]    =    0;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
108	[BUG]  [BUGGY]  double  d  =  dataMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  dataMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  dataMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  dataMatrix.getEntry(i,  j);	  double    d    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	80	None	replace
109	[BUG]  [BUGGY]  double  d  =  matrix.getEntry(i,  j);  [CE]  cannot  find  symbol  matrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  matrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  matrix.getEntry(i,  j);	  double    d    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  matrix	80	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  out[i][j]  =  0xc0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    0xc0;    out[i][j]  =  0xc0;	  	compilable	  [FE]  AssertionFailedError  	144	2	add
111	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  out[i][j]  =  0xc0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  out[i][j]  =  0xc0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    out[i][j]  =  0xc0;	  	compilable	  [FE]  AssertionFailedError  	144	2	add
112	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  for(int  j]  =  0xc0;  j  <  nObs;  j++)  {  out[i][j]  =  0xc0;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  for(int  j]  =  0xc0;  j  <  nObs;  j++)  {  out[i][j]  =  0xc0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    for(int  j]  =  0xc0;  j  <  nObs;  j++)  {  out[i][j]  =  0xc0;  }	  	non-compiled	[CE]  ';'  expected	144	None	add
113	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  for(int  j]  =  0xc0;  j  <  nObs;  j++)  {  out[i][j]  =  0xc0;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  for(int  j]  =  0xc0;  j  <  nObs;  j++)  {  out[i][j]  =  0xc0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    for(int  j]  =  0xc0;  j  <  nObs;  j++)  {  out[i][j]  =  0xc0;	  	non-compiled	[CE]  ';'  expected	144	None	add
114	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  for(int  j]  =  0xc0;  j  <  nVars;  j++)  {  out[i][j]  =  0xc0;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  for(int  j]  =  0xc0;  j  <  nVars;  j++)  {  out[i][j]  =  0xc0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    for(int  j]  =  0xc0;  j  <  nVars;  j++)  {  out[i][j]  =  0xc0;  }	  	non-compiled	[CE]  ';'  expected	144	None	add
115	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  for(int  j]  =  0xc0;  j  <  nObs.length;  j++)  {  out[i][j]  =  0xc0;  }  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  for(int  j]  =  0xc0;  j  <  nObs.length;  j++)  {  out[i][j]  =  0xc0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    for(int  j]  =  0xc0;  j  <  nObs.length;  j++)  {  out[i][j]  =  0xc0;  }	  	non-compiled	[CE]  ';'  expected	144	None	add
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  out[i][j]  =  2;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    2;    out[i][j]  =  2;	  	compilable	  [FE]  AssertionFailedError  	16	2	add
117	[BUG]  [BUGGY]  out[i][j]  =  2;  out[i][j]  =  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  out[i][j]  =  2;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    out[i][j]  =  2;	  	compilable	  [FE]  AssertionFailedError  	16	2	add
118	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  2;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  2;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  2;  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	16	None	add
119	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  2;  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  2;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  2;	  	non-compiled	[CE]  'else'  without  'if'	16	None	add
120	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  2;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  2;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  2;  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	16	None	add
121	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  2;  [CE]  ']'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  2;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  2;	  	non-compiled	[CE]  ']'  expected	16	None	add
122	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0;  }	  out[i][j]    =    0D;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    0D;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	135	None	replace
123	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0	  out[i][j]    =    0D;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    0D;    }    	non-compiled	[CE]  ';'  expected	135	None	replace
124	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0D;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0D;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0D;  }	  out[i][j]    =    0D;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    0D;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	135	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    0xff;    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	89	5	replace
126	[BUG]  [BUGGY]  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    0xff;    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	89	5	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(tDistribution.cumulativeProbability(j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  d  =  Math.abs(tDistribution.cumulativeProbability(j));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	29	2	replace
128	[BUG]  [BUGGY]  double  d  =  Math.abs(tDistribution.cumulativeProbability(j));  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(tDistribution.cumulativeProbability(j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(tDistribution.cumulativeProbability(j));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	29	2	replace
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  t  =  Math.abs(tDistribution.cumulativeProbability(j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  t  =  Math.abs(tDistribution.cumulativeProbability(j));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	29	2	replace
130	[BUG]  [BUGGY]  double  t  =  Math.abs(tDistribution.cumulativeProbability(j));  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  t  =  Math.abs(tDistribution.cumulativeProbability(j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  t  =  Math.abs(tDistribution.cumulativeProbability(j));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	29	2	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(tDistribution.cumulativeProbability(i));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  d  =  Math.abs(tDistribution.cumulativeProbability(i));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	29	2	replace
132	[BUG]  [BUGGY]  double  d  =  Math.abs(tDistribution.cumulativeProbability(i));  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(tDistribution.cumulativeProbability(i));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(tDistribution.cumulativeProbability(i));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	29	2	replace
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  t  =  Math.abs(tDistribution.cumulativeProbability(i));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  t  =  Math.abs(tDistribution.cumulativeProbability(i));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	29	2	replace
134	[BUG]  [BUGGY]  double  t  =  Math.abs(tDistribution.cumulativeProbability(i));  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  t  =  Math.abs(tDistribution.cumulativeProbability(i));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  t  =  Math.abs(tDistribution.cumulativeProbability(i));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	29	2	replace
135	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getEntryDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  covarianceMatrix.getEntryDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  covarianceMatrix.getEntryDimension();	  int    nObs    =    correlationMatrix.getEntryDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	140	None	replace
136	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getEntryDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getEntryDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getEntryDimension();	  int    nObs    =    correlationMatrix.getEntryDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	140	None	replace
137	[BUG]  [BUGGY]  int  nObs  =  matrix.getEntryDimension();  [CE]  cannot  find  symbol  matrix  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  matrix.getEntryDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  matrix.getEntryDimension();	  int    nObs    =    correlationMatrix.getEntryDimension();    	non-compiled	[CE]  cannot  find  symbol  matrix	140	None	replace
138	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(t);  [CE]  cannot  find  symbol  t  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(t);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(t);	  out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t);    	non-compiled	[CE]  cannot  find  symbol  t	13	None	replace
139	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(matrix);  [CE]  cannot  find  symbol  matrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(matrix);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(matrix);	  out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t);    	non-compiled	[CE]  cannot  find  symbol  matrix	13	None	replace
140	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(distribution);  [CE]  cannot  find  symbol  distribution  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(distribution);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(distribution);	  out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t);    	non-compiled	[CE]  cannot  find  symbol  distribution	13	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(j);	  out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t);    	compilable	  [FE]  AssertionFailedError  	13	5	replace
142	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(j);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(j);	  out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t);    	compilable	  [FE]  AssertionFailedError  	13	5	replace
143	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    r    =    correlationMatrix.getEntry(i,    j);    double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	9	None	add
144	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  Double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  Double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    r    =    correlationMatrix.getEntry(i,    j);    Double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	9	None	add
145	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  covarianceMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    r    =    correlationMatrix.getEntry(i,    j);    double  r  =  covarianceMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	9	None	add
146	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  dataMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  dataMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    r    =    correlationMatrix.getEntry(i,    j);    double  r  =  dataMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	9	None	add
147	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  contributionMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  contributionMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    r    =    correlationMatrix.getEntry(i,    j);    double  r  =  contributionMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	9	None	add
148	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  1;  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  1;  }	  out[i][j]    =    1;    for(int    j    =    0;    j    <    nVars;    j++)    {    double[][j]    =    1;    	non-compiled	[CE]  ']'  expected	36	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  out[i][j]  =  3;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    3;    out[i][j]  =  3;	  	compilable	  [FE]  AssertionFailedError  	63	2	add
150	[BUG]  [BUGGY]  out[i][j]  =  3;  out[i][j]  =  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  out[i][j]  =  3;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    out[i][j]  =  3;	  	compilable	  [FE]  AssertionFailedError  	63	2	add
151	[BUG]  [BUGGY]  out[i][j]  =  3;  for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  3;  }  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  3;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  3;  }	  	non-compiled	[CE]  ';'  expected	63	None	add
152	[BUG]  [BUGGY]  out[i][j]  =  3;  for(int  j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  3;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  for(int  j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  3;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    for(int  j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  3;  }	  	non-compiled	[CE]  ';'  expected	63	None	add
153	[BUG]  [BUGGY]  out[i][j]  =  3;  for(int  j]  =  3;  j  <  nObs;  j++)  {  out[i][j]  =  3;  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  for(int  j]  =  3;  j  <  nObs;  j++)  {  out[i][j]  =  3;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    for(int  j]  =  3;  j  <  nObs;  j++)  {  out[i][j]  =  3;  }	  	non-compiled	[CE]  ';'  expected	63	None	add
154	[BUG]  [BUGGY]  out[i][j]  =  3;  for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  3;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  3;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  3;	  	non-compiled	[CE]  ';'  expected	63	None	add
155	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(j));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.cumulativeProbability(j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.cumulativeProbability(j));	          tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	130	None	replace
156	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(t,  out[i][j]));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.cumulativeProbability(t,  out[i][j]));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.cumulativeProbability(t,  out[i][j]));	          tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	130	None	replace
157	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(t,  j));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.cumulativeProbability(t,  j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.cumulativeProbability(t,  j));	          tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	130	None	replace
158	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  1;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  1;  }	  out[i][j]    =    0;    for(int    j]    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
159	[BUG]  [BUGGY]  double  t  =  Math.abs(tDistribution.cumulativeProbability(t));  [CE]  variable  t  might  not  have  been  initialized  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  t  =  Math.abs(tDistribution.cumulativeProbability(t));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  t  =  Math.abs(tDistribution.cumulativeProbability(t));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(d));    	non-compiled	[CE]  variable  t  might  not  have  been  initialized	132	None	replace
160	[BUG]  [BUGGY]  double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  nVars);  [CE]  cannot  find  symbol  relativeMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  nVars);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  nVars);	  double    d    =    Math.abs(covarianceMatrix.getEntry(i,    j),    nVars);    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	58	None	replace
161	[BUG]  [BUGGY]  double  d  =  Math.abs(covarianceMatrix.getEntry(i,  j),  0);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(covarianceMatrix.getEntry(i,  j),  0);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(covarianceMatrix.getEntry(i,  j),  0);	  double    d    =    Math.abs(covarianceMatrix.getEntry(i,    j),    nVars);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	58	None	replace
162	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  i  <  nObs;  i++)  {  double[][j]  =  0;  }  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  i  <  nObs;  i++)  {  double[][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i  =  0;  i  <  nObs;  i++)  {  double[][j]  =  0;  }	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	118	None	replace
163	[BUG]  [BUGGY]  out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0;  }	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	118	None	replace
164	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0;  }	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	118	None	replace
165	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0  +  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0xc0  +  1;	  out[i][j]    =    0xc0;    	compilable	  [FE]  AssertionFailedError  	145	5	replace
166	[BUG]  [BUGGY]  out[i][j]  =  0xc0  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0  +  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xc0  +  1;	  out[i][j]    =    0xc0;    	compilable	  [FE]  AssertionFailedError  	145	5	replace
167	[BUG]  [BUGGY]  Integer  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Integer  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Integer  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }	  int    nObs    =    covarianceMatrix.getColumnDimension();    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0d;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	6	None	replace
168	[BUG]  [BUGGY]  int  nObs  =  matrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [CE]  cannot  find  symbol  matrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  matrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  matrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }	  int    nObs    =    covarianceMatrix.getColumnDimension();    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0d;    }    	non-compiled	[CE]  cannot  find  symbol  matrix	6	None	replace
169	[BUG]  [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double    nObs    =    correlationMatrix.getEntry(i,    j);    Double  nObs  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	3	None	add
170	[BUG]  [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  covarianceMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double    nObs    =    correlationMatrix.getEntry(i,    j);    Double  nObs  =  covarianceMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	3	None	add
171	[BUG]  [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double    nObs    =    correlationMatrix.getEntry(i,    j);    double  nObs  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	3	None	add
172	[BUG]  [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  dataMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  dataMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double    nObs    =    correlationMatrix.getEntry(i,    j);    Double  nObs  =  dataMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	3	None	add
173	[BUG]  [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  contributionMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  contributionMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double    nObs    =    correlationMatrix.getEntry(i,    j);    Double  nObs  =  contributionMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	3	None	add
174	[BUG]  [BUGGY]  double  d  =  datasetMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  datasetMatrix  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  datasetMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  datasetMatrix.getEntry(i,  j);	          double    d    =    correlationMatrix.getEntry(i,    j);    double    d    =    dataMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  datasetMatrix	40	None	replace
175	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1,  nVars);  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]    MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1,  nVars);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j  +  1,  nVars);	  double    d    =    correlationMatrix.getEntry(i,    j    +    1);    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	79	None	replace
176	[BUG]  [BUGGY]  double  d  =  covarianceMatrix.getEntry(i,  j  +  1);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]      MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  covarianceMatrix.getEntry(i,  j  +  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  covarianceMatrix.getEntry(i,  j  +  1);	  double    d    =    correlationMatrix.getEntry(i,    j    +    1);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	79	None	replace
177	[BUG]  [BUGGY]  [FE]  MatrixIndexException  [FE]        MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  2);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  d  =  correlationMatrix.getEntry(i,  j  +  2);	  double    d    =    correlationMatrix.getEntry(i,    j    +    1);    	compilable	  [FE]  MatrixIndexException  	79	7	replace
178	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  2);  [FE]  MatrixIndexException  [FE]        MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  2);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j  +  2);	  double    d    =    correlationMatrix.getEntry(i,    j    +    1);    	compilable	  [FE]  MatrixIndexException  	79	7	replace
179	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j,  nVars,  nObs);  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j,  nVars,  nObs);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j,  nVars,  nObs);	  double    d    =    correlationMatrix.getEntry(i,    j,    nVars);    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	81	None	replace
180	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j,  covarianceMatrix,  nVars);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j,  covarianceMatrix,  nVars);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j,  covarianceMatrix,  nVars);	  double    d    =    correlationMatrix.getEntry(i,    j,    nVars);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	81	None	replace
181	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j,  out,  nVars);  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j,  out,  nVars);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j,  out,  nVars);	  double    d    =    correlationMatrix.getEntry(i,    j,    nVars);    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	81	None	replace
182	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j,  nVars,  covarianceMatrix);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j,  nVars,  covarianceMatrix);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j,  nVars,  covarianceMatrix);	  double    d    =    correlationMatrix.getEntry(i,    j,    nVars);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	81	None	replace
183	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);	  	compilable	  [FE]  AssertionFailedError  	115	2	add
184	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);	  	compilable	  [FE]  AssertionFailedError  	115	2	add
185	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  int  j]  =  1  +  tDistribution.cumulativeProbability(j);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  int  j]  =  1  +  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    int  j]  =  1  +  tDistribution.cumulativeProbability(j);	  	non-compiled	[CE]  ';'  expected	115	None	add
186	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  OutputMatrix  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  OutputMatrix  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    OutputMatrix  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);	  	non-compiled	[CE]  ']'  expected	115	None	add
187	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    out[i][j]  =  1  +  tDistribution.cumulativeProbability(j));	  	non-compiled	[CE]  ';'  expected	115	None	add
188	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  for(int  j]  =  1  +  tDistribution.cumulativeProbability(j);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  for(int  j]  =  1  +  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    for(int  j]  =  1  +  tDistribution.cumulativeProbability(j);	  	non-compiled	[CE]  ';'  expected	115	None	add
189	[BUG]  [BUGGY]  int  nObs  =  matrix.getRowDimension();  [CE]  cannot  find  symbol  matrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  matrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  matrix.getRowDimension();	  int    nObs    =    covarianceMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  matrix	26	None	replace
190	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;	  out[i][j]    =    0xff;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    	compilable	  [FE]  AssertionFailedError  	91	5	replace
191	[BUG]  [BUGGY]  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;	  out[i][j]    =    0xff;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    	compilable	  [FE]  AssertionFailedError  	91	5	replace
192	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0;        out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  0;	  	compilable	  [FE]  AssertionFailedError  	18	2	add
193	[BUG]  [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  0;  out[i][j]  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  0;	  	compilable	  [FE]  AssertionFailedError  	18	2	add
194	[BUG]  [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  for(int  i][j]  =  0;  out[i][j]  =  0;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  for(int  i][j]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        out[i][j]    =    0;    for(int  i][j]  =  0;  out[i][j]  =  0;	  	non-compiled	[CE]  ';'  expected	18	None	add
195	[BUG]  [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  int  j]  =  0;  out[i][j]  =  0;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  int  j]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        out[i][j]    =    0;    int  j]  =  0;  out[i][j]  =  0;	  	non-compiled	[CE]  ';'  expected	18	None	add
196	[BUG]  [BUGGY]  out[i][j]  =  1;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  0;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  0;  }	  out[i][j]    =    0;    for(int    j    =    0;    j    <    nVars;    j++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	126	None	replace
197	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nObs;  j++)  {  double[][j]  =  0;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nObs;  j++)  {  double[][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nObs;  j++)  {  double[][j]  =  0;  }	  out[i][j]    =    0;    for(int    j    =    0;    j    <    nVars;    j++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	126	None	replace
198	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  0;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  0;  }	  out[i][j]    =    0;    for(int    j    =    0;    j    <    nVars;    j++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	126	None	replace
199	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d    +    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	95	None	add
200	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  int  nObs  =  covarianceMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  int  nObs  =  covarianceMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d    +    1;    int  nObs  =  covarianceMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	95	None	add
201	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  Int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  Int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d    +    1;    Int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;	  	non-compiled	[CE]  cannot  find  symbol	95	None	add
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  tDistribution.cumulativeProbability(j);	  out[i][j]    =    tDistribution.cumulativeProbability(t);    	compilable	  [FE]  AssertionFailedError  	11	5	replace
203	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(j);	  out[i][j]    =    tDistribution.cumulativeProbability(t);    	compilable	  [FE]  AssertionFailedError  	11	5	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(i);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  tDistribution.cumulativeProbability(i);	  out[i][j]    =    tDistribution.cumulativeProbability(t);    	compilable	  [FE]  AssertionFailedError  	11	5	replace
205	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(i);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(i);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(i);	  out[i][j]    =    tDistribution.cumulativeProbability(t);    	compilable	  [FE]  AssertionFailedError  	11	5	replace
206	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(distribution);  [CE]  cannot  find  symbol  distribution  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(distribution);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(distribution);	  out[i][j]    =    tDistribution.cumulativeProbability(t);    	non-compiled	[CE]  cannot  find  symbol  distribution	11	None	replace
207	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(k);  [CE]  cannot  find  symbol  k  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(k);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(k);	  out[i][j]    =    tDistribution.cumulativeProbability(t);    	non-compiled	[CE]  cannot  find  symbol  k	11	None	replace
208	[BUG]  [BUGGY]  int  nObs  =(covarianceMatrix.getColumnDimension()!=  0)?  correlationMatrix.getRowDimension()  :  0;  [CE]  cannot  find  symbol  covarianceMatrix  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =(covarianceMatrix.getColumnDimension()!=  0)?  correlationMatrix.getRowDimension()  :  0;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =(covarianceMatrix.getColumnDimension()!=  0)?  correlationMatrix.getRowDimension()  :  0;	  int    nObs    =(relativeMatrix.getColumnDimension()!=    0)?    correlationMatrix.getRowDimension()    :    0;    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	143	None	replace
209	[BUG]  [BUGGY]  int  nObs  =(relativeMatrix.getColumnDimension()!=  0)?  covarianceMatrix.getRowDimension()  :  0;  [CE]  cannot  find  symbol  relativeMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =(relativeMatrix.getColumnDimension()!=  0)?  covarianceMatrix.getRowDimension()  :  0;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =(relativeMatrix.getColumnDimension()!=  0)?  covarianceMatrix.getRowDimension()  :  0;	  int    nObs    =(relativeMatrix.getColumnDimension()!=    0)?    correlationMatrix.getRowDimension()    :    0;    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	143	None	replace
210	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =(correlationMatrix.getColumnDimension()!=  0)?  correlationMatrix.getRowDimension()  :  0;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	int  nObs  =(correlationMatrix.getColumnDimension()!=  0)?  correlationMatrix.getRowDimension()  :  0;	  int    nObs    =(relativeMatrix.getColumnDimension()!=    0)?    correlationMatrix.getRowDimension()    :    0;    	compilable	  [FE]  AssertionFailedError  	143	2	replace
211	[BUG]  [BUGGY]  int  nObs  =(correlationMatrix.getColumnDimension()!=  0)?  correlationMatrix.getRowDimension()  :  0;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =(correlationMatrix.getColumnDimension()!=  0)?  correlationMatrix.getRowDimension()  :  0;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =(correlationMatrix.getColumnDimension()!=  0)?  correlationMatrix.getRowDimension()  :  0;	  int    nObs    =(relativeMatrix.getColumnDimension()!=    0)?    correlationMatrix.getRowDimension()    :    0;    	compilable	  [FE]  AssertionFailedError  	143	2	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  1;  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        1;        out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  1;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
213	[BUG]  [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  1;  out[i][j]  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  1;  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  1;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
214	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  2;  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        1;        out[i][j]    =    1;    out[i][j]  =  2;  out[i][j]  =  1;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
215	[BUG]  [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  2;  out[i][j]  =  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  2;  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        out[i][j]    =    1;    out[i][j]  =  2;  out[i][j]  =  1;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        1;        out[i][j]    =    1;    out[i][j]  =  0;  out[i][j]  =  0;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
217	[BUG]  [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  0;  out[i][j]  =  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        out[i][j]    =    1;    out[i][j]  =  0;  out[i][j]  =  0;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
218	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  0;  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        1;        out[i][j]    =    1;    out[i][j]  =  0;  out[i][j]  =  1;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
219	[BUG]  [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  0;  out[i][j]  =  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    out[i][j]  =  1;  out[i][j]  =  0;  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        out[i][j]    =    1;    out[i][j]  =  0;  out[i][j]  =  1;	  	compilable	  [FE]  AssertionFailedError  	31	2	add
220	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [CE]  cannot  find  symbol  t  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));	          out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars)));    	non-compiled	[CE]  cannot  find  symbol  t	104	None	replace
221	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [CE]  cannot  find  symbol  relativeProbability  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));	          out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars)));    	non-compiled	[CE]  cannot  find  symbol  relativeProbability	104	None	replace
222	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(l  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [CE]  cannot  find  symbol  l  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(l  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(l  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));	          out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars)));    	non-compiled	[CE]  cannot  find  symbol  l	104	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;	  out[i][j]    =    0D;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    	compilable	  [FE]  AssertionFailedError  	137	2	replace
224	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;	  out[i][j]    =    0D;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    	compilable	  [FE]  AssertionFailedError  	137	2	replace
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;	  out[i][j]    =    0D;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    	compilable	  [FE]  AssertionFailedError  	137	2	replace
226	[BUG]  [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;	  out[i][j]    =    0D;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    	compilable	  [FE]  AssertionFailedError  	137	2	replace
227	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0xff;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0xff;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0xff;  }	  out[i][j]    =    0xff;    for(int    j    =    0;    j    <    nObs;    j++)    {    out[i][j]    =    0xff;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	47	None	replace
228	[BUG]  [BUGGY]  out[i][j]  =  Math.max(relativeMatrix.getEntry(i,  j));  [CE]  cannot  find  symbol  relativeMatrix  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.max(relativeMatrix.getEntry(i,  j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.max(relativeMatrix.getEntry(i,  j));	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	128	None	replace
229	[BUG]  [BUGGY]  out[i][j]  =  Math.max(out[i][j],  covarianceMatrix.getEntry(i,  j));  [CE]  cannot  find  symbol  covarianceMatrix  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.max(out[i][j],  covarianceMatrix.getEntry(i,  j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.max(out[i][j],  covarianceMatrix.getEntry(i,  j));	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	128	None	replace
230	[BUG]  [BUGGY]  out[i][j]  =  Math.max(relativeMatrix.getColumnDimension(),  0);  [CE]  cannot  find  symbol  relativeMatrix  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.max(relativeMatrix.getColumnDimension(),  0);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.max(relativeMatrix.getColumnDimension(),  0);	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	128	None	replace
231	[BUG]  [BUGGY]  out[i][j]  =  0xff;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0xf  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0xf  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0xf	  out[i][j]    =    0xff;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    0xff;    	non-compiled	[CE]  ';'  expected	147	None	replace
232	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  ';'  expected	108	None	add
233	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	108	None	add
234	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0D;  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0D;  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j]  =  0D;  int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  ';'  expected	108	None	add
235	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	108	None	add
236	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0D;  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0D;  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j]  =  0D;  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  ';'  expected	108	None	add
237	[BUG]  [BUGGY]  double[][]  out  =  new  double[nVars][j  -  2];  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nVars][j  -  2];  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nVars][j  -  2];	  double[][]    out    =    new    double[nVars][j    -    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	73	None	replace
238	[BUG]  [BUGGY]  double[][]  out  =  new  double[nVars][j  +  1];  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nVars][j  +  1];  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nVars][j  +  1];	  double[][]    out    =    new    double[nVars][j    -    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	73	None	replace
239	[BUG]  [BUGGY]  double[][]  out  =  new  double[nVars][j  /  1];  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                      AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nVars][j  /  1];  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nVars][j  /  1];	  double[][]    out    =    new    double[nVars][j    -    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	73	None	replace
240	[BUG]  [BUGGY]  double[][]  out  =  new  double[nObs][0];  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nObs][0];  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nObs][0];	  double[][]    out    =    new    double[nVars][0];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	134	None	replace
241	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  [CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    Math.abs(correlationMatrix.getEntry(i,    j));    double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()	56	None	add
242	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  Double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  [CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  Double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    Math.abs(correlationMatrix.getEntry(i,    j));    Double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()	56	None	add
243	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  int  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  [CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  int  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    Math.abs(correlationMatrix.getEntry(i,    j));    int  d  =  Math.abs(correlationMatrix.getEntry(i,  j));	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()	56	None	add
244	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  double  d  =  Math.abs(covarianceMatrix.getEntry(i,  j));  [CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  double  d  =  Math.abs(covarianceMatrix.getEntry(i,  j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    Math.abs(correlationMatrix.getEntry(i,    j));    double  d  =  Math.abs(covarianceMatrix.getEntry(i,  j));	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()	56	None	add
245	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i  [j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i  [j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i  [j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0;  }	  out[i][j]    =    0D;    for(int    i][j]    =    0D;    i    <    nVars;    i++)    {    out[i][j]    =    0D;    }    	non-compiled	[CE]  ']'  expected	53	None	replace
246	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0D;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0D;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0D;  }	  out[i][j]    =    0D;    for(int    i][j]    =    0D;    i    <    nVars;    i++)    {    out[i][j]    =    0D;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
247	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  Integer  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  Integer  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getRowDimension();  Integer  nObs  =  correlationMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    Int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	68	None	replace
248	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    Int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	68	None	replace
249	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  Integer  nObs  =  dataMatrix.getRowDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  Integer  nObs  =  dataMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getRowDimension();  Integer  nObs  =  dataMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    Int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	68	None	replace
250	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    Int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
251	[BUG]  [BUGGY]  int  j  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  j  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  j  =  correlationMatrix.getEntry(i,  j);	  int    nObs    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	5	None	replace
252	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  dataMatrix  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getEntry(i,  j);	  int    nObs    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	5	None	replace
253	[BUG]  [BUGGY]  int  nObs  =  matrix.getEntry(i,  j);  [CE]  cannot  find  symbol  matrix  [FE]                      AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  matrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  matrix.getEntry(i,  j);	  int    nObs    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  matrix	5	None	replace
254	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  i++)  {  double[][j]  =  0;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  i++)  {  double[][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  i++)  {  double[][j]  =  0;  }	  out[i][j]    =    1;    for(int    i    =    0;    j    <    nVars;    i++)    {    double[][j]    =    1;    }    	non-compiled	[CE]  ']'  expected	101	None	replace
255	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  j  <  nVars;  i++)  {  double[][j]  =  0;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  j  <  nVars;  i++)  {  double[][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i  =  0;  j  <  nVars;  i++)  {  double[][j]  =  0;  }	  out[i][j]    =    1;    for(int    i    =    0;    j    <    nVars;    i++)    {    double[][j]    =    1;    }    	non-compiled	[CE]  ']'  expected	101	None	replace
256	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  j  <  nVars;  i++)  {  double[][j]  =  1;  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  j  <  nVars;  i++)  {  double[][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2;  for(int  i  =  0;  j  <  nVars;  i++)  {  double[][j]  =  1;  }	  out[i][j]    =    1;    for(int    i    =    0;    j    <    nVars;    i++)    {    double[][j]    =    1;    }    	non-compiled	[CE]  ']'  expected	101	None	replace
257	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    nObs    =    correlationMatrix.getEntry(i,    j);    double  nObs  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	1	None	add
258	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    nObs    =    correlationMatrix.getEntry(i,    j);    Double  nObs  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	1	None	add
259	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  covarianceMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    nObs    =    correlationMatrix.getEntry(i,    j);    double  nObs  =  covarianceMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	1	None	add
260	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  dataMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  dataMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    nObs    =    correlationMatrix.getEntry(i,    j);    double  nObs  =  dataMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	1	None	add
261	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  contributionMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  contributionMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    nObs    =    correlationMatrix.getEntry(i,    j);    double  nObs  =  contributionMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	1	None	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d  +  1;	  int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d    +    1;    	compilable	  [FE]  AssertionFailedError  	96	5	replace
263	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d  +  1;	  int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d    +    1;    	compilable	  [FE]  AssertionFailedError  	96	5	replace
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0d  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0d  +  1;	  int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d    +    1;    	compilable	  [FE]  AssertionFailedError  	96	5	replace
265	[BUG]  [BUGGY]  out[i][j]  =  0d  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0d  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0d  +  1;	  int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d    +    1;    	compilable	  [FE]  AssertionFailedError  	96	5	replace
266	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	99	None	add
267	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  out[i][j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  out[i][j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    1;    out[i][j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	99	None	add
268	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    1;    int  j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;	  	non-compiled	[CE]  ';'  expected	99	None	add
269	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  1;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    1;    int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  1;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	99	None	add
270	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	99	None	add
271	[BUG]  [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0D;  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0D;  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]  =  0D;  double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	111	None	add
272	[BUG]  [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        double    r    =    correlationMatrix.getEntry(i,    j);    double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	111	None	add
273	[BUG]  [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        double    r    =    correlationMatrix.getEntry(i,    j);    for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	111	None	add
274	[BUG]  [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        double    r    =    correlationMatrix.getEntry(i,    j);    for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  'else'  without  'if'	111	None	add
275	[BUG]  [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  j]  =  0D;  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  j]  =  0D;  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        double    r    =    correlationMatrix.getEntry(i,    j);    double  j]  =  0D;  double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  ';'  expected	111	None	add
276	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.cumulativeProbability(d),  i);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.cumulativeProbability(d),  i);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(correlationMatrix.cumulativeProbability(d),  i);	  double    d    =    Math.abs(correlationMatrix.cumulativeProbability(d));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
277	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.cumulativeProbability(d),  j);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.cumulativeProbability(d),  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(correlationMatrix.cumulativeProbability(d),  j);	  double    d    =    Math.abs(correlationMatrix.cumulativeProbability(d));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
278	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(out);  [CE]  no  suitable  method  found  for  cumulativeProbability(double[][])  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(out);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(out);	          out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(double[][])	105	None	replace
279	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(in);  [CE]  cannot  find  symbol  in  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(in);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(j)+  tDistribution.cumulativeProbability(in);	          out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  cannot  find  symbol  in	105	None	replace
280	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(out);  [CE]  no  suitable  method  found  for  cumulativeProbability(double[][])  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(out);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(out);	          out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(double[][])	105	None	replace
281	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf  +  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0xf  +  1;	  out[i][j]    =    0xf;    	compilable	  [FE]  AssertionFailedError  	83	5	replace
282	[BUG]  [BUGGY]  out[i][j]  =  0xf  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf  +  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xf  +  1;	  out[i][j]    =    0xf;    	compilable	  [FE]  AssertionFailedError  	83	5	replace
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xd;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0xd;	  out[i][j]    =    0xf;    	compilable	  [FE]  AssertionFailedError  	83	5	replace
284	[BUG]  [BUGGY]  out[i][j]  =  0xd;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xd;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xd;	  out[i][j]    =    0xf;    	compilable	  [FE]  AssertionFailedError  	83	5	replace
285	[BUG]  [BUGGY]  int  nObs  =(covarianceMatrix.getColumnDimension()  ==  0)?  correlationMatrix.getRowDimension()  :  0;  [CE]  cannot  find  symbol  covarianceMatrix  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =(covarianceMatrix.getColumnDimension()  ==  0)?  correlationMatrix.getRowDimension()  :  0;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =(covarianceMatrix.getColumnDimension()  ==  0)?  correlationMatrix.getRowDimension()  :  0;	  int    nObs    =(relativeMatrix.getColumnDimension()    ==    0)?    correlationMatrix.getRowDimension()    :    0;    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	117	None	replace
286	[BUG]  [BUGGY]  int  nObs  =(relativeMatrix.getColumnDimension()  ==  0)?  covarianceMatrix.getRowDimension()  :  0;  [CE]  cannot  find  symbol  relativeMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =(relativeMatrix.getColumnDimension()  ==  0)?  covarianceMatrix.getRowDimension()  :  0;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =(relativeMatrix.getColumnDimension()  ==  0)?  covarianceMatrix.getRowDimension()  :  0;	  int    nObs    =(relativeMatrix.getColumnDimension()    ==    0)?    correlationMatrix.getRowDimension()    :    0;    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	117	None	replace
287	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =(correlationMatrix.getColumnDimension()  ==  0)?  correlationMatrix.getRowDimension()  :  0;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	int  nObs  =(correlationMatrix.getColumnDimension()  ==  0)?  correlationMatrix.getRowDimension()  :  0;	  int    nObs    =(relativeMatrix.getColumnDimension()    ==    0)?    correlationMatrix.getRowDimension()    :    0;    	compilable	  [FE]  AssertionFailedError  	117	2	replace
288	[BUG]  [BUGGY]  int  nObs  =(correlationMatrix.getColumnDimension()  ==  0)?  correlationMatrix.getRowDimension()  :  0;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =(correlationMatrix.getColumnDimension()  ==  0)?  correlationMatrix.getRowDimension()  :  0;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =(correlationMatrix.getColumnDimension()  ==  0)?  correlationMatrix.getRowDimension()  :  0;	  int    nObs    =(relativeMatrix.getColumnDimension()    ==    0)?    correlationMatrix.getRowDimension()    :    0;    	compilable	  [FE]  AssertionFailedError  	117	2	replace
289	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  out[i][j]  =  0xf;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    0xf;    out[i][j]  =  0xf;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
290	[BUG]  [BUGGY]  out[i][j]  =  0xf;  out[i][j]  =  0xf;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  out[i][j]  =  0xf;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    out[i][j]  =  0xf;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
291	[BUG]  [BUGGY]  out[i][j]  =  0xf;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	82	None	add
292	[BUG]  [BUGGY]  out[i][j]  =  0xf;  for(int  i][j]  =  0xf;  i  <  nObs;  i++)  {  out[i][j]  =  0xf;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  for(int  i][j]  =  0xf;  i  <  nObs;  i++)  {  out[i][j]  =  0xf;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    for(int  i][j]  =  0xf;  i  <  nObs;  i++)  {  out[i][j]  =  0xf;  }	  	non-compiled	[CE]  ';'  expected	82	None	add
293	[BUG]  [BUGGY]  out[i][j]  =  0xf;  for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0xf;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0xf;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0xf;  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	82	None	add
294	[BUG]  [BUGGY]  out[i][j]  =  0xf;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;	  	non-compiled	[CE]  'else'  without  'if'	82	None	add
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  double  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0xff;  double  nObs  =  correlationMatrix.getEntry(i,  j);	  out[i][j]    =    0xff;    int    nObs    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  AssertionFailedError  	93	5	replace
296	[BUG]  [BUGGY]  out[i][j]  =  0xff;  double  nObs  =  correlationMatrix.getEntry(i,  j);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  double  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  double  nObs  =  correlationMatrix.getEntry(i,  j);	  out[i][j]    =    0xff;    int    nObs    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  AssertionFailedError  	93	5	replace
297	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getDoubleDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  covarianceMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  covarianceMatrix.getDoubleDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  covarianceMatrix.getDoubleDimension();  out[i][j]  =  0d;	  int    nObs    =    correlationMatrix.getDoubleDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	142	None	replace
298	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getDoubleDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  dataMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getDoubleDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getDoubleDimension();  out[i][j]  =  0d;	  int    nObs    =    correlationMatrix.getDoubleDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	142	None	replace
299	[BUG]  [BUGGY]  int  nObs  =  i.getDoubleDimension();  out[i][j]  =  0d;  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  i.getDoubleDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  i.getDoubleDimension();  out[i][j]  =  0d;	  int    nObs    =    correlationMatrix.getDoubleDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  int  cannot  be  dereferenced	142	None	replace
300	[BUG]  [BUGGY]  int  nObs  =  datasetMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [CE]  cannot  find  symbol  datasetMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  datasetMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  datasetMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }	  int    nObs    =    dataMatrix.getColumnDimension();    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0d;    }    	non-compiled	[CE]  cannot  find  symbol  datasetMatrix	7	None	replace
301	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  ';'  expected	97	None	add
302	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	97	None	add
303	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	97	None	add
304	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  1;  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  1;  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j]  =  1;  int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  ';'  expected	97	None	add
305	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]  =  1;  int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	97	None	add
306	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  [CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()  [FE]    MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    correlationMatrix.getEntry(i,    j    +    1);    double  d  =  correlationMatrix.getEntry(i,  j  +  1);	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()	78	None	add
307	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  double  d  =  covarianceMatrix.getEntry(i,  j  +  1);  [CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()  [FE]      MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  double  d  =  covarianceMatrix.getEntry(i,  j  +  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    correlationMatrix.getEntry(i,    j    +    1);    double  d  =  covarianceMatrix.getEntry(i,  j  +  1);	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()	78	None	add
308	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  Double  d  =  correlationMatrix.getEntry(i,  j  +  1);  [CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()  [FE]        MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  Double  d  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    correlationMatrix.getEntry(i,    j    +    1);    Double  d  =  correlationMatrix.getEntry(i,  j  +  1);	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()	78	None	add
309	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  double  d  =  correlationMatrix.getEntry(i,  j  +  1));  [CE]  ';'  expected  [FE]          MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  double  d  =  correlationMatrix.getEntry(i,  j  +  1));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    correlationMatrix.getEntry(i,    j    +    1);    double  d  =  correlationMatrix.getEntry(i,  j  +  1));	  	non-compiled	[CE]  ';'  expected	78	None	add
310	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  double  d  =  dataMatrix.getEntry(i,  j  +  1);  [CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()  [FE]            MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  double  d  =  dataMatrix.getEntry(i,  j  +  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    correlationMatrix.getEntry(i,    j    +    1);    double  d  =  dataMatrix.getEntry(i,  j  +  1);	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()	78	None	add
311	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  ';'  expected	124	None	add
312	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	124	None	add
313	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j]  =  0;  int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  ';'  expected	124	None	add
314	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	124	None	add
315	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	124	None	add
316	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	90	None	add
317	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	90	None	add
318	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    int  j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;	  	non-compiled	[CE]  ';'  expected	90	None	add
319	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  i][j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  i][j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    int  i][j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;	  	non-compiled	[CE]  ';'  expected	90	None	add
320	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	90	None	add
321	[BUG]  [BUGGY]  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j  +  1));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  d  =  Math.abs(correlationMatrix.getEntry(i,  j  +  1));	  double    d    =    Math.abs(correlationMatrix.getEntry(i,    j));    	compilable	  [FE]  MatrixIndexException  	57	7	replace
322	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j  +  1));  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j  +  1));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(correlationMatrix.getEntry(i,  j  +  1));	  double    d    =    Math.abs(correlationMatrix.getEntry(i,    j));    	compilable	  [FE]  MatrixIndexException  	57	7	replace
323	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i][j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0;  }	  out[i][j]    =    0D;    for(int    i][j]    =    0D;    j    <    nObs;    j++)    {    out[i][j]    =    0D;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
324	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0;  }	  out[i][j]    =    0D;    for(int    i][j]    =    0D;    j    <    nObs;    j++)    {    out[i][j]    =    0D;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	51	None	replace
325	[BUG]  [BUGGY]  double  d  =  congregationMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  congregationMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  congregationMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  congregationMatrix.getEntry(i,  j);	          double    d    =    correlationMatrix.getEntry(i,    j);    double    d    =    congregationMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  congregationMatrix	41	None	replace
326	[BUG]  [BUGGY]  double  d  =  contiguousMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  contiguousMatrix  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  contiguousMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  contiguousMatrix.getEntry(i,  j);	          double    d    =    correlationMatrix.getEntry(i,    j);    double    d    =    congregationMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  contiguousMatrix	41	None	replace
327	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  ';'  expected	88	None	add
328	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	88	None	add
329	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j]  =  0xff;  int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  ';'  expected	88	None	add
330	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	88	None	add
331	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0xff;  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j]  =  0xff;  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j]  =  0xff;  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  ';'  expected	88	None	add
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xdf;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0xdf;	  out[i][j]    =    0xff;    out[i][j]    =    0xff;    	compilable	  [FE]  AssertionFailedError  	43	5	replace
333	[BUG]  [BUGGY]  out[i][j]  =  0xdf;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xdf;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xdf;	  out[i][j]    =    0xff;    out[i][j]    =    0xff;    	compilable	  [FE]  AssertionFailedError  	43	5	replace
334	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  1;  }  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  1;  }	  out[i][j]    =    1;    for(int    j    =    0;    j    <    nVars;    j++)    {    double[][j]    =    1;    }    	non-compiled	[CE]  ']'  expected	122	None	replace
335	[BUG]  [BUGGY]  out[i][j]  =  0;  int  j  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  j  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  j  =  correlationMatrix.getEntry(i,  j);	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	113	None	replace
336	[BUG]  [BUGGY]  out[i][j]  =  0;  int  j  =  covarianceMatrix.getEntry(i,  j);  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  j  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  j  =  covarianceMatrix.getEntry(i,  j);	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	113	None	replace
337	[BUG]  [BUGGY]  out[i][j]  =  0;  int  j  =  dataMatrix.getEntry(i,  j);  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  j  =  dataMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  j  =  dataMatrix.getEntry(i,  j);	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	113	None	replace
338	[BUG]  [BUGGY]  double  t  =  Math.abs(relativeMatrix.cumulativeProbability(j));  [CE]  cannot  find  symbol  relativeMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  t  =  Math.abs(relativeMatrix.cumulativeProbability(j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  t  =  Math.abs(relativeMatrix.cumulativeProbability(j));	          double    t    =    Math.abs(covarianceMatrix.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	131	None	replace
339	[BUG]  [BUGGY]  double  t  =  Math.abs(covarianceMatrix.cumulativeProbability(j));  [CE]  cannot  find  symbol  covarianceMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  t  =  Math.abs(covarianceMatrix.cumulativeProbability(j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  t  =  Math.abs(covarianceMatrix.cumulativeProbability(j));	          double    t    =    Math.abs(covarianceMatrix.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	131	None	replace
340	[BUG]  [BUGGY]  double  t  =  Math.abs(r.cumulativeProbability(t));  [CE]  cannot  find  symbol  r  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  t  =  Math.abs(r.cumulativeProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  t  =  Math.abs(r.cumulativeProbability(t));	          double    t    =    Math.abs(covarianceMatrix.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol  r	131	None	replace
341	[BUG]  [BUGGY]  double  t  =  Math.abs(relativeMatrix.cumulativeProbability(t));  [CE]  cannot  find  symbol  relativeMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  t  =  Math.abs(relativeMatrix.cumulativeProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  t  =  Math.abs(relativeMatrix.cumulativeProbability(t));	          double    t    =    Math.abs(covarianceMatrix.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	131	None	replace
342	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	136	None	add
343	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	136	None	add
344	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    int  j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;	  	non-compiled	[CE]  ';'  expected	136	None	add
345	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    out[i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	136	None	add
346	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    int  i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;	  	non-compiled	[CE]  ';'  expected	136	None	add
347	[BUG]  [BUGGY]  out[i][j]  =  0xff;  int  j  =  covarianceMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  int  j  =  covarianceMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  int  j  =  covarianceMatrix.getColumnDimension();	  out[i][j]    =    0xff;    int    j    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	92	None	replace
348	[BUG]  [BUGGY]  out[i][j]  =  0xff;  int  j  =  correlationMatrix.getRowDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  int  j  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  int  j  =  correlationMatrix.getRowDimension();	  out[i][j]    =    0xff;    int    j    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	92	None	replace
349	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j);	  out[i][j]    =    0D;    double    r    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  AssertionFailedError  	112	2	replace
350	[BUG]  [BUGGY]  out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j);	  out[i][j]    =    0D;    double    r    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  AssertionFailedError  	112	2	replace
351	[BUG]  [BUGGY]  [FE]  MatrixIndexException  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j  +  1);	  out[i][j]    =    0D;    double    r    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	112	7	replace
352	[BUG]  [BUGGY]  out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j  +  1);  [FE]  MatrixIndexException  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j  +  1);	  out[i][j]    =    0D;    double    r    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	112	7	replace
353	[BUG]  [BUGGY]  [FE]  MatrixIndexException  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j-1);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j-1);	  out[i][j]    =    0D;    double    r    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	112	7	replace
354	[BUG]  [BUGGY]  out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j-1);  [FE]  MatrixIndexException  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j-1);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  double  r  =  correlationMatrix.getEntry(i,  j-1);	  out[i][j]    =    0D;    double    r    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	112	7	replace
355	[BUG]  [BUGGY]  out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  j++)  {  double[][j]  =  0;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  j++)  {  double[][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  j++)  {  double[][j]  =  0;  }	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    j++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	120	None	replace
356	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  i  <  nObs;  j++)  {  double[][j]  =  0;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  i  <  nObs;  j++)  {  double[][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i  =  0;  i  <  nObs;  j++)  {  double[][j]  =  0;  }	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    j++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	120	None	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0D;  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0D;	  	compilable	  [FE]  AssertionFailedError  	49	2	add
358	[BUG]  [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0D;  out[i][j]  =  0D;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0D;  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0D;	  	compilable	  [FE]  AssertionFailedError  	49	2	add
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0;  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0;  out[i][j]  =  0D;	  	compilable	  [FE]  AssertionFailedError  	49	2	add
360	[BUG]  [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0;  out[i][j]  =  0D;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0;  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0;  out[i][j]  =  0D;	  	compilable	  [FE]  AssertionFailedError  	49	2	add
361	[BUG]  [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0M;  out[i][j]  =  0D;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0M;  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0M;  out[i][j]  =  0D;	  	non-compiled	[CE]  ';'  expected	49	None	add
362	[BUG]  [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0S;  out[i][j]  =  0S;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0S;  out[i][j]  =  0S;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0S;  out[i][j]  =  0S;	  	non-compiled	[CE]  ';'  expected	49	None	add
363	[BUG]  [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0E;  out[i][j]  =  0D;  [CE]  malformed  floating  point  literal  [FE]            AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0E;  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0E;  out[i][j]  =  0D;	  	non-compiled	[CE]  malformed  floating  point  literal	49	None	add
364	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j),  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j),  tDistribution.cumulativeProbability(t));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j),  tDistribution.cumulativeProbability(t));	          double    d    =    correlationMatrix.getEntry(i,    j);    double    d    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  ';'  expected	39	None	replace
365	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int    nObs    =    correlationMatrix.getRowDimension();    out[i][j]    =    0d;    int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	84	None	add
366	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int    nObs    =    correlationMatrix.getRowDimension();    out[i][j]    =    0d;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	84	None	add
367	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  int  nObs  =  covarianceMatrix.getRowDimension();  out[i][j]  =  0d;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  int  nObs  =  covarianceMatrix.getRowDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int    nObs    =    correlationMatrix.getRowDimension();    out[i][j]    =    0d;    int  nObs  =  covarianceMatrix.getRowDimension();  out[i][j]  =  0d;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	84	None	add
368	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  Int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  Int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int    nObs    =    correlationMatrix.getRowDimension();    out[i][j]    =    0d;    Int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0d;	  	non-compiled	[CE]  cannot  find  symbol	84	None	add
369	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)/  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)/  tDistribution.cumulativeProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(t)/  tDistribution.cumulativeProbability(t));	          out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	48	None	replace
370	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)+  covarianceMatrix.cumulativeProbability(t));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)+  covarianceMatrix.cumulativeProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(t)+  covarianceMatrix.cumulativeProbability(t));	          out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	48	None	replace
371	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)+  tDistribution.cumulativeProbability(j));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)+  tDistribution.cumulativeProbability(j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(t)+  tDistribution.cumulativeProbability(j));	          out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	48	None	replace
372	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  1;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  1;  }	  out[i][j]    =    1;    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    1;    }    	non-compiled	[CE]  ']'  expected	102	None	replace
373	[BUG]  [BUGGY]  out[i][j]  =  1;  for(int  i  =  0;  i  <  nObs;  i++)  {  double[][j]  =  1;  }  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1;  for(int  i  =  0;  i  <  nObs;  i++)  {  double[][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1;  for(int  i  =  0;  i  <  nObs;  i++)  {  double[][j]  =  1;  }	  out[i][j]    =    1;    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    1;    }    	non-compiled	[CE]  ']'  expected	102	None	replace
374	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  i  <  nObs;  i++)  {  double  out[i][j]  =  0;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  i  <  nObs;  i++)  {  double  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i  =  0;  i  <  nObs;  i++)  {  double  out[i][j]  =  0;  }	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    i++)    {    double    out[i][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	119	None	replace
375	[BUG]  [BUGGY]  out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  i++)  {  double  out[i][j]  =  0;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  i++)  {  double  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  i++)  {  double  out[i][j]  =  0;  }	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    i++)    {    double    out[i][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	119	None	replace
376	[BUG]  [BUGGY]  out[i][j]  =  0.0;  for(int  i  =  0;  i  <  nVars;  i++)  {  double  out[i][j]  =  0.0;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0.0;  for(int  i  =  0;  i  <  nVars;  i++)  {  double  out[i][j]  =  0.0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0.0;  for(int  i  =  0;  i  <  nVars;  i++)  {  double  out[i][j]  =  0.0;  }	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    i++)    {    double    out[i][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	119	None	replace
377	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(out,  j);  [CE]  no  suitable  method  found  for  cumulativeProbability(double[][],int)  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.cumulativeProbability(out,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.cumulativeProbability(out,  j);	          tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(double[][],int)	103	None	replace
378	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(t,  out);  [CE]  cannot  find  symbol  t  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.cumulativeProbability(t,  out);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.cumulativeProbability(t,  out);	          tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  cannot  find  symbol  t	103	None	replace
379	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(out,  i);  [CE]  no  suitable  method  found  for  cumulativeProbability(double[][],int)  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.cumulativeProbability(out,  i);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.cumulativeProbability(out,  i);	          tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(double[][],int)	103	None	replace
380	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(j,  out);  [CE]  no  suitable  method  found  for  cumulativeProbability(int,double[][])  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.cumulativeProbability(j,  out);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.cumulativeProbability(j,  out);	          tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(int,double[][])	103	None	replace
381	[BUG]  [BUGGY]  double[][]  out  =  new  double[2][nVars][j].doubleValue();  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[2][nVars][j].doubleValue();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[2][nVars][j].doubleValue();	  double[][]    out    =    new    double[nVars][j].doubleValue();    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	107	None	replace
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(tDistribution.cumulativeProbability(nVars));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  d  =  Math.abs(tDistribution.cumulativeProbability(nVars));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	29	2	replace
383	[BUG]  [BUGGY]  double  d  =  Math.abs(tDistribution.cumulativeProbability(nVars));  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(tDistribution.cumulativeProbability(nVars));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(tDistribution.cumulativeProbability(nVars));	  double    d    =    Math.abs(tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	29	2	replace
384	[BUG]  [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  OutputMatrix  out[i][j]  =  0;  out[i][j]  =  0;  [CE]  ']'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  OutputMatrix  out[i][j]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        out[i][j]    =    0;    OutputMatrix  out[i][j]  =  0;  out[i][j]  =  0;	  	non-compiled	[CE]  ']'  expected	18	None	add
385	[BUG]  [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  0,  out[i][j]  =  0;  out[i][j]  =  0;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  0,  out[i][j]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        out[i][j]    =    0;    out[i][j]  =  0,  out[i][j]  =  0;  out[i][j]  =  0;	  	non-compiled	[CE]  ';'  expected	18	None	add
386	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	62	None	replace
387	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  covarianceMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	62	None	replace
388	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  dataMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  dataMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	62	None	replace
389	[BUG]  [BUGGY]  out[i][j]  =  0.0;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0.0;  }  [CE]  ']'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0.0;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0.0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0.0;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0.0;  }	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	118	None	replace
390	[BUG]  [BUGGY]  double  d  =  Math.abs(combineMatrix.cumulativeProbability(j));  [CE]  cannot  find  symbol  combineMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(combineMatrix.cumulativeProbability(j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(combineMatrix.cumulativeProbability(j));	  double    d    =    Math.abs(relativeMatrix.cumulativeProbability(j));    	non-compiled	[CE]  cannot  find  symbol  combineMatrix	69	None	replace
391	[BUG]  [BUGGY]  out[i][j]  =  0;  double  r  =  covarianceMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  double  r  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  double  r  =  covarianceMatrix.getEntry(i,  j);	  out[i][j]    =    0D;    double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	112	None	replace
392	[BUG]  [BUGGY]  int  nObs  =  matrix.getDoubleDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  matrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  matrix.getDoubleDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  matrix.getDoubleDimension();  out[i][j]  =  0d;	  int    nObs    =    correlationMatrix.getDoubleDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  matrix	142	None	replace
393	[BUG]  [BUGGY]  out[i][j]  =  1;  for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1;  for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1;  for(int  j]  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0;  }	  out[i][j]    =    0;    for(int    j]    =    0;    j    <    nObs;    j++)    {    out[i][j]    =    0;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
394	[BUG]  [BUGGY]  out[i][j]  =  1;  for(int  j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1;  for(int  j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1;  for(int  j]  =  0;  j  <  nObs;  j++)  {  out[i][j]  =  0;  }	  out[i][j]    =    0;    for(int    j]    =    0;    j    <    nObs;    j++)    {    out[i][j]    =    0;    }    	non-compiled	[CE]  ';'  expected	20	None	replace
395	[BUG]  [BUGGY]  out[0][j]  =  0;  for(int  i][j]  =  0;  i  <  nObs;  i++)  {  out[i][j]  =  0;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[0][j]  =  0;  for(int  i][j]  =  0;  i  <  nObs;  i++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[0][j]  =  0;  for(int  i][j]  =  0;  i  <  nObs;  i++)  {  out[i][j]  =  0;  }	  out[i][j]    =    0D;    for(int    i][j]    =    0D;    i    <    nObs;    i++)    {    out[i][j]    =    0D;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
396	[BUG]  [BUGGY]  double  d  =  matrixMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  matrixMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  matrixMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  matrixMatrix.getEntry(i,  j);	          double    d    =    correlationMatrix.getEntry(i,    j);    double    d    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  matrixMatrix	39	None	replace
397	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  Out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  [CE]  cannot  find  symbol  Out  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  Out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    Out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);	  	non-compiled	[CE]  cannot  find  symbol  Out	115	None	add
398	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  int  j  =  correlationMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  int  j  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    int  j  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	115	None	add
399	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  OutputMatrix  tDistribution  =  new  OutputMatrix(out,  i);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  OutputMatrix  tDistribution  =  new  OutputMatrix(out,  i);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    OutputMatrix  tDistribution  =  new  OutputMatrix(out,  i);	  	non-compiled	[CE]  cannot  find  symbol	115	None	add
400	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  int  j  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  int  j  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    int  j  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	115	None	add
401	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(nVars)+  tDistribution.cumulativeProbability(tDistribution);  [CE]  no  suitable  method  found  for  cumulativeProbability(TDistribution)  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(nVars)+  tDistribution.cumulativeProbability(tDistribution);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(nVars)+  tDistribution.cumulativeProbability(tDistribution);	          out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(TDistribution)	105	None	replace
402	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(distribution)+  tDistribution.cumulativeProbability(j);  [CE]  cannot  find  symbol  distribution  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(distribution)+  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(distribution)+  tDistribution.cumulativeProbability(j);	          out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  cannot  find  symbol  distribution	105	None	replace
403	[BUG]  [BUGGY]  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j  -  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  nObs  =  correlationMatrix.getEntry(i,  j  -  1);	  double    nObs    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	2	7	replace
404	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j  -  1);  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j  -  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  nObs  =  correlationMatrix.getEntry(i,  j  -  1);	  double    nObs    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	2	7	replace
405	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0	  	non-compiled	[CE]  ';'  expected	136	None	add
406	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	136	None	add
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    3;    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	63	2	add
408	[BUG]  [BUGGY]  out[i][j]  =  3;  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	63	2	add
409	[BUG]  [BUGGY]  out[i][j]  =  3;  int  nObs  =  correlationMatrix.getEntry(i,  j);  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  int  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    int  nObs  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  possible  loss  of  precision	63	None	add
410	[BUG]  [BUGGY]  out[i][j]  =  3;  int  j  =  correlationMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  int  j  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    int  j  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	63	None	add
411	[BUG]  [BUGGY]  out[i][j]  =  3;  OutputMatrix  out[i][j]  =  3;  [CE]  ']'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  OutputMatrix  out[i][j]  =  3;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    OutputMatrix  out[i][j]  =  3;	  	non-compiled	[CE]  ']'  expected	63	None	add
412	[BUG]  [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  congregationMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j);  Double  nObs  =  congregationMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double    nObs    =    correlationMatrix.getEntry(i,    j);    Double  nObs  =  congregationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	3	None	add
413	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    n    *    j)));    	non-compiled	[CE]  cannot  find  symbol  n	12	None	replace
414	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(i);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(i);	  out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t);    	compilable	  [FE]  AssertionFailedError  	13	5	replace
415	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(i);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(i);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(i);	  out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t);    	compilable	  [FE]  AssertionFailedError  	13	5	replace
416	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(nVars)+  tDistribution.cumulativeProbability(t);  [CE]  cannot  find  symbol  t  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(nVars)+  tDistribution.cumulativeProbability(t);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(nVars)+  tDistribution.cumulativeProbability(t);	  out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t);    	non-compiled	[CE]  cannot  find  symbol  t	13	None	replace
417	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)+  tDistribution.cumulativeProbability(j);  [CE]  cannot  find  symbol  t  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)+  tDistribution.cumulativeProbability(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(t)+  tDistribution.cumulativeProbability(j);	  out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t);    	non-compiled	[CE]  cannot  find  symbol  t	13	None	replace
418	[BUG]  [BUGGY]  out[i][j]  =  Math.min(relativeMatrix.getEntry(i,  j));  [CE]  cannot  find  symbol  relativeMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.min(relativeMatrix.getEntry(i,  j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.min(relativeMatrix.getEntry(i,  j));	  out[i][j]    =    0;    for(int    j]    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0;    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	23	None	replace
419	[BUG]  [BUGGY]  out[i][j]  =  Math.min(covarianceMatrix.getEntry(i,  j));  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.min(covarianceMatrix.getEntry(i,  j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.min(covarianceMatrix.getEntry(i,  j));	  out[i][j]    =    0;    for(int    j]    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0;    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	23	None	replace
420	[BUG]  [BUGGY]  double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  out);  [CE]  cannot  find  symbol  relativeMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  out);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  out);	  double    d    =    Math.abs(covarianceMatrix.getEntry(i,    j),    correlationMatrix);    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	149	None	replace
421	[BUG]  [BUGGY]  double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  dataMatrix);  [CE]  cannot  find  symbol  relativeMatrix  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  dataMatrix);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(relativeMatrix.getEntry(i,  j),  dataMatrix);	  double    d    =    Math.abs(covarianceMatrix.getEntry(i,    j),    correlationMatrix);    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	149	None	replace
422	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  comparisonMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  comparisonMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    r    =    correlationMatrix.getEntry(i,    j);    double  r  =  comparisonMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	9	None	add
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    0xf;    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	82	2	add
424	[BUG]  [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	82	2	add
425	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xf;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    0xf;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xf;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
426	[BUG]  [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xf;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xf;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xf;	  	compilable	  [FE]  AssertionFailedError  	82	2	add
427	[BUG]  [BUGGY]  out[i][j]  =  0xf;  int  j  =  correlationMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  int  j  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    int  j  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	82	None	add
428	[BUG]  [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getEntry(i,  j);  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    int  nObs  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  possible  loss  of  precision	82	None	add
429	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [CE]  cannot  find  symbol  dataMatrix  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getRowDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }	  int    nObs    =    correlationMatrix.getRowDimension();    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0d;    }    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	8	None	replace
430	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  Doppel  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  Doppel  d  =  Math.abs(correlationMatrix.getEntry(i,  j));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    Math.abs(correlationMatrix.getEntry(i,    j));    Doppel  d  =  Math.abs(correlationMatrix.getEntry(i,  j));	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
431	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  2;  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    1;    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	98	5	replace
432	[BUG]  [BUGGY]  out[i][j]  =  2;  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2;  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    1;    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	98	5	replace
433	[BUG]  [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(t)+  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(t)+  tDistribution.cumulativeProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2  *  tDistribution.cumulativeProbability(t)+  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2;    	non-compiled	[CE]  ';'  expected	17	None	replace
434	[BUG]  [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  j]  =  0D;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        double    r    =    correlationMatrix.getEntry(i,    j);    double  j]  =  0D;	  	non-compiled	[CE]  ';'  expected	111	None	add
435	[BUG]  [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  j  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  j  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        double    r    =    correlationMatrix.getEntry(i,    j);    double  j  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	111	None	add
436	[BUG]  [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  Double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  Double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        double    r    =    correlationMatrix.getEntry(i,    j);    Double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	111	None	add
437	[BUG]  [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  correlationMatrix.getEntry(0,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  correlationMatrix.getEntry(0,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        double    r    =    correlationMatrix.getEntry(i,    j);    double  r  =  correlationMatrix.getEntry(0,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	111	None	add
438	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  [CE]  cannot  find  symbol  dataMatrix  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  out[i][j]  =  0d  +  1;	  int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d    +    1;    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	96	None	replace
439	[BUG]  [BUGGY]  double  d  =  Math.abs(relativeMatrix.cumulativeProbability(i));  [CE]  cannot  find  symbol  relativeMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(relativeMatrix.cumulativeProbability(i));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(relativeMatrix.cumulativeProbability(i));	  double    d    =    Math.abs(covarianceMatrix.cumulativeProbability(i));    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	28	None	replace
440	[BUG]  [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  Out[i][j]  =  0xff;  out[i][j]  =  0xff;  [CE]  cannot  find  symbol  Out  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  Out[i][j]  =  0xff;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        out[i][j]    =    0xff;    Out[i][j]  =  0xff;  out[i][j]  =  0xff;	  	non-compiled	[CE]  cannot  find  symbol  Out	42	None	add
441	[BUG]  [BUGGY]  out[0][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[0][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[0][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0;  }	  out[i][j]    =    0D;    for(int    i][j]    =    0D;    i    <    nVars;    i++)    {    out[i][j]    =    0D;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
442	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  1;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i][j]  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  1;  }	  out[i][j]    =    0D;    for(int    i][j]    =    0D;    i    <    nVars;    i++)    {    out[i][j]    =    0D;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
443	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	124	None	add
444	[BUG]  [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(t);  [CE]  cannot  find  symbol  t  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(t);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2  *  tDistribution.cumulativeProbability(t);	  out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    	non-compiled	[CE]  cannot  find  symbol  t	116	None	replace
445	[BUG]  [BUGGY]  double[][]  out  =  new  double[nVars][j  -  3];  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nVars][j  -  3];  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nVars][j  -  3];	  double[][]    out    =    new    double[nVars][j    -    1];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	73	None	replace
446	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getRowDimension();  int  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	66	None	replace
447	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	97	None	add
448	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  1;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  1;  }	  out[i][j]    =    1;    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    1;    }    	non-compiled	[CE]  ']'  expected	102	None	replace
449	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j,  out);  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j,  out);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j,  out);	  double    d    =    correlationMatrix.getEntry(i,    j,    nVars);    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	81	None	replace
450	[BUG]  [BUGGY]  double  d  =  covarianceMatrix.getEntry(i,  j,  nVars);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  covarianceMatrix.getEntry(i,  j,  nVars);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  covarianceMatrix.getEntry(i,  j,  nVars);	  double    d    =    correlationMatrix.getEntry(i,    j,    nVars);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	81	None	replace
451	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	88	None	add
452	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getRowDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	88	None	add
453	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  Int  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  Int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getRowDimension();  Int  nObs  =  correlationMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    Int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	68	None	replace
454	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  Int  nObs  =  dataMatrix.getRowDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getRowDimension();  Int  nObs  =  dataMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getRowDimension();  Int  nObs  =  dataMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    Int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	68	None	replace
455	[BUG]  [BUGGY]  double  r  =  this.covarianceMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  this.covarianceMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  r  =  this.covarianceMatrix.getEntry(i,  j);	  double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	10	None	replace
456	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  congregationMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i,  j);  double  nObs  =  congregationMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    nObs    =    correlationMatrix.getEntry(i,    j);    double  nObs  =  congregationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	1	None	add
457	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  j  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1;  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  j  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    for(int  i  =  0;  j  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	16	None	add
458	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  j  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  j  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    for(int  i  =  0;  j  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  'else'  without  'if'	16	None	add
459	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1;  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	16	None	add
460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0x3f;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0x3f;	  out[i][j]    =    0xc0;    	compilable	  [FE]  AssertionFailedError  	145	5	replace
461	[BUG]  [BUGGY]  out[i][j]  =  0x3f;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0x3f;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0x3f;	  out[i][j]    =    0xc0;    	compilable	  [FE]  AssertionFailedError  	145	5	replace
462	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0x7F;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0x7F;	  out[i][j]    =    0xc0;    	compilable	  [FE]  AssertionFailedError  	145	5	replace
463	[BUG]  [BUGGY]  out[i][j]  =  0x7F;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0x7F;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0x7F;	  out[i][j]    =    0xc0;    	compilable	  [FE]  AssertionFailedError  	145	5	replace
464	[BUG]  [BUGGY]  double  d  =  Math.abs(covarianceMatrix.cumulativeProbability(j),  i);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(covarianceMatrix.cumulativeProbability(j),  i);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(covarianceMatrix.cumulativeProbability(j),  i);	  double    d    =    Math.abs(correlationMatrix.cumulativeProbability(j));    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	30	None	replace
465	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  0);  [CE]  no  suitable  method  found  for  abs(double,int)  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  0);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  0);	  double    d    =    Math.abs(correlationMatrix.getEntry(i,    j));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,int)	57	None	replace
466	[BUG]  [BUGGY]  int  nObs  =  this.covarianceMatrix.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  this.covarianceMatrix.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  this.covarianceMatrix.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }	  int    nObs    =    correlationMatrix.getEntryDimension();    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0d;    }    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	106	None	replace
467	[BUG]  [BUGGY]  Double  nObs  =  this.covarianceMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  this.covarianceMatrix.getEntry(i,  j);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double  nObs  =  this.covarianceMatrix.getEntry(i,  j);	  Double    nObs    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	4	None	replace
468	[BUG]  [BUGGY]  out[i][j]  =  0;  int  nObs  =  dataMatrix.getColumnDimension();  out[i][j]  =  0;  [CE]  cannot  find  symbol  dataMatrix  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  nObs  =  dataMatrix.getColumnDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  nObs  =  dataMatrix.getColumnDimension();  out[i][j]  =  0;	  out[i][j]    =    0D;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	137	None	replace
469	[BUG]  [BUGGY]  double[][]  out  =  new  double[nVars][1];  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nVars][1];  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nVars][1];	  double[][]    out    =    new    double[nVars][0];    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	134	None	replace
470	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(out[i][j]));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.cumulativeProbability(out[i][j]));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.cumulativeProbability(out[i][j]));	          tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	130	None	replace
471	[BUG]  [BUGGY]  tDistribution.setColumnDimension(j);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.setColumnDimension(j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.setColumnDimension(j);	          tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
472	[BUG]  [BUGGY]  tDistribution.clearProbability(t));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.clearProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.clearProbability(t));	          tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	130	None	replace
473	[BUG]  [BUGGY]  out[i][j]  =  0L;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	14	None	add
474	[BUG]  [BUGGY]  out[i][j]  =  0L;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;	  	non-compiled	[CE]  'else'  without  'if'	14	None	add
475	[BUG]  [BUGGY]  out[i][j]  =  0L;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  'else'  without  'if'	14	None	add
476	[BUG]  [BUGGY]  out[i][j]  =  0L;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    for(int  i  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0	  	non-compiled	[CE]  ';'  expected	14	None	add
477	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  int  nObs  =  dataMatrix.getRowDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  int  nObs  =  dataMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  int  nObs  =  dataMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	61	None	replace
478	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  covarianceMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	61	None	replace
479	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	90	None	add
480	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	90	None	add
481	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getColumnDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	108	None	add
482	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getRowDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  j  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    int  j  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	108	None	add
483	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  Integer  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  Integer  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    1;    Integer  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	99	None	add
484	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    1;    int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	99	None	add
485	[BUG]  [BUGGY]  out[i][j]  =  0xff;  for(int  i][j]  =  0xff;  i  <  nVars;  i++)  {  out[i][j]  =  0xff;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  for(int  i][j]  =  0xff;  i  <  nVars;  i++)  {  out[i][j]  =  0xff;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  for(int  i][j]  =  0xff;  i  <  nVars;  i++)  {  out[i][j]  =  0xff;  }	  out[i][j]    =    0xff;    for(int    i][j]    =    0xff;    i    <    nObs;    i++)    {    out[i][j]    =    0xff;    }    	non-compiled	[CE]  ';'  expected	45	None	replace
486	[BUG]  [BUGGY]  double  d  =  Math.abs(covarianceMatrix.getEntry(i,  j),  out);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(covarianceMatrix.getEntry(i,  j),  out);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(covarianceMatrix.getEntry(i,  j),  out);	  double    d    =    Math.abs(covarianceMatrix.getEntry(i,    j),    nVars);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	58	None	replace
487	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  out);  [CE]  no  suitable  method  found  for  abs(double,double[][])  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  out);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  out);	  double    d    =    Math.abs(covarianceMatrix.getEntry(i,    j),    nVars);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double[][])	58	None	replace
488	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));	          out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars)));    	compilable	  [FE]  AssertionFailedError  	104	2	replace
489	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));	          out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars)));    	compilable	  [FE]  AssertionFailedError  	104	2	replace
490	[BUG]  [BUGGY]  out[i][j]  =  0.0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  0.0;  }  [CE]  ']'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0.0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  0.0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0.0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  0.0;  }	  out[i][j]    =    0;    for(int    j    =    0;    j    <    nVars;    j++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	126	None	replace
491	[BUG]  [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getEntry(i,  j);  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  nObs  =  correlationMatrix.getEntry(i,  j);	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  possible  loss  of  precision	125	None	replace
492	[BUG]  [BUGGY]  int  nObs  =  matrix.getEntryDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  matrix  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  matrix.getEntryDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  matrix.getEntryDimension();  out[i][j]  =  0d;	  int    nObs    =    correlationMatrix.getEntryDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  matrix	141	None	replace
493	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    int  i][j]  =  0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;	  	non-compiled	[CE]  ';'  expected	127	None	add
494	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  Integer  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  Integer  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    Integer  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	127	None	add
495	[BUG]  [BUGGY]  out[i][j]  =  1;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  'else'  without  'if'  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);	  out[i][j]    =    0D;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
496	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  covarianceMatrix.getEntry(i,  j);  [CE]  'else'  without  'if'  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  covarianceMatrix.getEntry(i,  j);	  out[i][j]    =    0D;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  'else'  without  'if'	138	None	replace
497	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(nVars);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  tDistribution.cumulativeProbability(nVars);	  out[i][j]    =    tDistribution.cumulativeProbability(t);    	compilable	  [FE]  AssertionFailedError  	11	5	replace
498	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(nVars);  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(nVars);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(nVars);	  out[i][j]    =    tDistribution.cumulativeProbability(t);    	compilable	  [FE]  AssertionFailedError  	11	5	replace
499	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  1;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[][j]  =  1;	  out[i][j]    =    1;    for(int    j    =    0;    j    <    nVars;    j++)    {    double[][j]    =    1;    	non-compiled	[CE]  ']'  expected	36	None	replace
500	[BUG]  [BUGGY]  out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  j++)  {  double[][j]  =  1;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  j++)  {  double[][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  1;  for(int  i  =  0;  i  <  nVars;  j++)  {  double[][j]  =  1;  }	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    j++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	120	None	replace
501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    0xc0;    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	144	2	add
502	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	144	2	add
503	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xc0;  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xc0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xc0;	  	non-compiled	[CE]  'else'  without  'if'	144	None	add
504	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xc0;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xc0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xc0;  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	144	None	add
505	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xc0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    0xc0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xc0;	  	compilable	  [FE]  AssertionFailedError  	144	2	add
506	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xc0;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xc0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xc0;	  	compilable	  [FE]  AssertionFailedError  	144	2	add
507	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1;  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	16	None	add
508	[BUG]  [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  'else'  without  'if'	16	None	add
509	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    2;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2;	  	compilable	  [FE]  AssertionFailedError  	16	2	add
510	[BUG]  [BUGGY]  out[i][j]  =  2;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    2;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2;	  	compilable	  [FE]  AssertionFailedError  	16	2	add
511	[BUG]  [BUGGY]  int  nObs  =  datasetMatrix.getRowDimension();  [CE]  cannot  find  symbol  datasetMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  datasetMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  datasetMatrix.getRowDimension();	  int    nObs    =    covarianceMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  datasetMatrix	26	None	replace
512	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getEntryDimension();  out[i][j]  =  0xff;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getEntryDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getEntryDimension();  out[i][j]  =  0xff;	  out[i][j]    =    0xff;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;	  out[i][j]    =    0xff;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    	compilable	  [FE]  AssertionFailedError  	91	5	replace
514	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0xff;	  out[i][j]    =    0xff;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    	compilable	  [FE]  AssertionFailedError  	91	5	replace
515	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getRowDimension();  Int  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  covarianceMatrix.getRowDimension();  Int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  covarianceMatrix.getRowDimension();  Int  nObs  =  correlationMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    Int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	68	None	replace
516	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  covarianceMatrix.getEntry(i,  j);  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  covarianceMatrix.getEntry(i,  j);  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  covarianceMatrix.getEntry(i,  j);  }	  out[i][j]    =    0D;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	138	None	replace
517	[BUG]  [BUGGY]  out[i][j]  =  0xdf;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xff;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xdf;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xff;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xdf;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xff;  }	  out[i][j]    =    0xff;    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0xff;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	44	None	replace
518	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(t);  [CE]  cannot  find  symbol  t  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.cumulativeProbability(t);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.cumulativeProbability(t);	          tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  cannot  find  symbol  t	103	None	replace
519	[BUG]  [BUGGY]  [FE]  MatrixIndexException  [FE]    MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  -  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  d  =  correlationMatrix.getEntry(i,  j  -  1);	  double    d    =    correlationMatrix.getEntry(i,    j    +    1);    	compilable	  [FE]  MatrixIndexException  	79	7	replace
520	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  -  1);  [FE]  MatrixIndexException  [FE]    MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  -  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j  -  1);	  double    d    =    correlationMatrix.getEntry(i,    j    +    1);    	compilable	  [FE]  MatrixIndexException  	79	7	replace
521	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j)+  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	double  d  =  correlationMatrix.getEntry(i,  j)+  1;	  double    d    =    correlationMatrix.getEntry(i,    j    +    1);    	compilable	  [FE]  AssertionFailedError  	79	2	replace
522	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j)+  1;  [FE]  AssertionFailedError  [FE]      MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j)+  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j)+  1;	  double    d    =    correlationMatrix.getEntry(i,    j    +    1);    	compilable	  [FE]  AssertionFailedError  	79	2	replace
523	[BUG]  [BUGGY]  double  d  =  Math.abs(relationMatrix.cumulativeProbability(d));  [CE]  cannot  find  symbol  relationMatrix  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(relationMatrix.cumulativeProbability(d));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(relationMatrix.cumulativeProbability(d));	  double    d    =    Math.abs(correlationMatrix.cumulativeProbability(d));    	non-compiled	[CE]  cannot  find  symbol  relationMatrix	71	None	replace
524	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	108	None	add
525	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	108	None	add
526	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0;  }	  out[i][j]    =    1;    for(int    j    =    0;    j    <    nObs;    j++)    {    out[i][j]    =    1;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	35	None	replace
527	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  1;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  1;  }	  out[i][j]    =    1;    for(int    j    =    0;    j    <    nObs;    j++)    {    out[i][j]    =    1;    }    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	35	None	replace
528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  3;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]    =    3;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  3;	  	compilable	  [FE]  AssertionFailedError  	63	2	add
529	[BUG]  [BUGGY]  out[i][j]  =  3;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  3;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  3;	  	compilable	  [FE]  AssertionFailedError  	63	2	add
530	[BUG]  [BUGGY]  out[i][j]  =  3;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[i][j]  =  3;  }  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[i][j]  =  3;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    for(int  j  =  0;  j  <  nVars;  j++)  {  double[i][j]  =  3;  }	  	non-compiled	[CE]  ']'  expected	63	None	add
531	[BUG]  [BUGGY]  out[i][j]  =  3;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[i][j]  =  3;  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  3;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[i][j]  =  3;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    3;    for(int  j  =  0;  j  <  nVars;  j++)  {  double[i][j]  =  3;	  	non-compiled	[CE]  ']'  expected	63	None	add
532	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j).doubleValue();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  correlationMatrix.getEntry(i,  j).doubleValue();	          double    d    =    correlationMatrix.getEntry(i,    j);    Double    d    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
533	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  covarianceMatrix);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  covarianceMatrix);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(correlationMatrix.getEntry(i,  j),  covarianceMatrix);	  double    d    =    Math.abs(correlationMatrix.getEntry(i,    j));    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	57	None	replace
534	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(in);  [CE]  cannot  find  symbol  in  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(in);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(i)+  tDistribution.cumulativeProbability(in);	          out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(out);    	non-compiled	[CE]  cannot  find  symbol  in	105	None	replace
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][0]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0;        out[i][j]    =    0;    out[i][0]  =  0;  out[i][j]  =  0;	  	compilable	  [FE]  AssertionFailedError  	18	6	add
536	[BUG]  [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][0]  =  0;  out[i][j]  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][0]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        out[i][j]    =    0;    out[i][0]  =  0;  out[i][j]  =  0;	  	compilable	  [FE]  AssertionFailedError  	18	6	add
537	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  1;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0;        out[i][j]    =    0;    out[i][j]  =  1;  out[i][j]  =  0;	  	compilable	  [FE]  AssertionFailedError  	18	2	add
538	[BUG]  [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  1;  out[i][j]  =  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  1;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        out[i][j]    =    0;    out[i][j]  =  1;  out[i][j]  =  0;	  	compilable	  [FE]  AssertionFailedError  	18	2	add
539	[BUG]  [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  0;  out[i][j].  =  0;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    out[i][j]  =  0;  out[i][j]  =  0;  out[i][j].  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        out[i][j]    =    0;    out[i][j]  =  0;  out[i][j].  =  0;	  	non-compiled	[CE]  <identifier>  expected	18	None	add
540	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  -=  0xff;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  -=  0xff;  out[i][j]  =  0xff;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
541	[BUG]  [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  -=  0xff;  out[i][j]  =  0xff;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  -=  0xff;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  -=  0xff;  out[i][j]  =  0xff;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
542	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  1;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  1;  out[i][j]  =  0xff;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
543	[BUG]  [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  1;  out[i][j]  =  0xff;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  1;  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  1;  out[i][j]  =  0xff;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
544	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0.0;  out[i][j]  =  0.0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  0.0;  out[i][j]  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
545	[BUG]  [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0.0;  out[i][j]  =  0.0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    out[i][j]  =  0xff;  out[i][j]  =  0.0;  out[i][j]  =  0.0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        out[i][j]    =    0xff;    out[i][j]  =  0.0;  out[i][j]  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	42	2	add
546	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getEntryDimension();  out[i][j]  =  0d  +  1;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getEntryDimension();  out[i][j]  =  0d  +  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getEntryDimension();  out[i][j]  =  0d  +  1;	  int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d    +    1;    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
547	[BUG]  [BUGGY]  double[][]  out  =  new  double[nVars][j].doubleValue()  -  1;  [CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][]  out  =  new  double[nVars][j].doubleValue()  -  1;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][]  out  =  new  double[nVars][j].doubleValue()  -  1;	  double[][]    out    =    new    double[nVars][j].doubleValue();    	non-compiled	[CE]  variable  out  is  already  defined  in  method  getCorrelationPValues()	107	None	replace
548	[BUG]  [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	82	None	add
549	[BUG]  [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xf;  int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xf;    int  nObs  =  correlationMatrix.getColumnDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0xf;	  	non-compiled	[CE]  'else'  without  'if'	82	None	add
550	[BUG]  [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  covarianceMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  covarianceMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        double    r    =    correlationMatrix.getEntry(i,    j);    double  r  =  covarianceMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	111	None	add
551	[BUG]  [BUGGY]  Int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d;	          int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d;    Int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
552	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i).getColumnDimension();  [CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  nObs  =  correlationMatrix.getEntry(i).getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  nObs  =  correlationMatrix.getEntry(i).getColumnDimension();	  int    nObs    =    correlationMatrix.getEntry(i).getColumnDimension();    	non-compiled	[CE]  method  getEntry  in  interface  RealMatrix  cannot  be  applied  to  given  types;	139	None	replace
553	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xd0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0xd0;	  out[i][j]    =    0xc0;    	compilable	  [FE]  AssertionFailedError  	145	5	replace
554	[BUG]  [BUGGY]  out[i][j]  =  0xd0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xd0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xd0;	  out[i][j]    =    0xc0;    	compilable	  [FE]  AssertionFailedError  	145	5	replace
555	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)+  covarianceMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  t  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(t)+  covarianceMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(t)+  covarianceMatrix.getEntry(i,  j);	  out[i][j]    =    0xff;    for(int    i    =    0;    j    <    nVars;    j++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    0xff;    	non-compiled	[CE]  cannot  find  symbol  t	147	None	replace
556	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(covarianceMatrix.getEntry(i,  j));  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(covarianceMatrix.getEntry(i,  j));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(covarianceMatrix.getEntry(i,  j));	  out[i][j]    =    0;    for(int    j]    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0;    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	23	None	replace
557	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(out);  [CE]  no  suitable  method  found  for  cumulativeProbability(double[][])  [FE]                  AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(out);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(out);	  out[i][j]    =    0;    for(int    j]    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  cumulativeProbability(double[][])	23	None	replace
558	[BUG]  [BUGGY]  double  d  =  Math.abs(correlationMatrix.cumulativeProbability(i));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  Math.abs(correlationMatrix.cumulativeProbability(i));  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double  d  =  Math.abs(correlationMatrix.cumulativeProbability(i));	  double    d    =    Math.abs(correlationMatrix.cumulativeProbability(j));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
559	[BUG]  [BUGGY]  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getEntryDimension();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getEntryDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  int  nObs  =  correlationMatrix.getEntryDimension();	  out[i][j]    =    0xff;    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
560	[BUG]  [BUGGY]  double[][j]  =  1;  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][j]  =  1;	  out[i][j]    =    1;    for(int    j    =    0;    j    <    nVars;    j++)    {    double[][j]    =    1;    	non-compiled	[CE]  ']'  expected	36	None	replace
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;	  out[i][j]    =    0D;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    	compilable	  [FE]  AssertionFailedError  	137	2	replace
562	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getRowDimension();  out[i][j]  =  0;	  out[i][j]    =    0D;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    	compilable	  [FE]  AssertionFailedError  	137	2	replace
563	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	97	None	add
564	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	97	None	add
565	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	88	None	add
566	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getEntry(i,  j);  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	88	None	add
567	[BUG]  [BUGGY]  out[i][j]  =  2  +  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  2  +  tDistribution.cumulativeProbability(t));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  2  +  tDistribution.cumulativeProbability(t));	  out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    	non-compiled	[CE]  ';'  expected	116	None	replace
568	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xc0;  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xc0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xc0;	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	144	None	add
569	[BUG]  [BUGGY]  out[i][j]  =  0xc0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[i][j]  =  0xc0;  [CE]  ']'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc0;  for(int  j  =  0;  j  <  nVars;  j++)  {  double[i][j]  =  0xc0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0xc0;    for(int  j  =  0;  j  <  nVars;  j++)  {  double[i][j]  =  0xc0;	  	non-compiled	[CE]  ']'  expected	144	None	add
570	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0;out[i][j]  =  1;	  out[i][j]    =    0D;    out[i][j]    =    0D;    	compilable	  [FE]  AssertionFailedError  	50	5	replace
571	[BUG]  [BUGGY]  out[i][j]  =  0;out[i][j]  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;out[i][j]  =  1;	  out[i][j]    =    0D;    out[i][j]    =    0D;    	compilable	  [FE]  AssertionFailedError  	50	5	replace
572	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	124	None	add
573	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]  =  0xc;	  out[i][j]    =    0xf;    	compilable	  [FE]  AssertionFailedError  	83	5	replace
574	[BUG]  [BUGGY]  out[i][j]  =  0xc;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xc;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xc;	  out[i][j]    =    0xf;    	compilable	  [FE]  AssertionFailedError  	83	5	replace
575	[BUG]  [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    1;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        1;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    1;    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  1;	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	99	None	add
576	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getEntryDimension();  out[i][j]  =  0;  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  correlationMatrix.getEntryDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  correlationMatrix.getEntryDimension();  out[i][j]  =  0;	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    	non-compiled	[CE]  cannot  find  symbol	128	None	replace
577	[BUG]  [BUGGY]  out[i][j]  =  0L;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  }  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  }	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	14	None	add
578	[BUG]  [BUGGY]  out[i][j]  =  0L;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  0L;	  	non-compiled	[CE]  'else'  without  'if'	14	None	add
579	[BUG]  [BUGGY]  out[i][j]  =  0L;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0L;  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    0L;    for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  'else'  without  'if'	14	None	add
580	[BUG]  [BUGGY]  out[i][j]  =  0;  int  j  =  correlationMatrix.getEntry(i,  j).doubleValue();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  j  =  correlationMatrix.getEntry(i,  j).doubleValue();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  j  =  correlationMatrix.getEntry(i,  j).doubleValue();	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	113	None	replace
581	[BUG]  [BUGGY]  int  nObs  =  datasetMatrix.getDoubleDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  datasetMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  datasetMatrix.getDoubleDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  datasetMatrix.getDoubleDimension();  out[i][j]  =  0d;	  int    nObs    =    correlationMatrix.getDoubleDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  datasetMatrix	142	None	replace
582	[BUG]  [BUGGY]  double[][j]  =  0;  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double[][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double[][j]  =  0;	  out[i][j]    =    0;    for(int    i    =    0;    i    <    nVars;    j++)    {    double[][j]    =    0;    }    	non-compiled	[CE]  ']'  expected	120	None	replace
583	[BUG]  [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0;    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	127	None	add
584	[BUG]  [BUGGY]  int  nObs  =  dataset.getEntryDimension();  out[i][j]  =  0d;  [CE]  cannot  find  symbol  dataset  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataset.getEntryDimension();  out[i][j]  =  0d;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataset.getEntryDimension();  out[i][j]  =  0d;	  int    nObs    =    correlationMatrix.getEntryDimension();    out[i][j]    =    0d;    	non-compiled	[CE]  cannot  find  symbol  dataset	141	None	replace
585	[BUG]  [BUGGY]  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  j  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0;	  out[i][j]    =    0D;    int    j    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	54	None	replace
586	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(t)+  1;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  tDistribution.cumulativeProbability(t)+  1;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	tDistribution.cumulativeProbability(t)+  1;	          tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  not  a  statement	130	None	replace
587	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  for(int  j  =  0;  j  <  nVars;  j++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(i,  j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  for(int  j  =  0;  j  <  nVars;  j++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(i,  j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    for(int  j  =  0;  j  <  nVars;  j++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(i,  j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability	  	non-compiled	[CE]  ';'  expected	115	None	add
588	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  for(int  j  =  0;  j  <  nVars;  j++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(i,  j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  for(int  j  =  0;  j  <  nVars;  j++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(i,  j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    for(int  j  =  0;  j  <  nVars;  j++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(i,  j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(	  	non-compiled	[CE]  ')'  expected	115	None	add
589	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  for(int  j  =  0;  j  <  nVars;  j++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(i);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  for(int  j  =  0;  j  <  nVars;  j++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(i);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    for(int  j  =  0;  j  <  nVars;  j++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(i);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(	  	non-compiled	[CE]  ')'  expected	115	None	add
590	[BUG]  [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(r));  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  1  +  tDistribution.cumulativeProbability(j);  for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(r));  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]    =    1    +    tDistribution.cumulativeProbability(j);    for(int  j  =  0;  j  <  nVars;  j++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  1  +  tDistribution.cumulativeProbability(r));  }	  	non-compiled	[CE]  ';'  expected	115	None	add
591	[BUG]  [BUGGY]  int  nObs  =  this.covarianceMatrix.getEntryDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  this.covarianceMatrix.getEntryDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  this.covarianceMatrix.getEntryDimension();	  int    nObs    =    correlationMatrix.getEntryDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	140	None	replace
592	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	136	None	add
593	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0);	  	non-compiled	[CE]  ';'  expected	136	None	add
594	[BUG]  [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d;  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0D;  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0D;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0d;	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	136	None	add
595	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(d)+  tDistribution.cumulativeProbability(d);  [CE]  cannot  find  symbol  d  [FE]              AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(d)+  tDistribution.cumulativeProbability(d);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(d)+  tDistribution.cumulativeProbability(d);	  out[i][j]    =    tDistribution.cumulativeProbability(t)+    tDistribution.cumulativeProbability(t);    	non-compiled	[CE]  cannot  find  symbol  d	13	None	replace
596	[BUG]  [BUGGY]  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j  -  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	Double  nObs  =  correlationMatrix.getEntry(i,  j  -  1);	  Double    nObs    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	4	7	replace
597	[BUG]  [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j  -  1);  [FE]  MatrixIndexException  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  Double  nObs  =  correlationMatrix.getEntry(i,  j  -  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	Double  nObs  =  correlationMatrix.getEntry(i,  j  -  1);	  Double    nObs    =    correlationMatrix.getEntry(i,    j);    	compilable	  [FE]  MatrixIndexException  	4	7	replace
598	[BUG]  [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  double  d  =  comparisonMatrix.getEntry(i,  j  +  1);  [CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()  [FE]    MatrixIndexException    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  d  =  correlationMatrix.getEntry(i,  j  +  1);  double  d  =  comparisonMatrix.getEntry(i,  j  +  1);  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    d    =    correlationMatrix.getEntry(i,    j    +    1);    double  d  =  comparisonMatrix.getEntry(i,  j  +  1);	  	non-compiled	[CE]  variable  d  is  already  defined  in  method  getCorrelationPValues()	78	None	add
599	[BUG]  [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getEntryCount();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  int  nObs  =  correlationMatrix.getEntryCount();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  int  nObs  =  correlationMatrix.getEntryCount();	  out[i][j]    =    0;    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
600	[BUG]  [BUGGY]  int  nObs  =(relativeMatrix.getColumnDimension()!=  0)?  correlationMatrix.getColumnDimension()  :  0;  [CE]  cannot  find  symbol  relativeMatrix  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =(relativeMatrix.getColumnDimension()!=  0)?  correlationMatrix.getColumnDimension()  :  0;  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =(relativeMatrix.getColumnDimension()!=  0)?  correlationMatrix.getColumnDimension()  :  0;	  int    nObs    =(relativeMatrix.getColumnDimension()!=    0)?    correlationMatrix.getRowDimension()    :    0;    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	143	None	replace
601	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  congregationMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j);  double  r  =  congregationMatrix.getEntry(i,  j);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	double    r    =    correlationMatrix.getEntry(i,    j);    double  r  =  congregationMatrix.getEntry(i,  j);	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	9	None	add
602	[BUG]  [BUGGY]  int  nObs  =  this.covarianceMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]        AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  this.covarianceMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  this.covarianceMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getRowDimension();    int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	65	None	replace
603	[BUG]  [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0xff;    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0xff;        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    0xff;    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  0xff;	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	90	None	add
604	[BUG]  [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  j  <  nVars;  i++)  {  double[][j]  =  1;  }  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0;  for(int  i  =  0;  j  <  nVars;  i++)  {  double[][j]  =  1;  }  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0;  for(int  i  =  0;  j  <  nVars;  i++)  {  double[][j]  =  1;  }	  out[i][j]    =    1;    for(int    i    =    0;    j    <    nVars;    i++)    {    double[][j]    =    1;    }    	non-compiled	[CE]  ']'  expected	101	None	replace
605	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(relativeMatrix  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [CE]  cannot  find  symbol  relativeMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(relativeMatrix  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(relativeMatrix  *  Math.sqrt((  nObs  -  1)/(1  -  nVars)));	          out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars)));    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	104	None	replace
606	[BUG]  [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(covarianceMatrix);  [CE]  cannot  find  symbol  covarianceMatrix  [FE]          AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  tDistribution.cumulativeProbability(covarianceMatrix);  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  tDistribution.cumulativeProbability(covarianceMatrix);	  out[i][j]    =    tDistribution.cumulativeProbability(t);    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	11	None	replace
607	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(relativeMatrix  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [CE]  cannot  find  symbol  relativeMatrix  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  Math.abs(relativeMatrix  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  Math.abs(relativeMatrix  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    n    *    j)));    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	12	None	replace
608	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0;  out[i][j]  =  0;	  	compilable	  [FE]  AssertionFailedError  	49	2	add
609	[BUG]  [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0;  out[i][j]  =  0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0;  out[i][j]  =  0;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0;  out[i][j]  =  0;	  	compilable	  [FE]  AssertionFailedError  	49	2	add
610	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0d;  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0d;  out[i][j]  =  0D;	  	compilable	  [FE]  AssertionFailedError  	49	2	add
611	[BUG]  [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0d;  out[i][j]  =  0D;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]    =    0D;    out[i][j]  =  0D;  out[i][j]  =  0d;  out[i][j]  =  0D;  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]        =        0D;        out[i][j]    =    0D;    out[i][j]  =  0d;  out[i][j]  =  0D;	  	compilable	  [FE]  AssertionFailedError  	49	2	add
612	[BUG]  [BUGGY]  int  nObs  =  dataset.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [CE]  cannot  find  symbol  dataset  [FE]                    AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  int  nObs  =  dataset.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }  [BUGGY]      out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	int  nObs  =  dataset.getEntryDimension();  for(int  j  =  0;  j  <  nVars;  j++)  {  out[i][j]  =  0d;  }	  int    nObs    =    correlationMatrix.getEntryDimension();    for(int    j    =    0;    j    <    nVars;    j++)    {    out[i][j]    =    0d;    }    	non-compiled	[CE]  cannot  find  symbol  dataset	106	None	replace
613	[BUG]  [BUGGY]  out[i][j]  =  0xff;  int  j  =  correlationMatrix.getEntryDimension();  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError      [CONTEXT]      public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {      [BUGGY]  out[i][j]  =  0xff;  int  j  =  correlationMatrix.getEntryDimension();  [BUGGY]      }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	out[i][j]  =  0xff;  int  j  =  correlationMatrix.getEntryDimension();	  out[i][j]    =    0xff;    int    j    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	92	None	replace
