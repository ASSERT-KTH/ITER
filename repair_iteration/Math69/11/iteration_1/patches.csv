bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
2	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	8	3	replace
4	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  j)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	8	3	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  nObs)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  nObs)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
6	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  nObs)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  nObs)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  nObs)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
7	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j,  nVars);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j,  nVars);  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  correlationMatrix.getEntry(i,  j,  nVars);	      double    r    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	12	None	replace
8	[BUG]  [BUGGY]  double  r  =  covarianceMatrix.getEntry(i,  j,  nVars);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  covarianceMatrix.getEntry(i,  j,  nVars);  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  covarianceMatrix.getEntry(i,  j,  nVars);	      double    r    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	12	None	replace
9	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(j,  i);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  correlationMatrix.getEntry(j,  i);  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  correlationMatrix.getEntry(j,  i);	      double    r    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	12	None	replace
10	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	5	None	add
11	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	5	None	add
12	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  j)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	5	None	add
13	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	5	None	add
14	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	7	None	add
15	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	7	None	add
16	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  1)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  1)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  1)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	7	None	add
17	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  j)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	7	None	add
18	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getRowDimension();  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  correlationMatrix.getRowDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  correlationMatrix.getRowDimension();	      double    r    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	14	None	replace
19	[BUG]  [BUGGY]  double  r  =  covarianceMatrix.getColumnDimension();  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  covarianceMatrix.getColumnDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  covarianceMatrix.getColumnDimension();	      double    r    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	14	None	replace
20	[BUG]  [BUGGY]  double  r  =  covarianceMatrix.getRowDimension();  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  covarianceMatrix.getRowDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  covarianceMatrix.getRowDimension();	      double    r    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	14	None	replace
21	[BUG]  [BUGGY]  double  r  =  this.covarianceMatrix.getColumnDimension();  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  this.covarianceMatrix.getColumnDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  this.covarianceMatrix.getColumnDimension();	      double    r    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	14	None	replace
22	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	15	None	add
23	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    Double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	15	None	add
24	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nobs  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nobs  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nobs  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	15	None	add
25	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(2  -  nObs  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(2  -  nObs  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(2  -  nObs  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	15	None	add
26	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  double  r  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  double  r  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    double  r  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	15	None	add
27	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  t  [FE]                AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	int  nObs  =  correlationMatrix.getColumnDimension();	      	non-compiled	[CE]  cannot  find  symbol  t	9	None	replace
28	[BUG]  [BUGGY]  tDistribution.cumulativeProbability(r);  [CE]  cannot  find  symbol  t  [FE]                  AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  tDistribution.cumulativeProbability(r);  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	tDistribution.cumulativeProbability(r);	      	non-compiled	[CE]  cannot  find  symbol  t	9	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  correlationMatrix.getEntry(i,  j);  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  correlationMatrix.getEntry(i,  j);	      	compilable	  [FE]  AssertionFailedError  	9	4	replace
30	[BUG]  [BUGGY]  double  t  =  correlationMatrix.getEntry(i,  j);  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  correlationMatrix.getEntry(i,  j);  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  correlationMatrix.getEntry(i,  j);	      	compilable	  [FE]  AssertionFailedError  	9	4	replace
31	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  t  [FE]                      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	int  nObs  =  correlationMatrix.getRowDimension();	      	non-compiled	[CE]  cannot  find  symbol  t	9	None	replace
32	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j,  covarianceMatrix);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j,  covarianceMatrix);  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  correlationMatrix.getEntry(i,  j,  covarianceMatrix);	      double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	10	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    d)));    	compilable	  [FE]  AssertionFailedError  	17	3	replace
34	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    d)));    	compilable	  [FE]  AssertionFailedError  	17	3	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    d)));    	compilable	  [FE]  AssertionFailedError  	17	4	replace
36	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    d)));    	compilable	  [FE]  AssertionFailedError  	17	4	replace
37	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	18	None	add
38	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	18	None	add
39	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  1)/(1  -  nVars  *  nVars)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  1)/(1  -  nVars  *  nVars)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	18	None	add
40	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  nVars)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  nVars)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	18	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    	compilable	  [FE]  AssertionFailedError  	16	4	replace
42	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    	compilable	  [FE]  AssertionFailedError  	16	4	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	6	4	replace
44	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	6	4	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  nObs)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  nObs)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	6	4	replace
46	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  nObs)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  nObs)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  nObs)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	6	4	replace
47	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  t  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  nObs  =  correlationMatrix.getRowDimension();	      double    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  t	21	None	replace
48	[BUG]  [BUGGY]  double  nObs  =  covarianceMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  nObs  =  covarianceMatrix.getColumnDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  nObs  =  covarianceMatrix.getColumnDimension();	      double    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	21	None	replace
49	[BUG]  [BUGGY]  double  nObs  =  covarianceMatrix.getRowDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  nObs  =  covarianceMatrix.getRowDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  nObs  =  covarianceMatrix.getRowDimension();	      double    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	21	None	replace
50	[BUG]  [BUGGY]  double  nObs  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  nObs  =  dataMatrix.getColumnDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  nObs  =  dataMatrix.getColumnDimension();	      double    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	21	None	replace
51	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  cannot  find  symbol  t  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol  t	11	None	replace
52	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ')'  expected	11	None	replace
53	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [CE]  cannot  find  symbol  t  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol  t	11	None	replace
54	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ')'  expected	11	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  i)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  i)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	2	3	replace
56	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  i)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  i)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  i)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	2	3	replace
57	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	1	None	add
58	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	1	None	add
59	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	1	None	add
60	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  double  r  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  double  r  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    double  r  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	1	None	add
61	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	1	None	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	4	4	replace
63	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  nVars)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	4	4	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    	compilable	  [FE]  AssertionFailedError  	19	4	replace
65	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  nVars)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    	compilable	  [FE]  AssertionFailedError  	19	4	replace
66	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	13	None	replace
67	[BUG]  [BUGGY]  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(r));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(r));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	13	None	replace
68	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t)  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t)  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t)	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	13	None	replace
69	[BUG]  [BUGGY]  if(r!=  null)  {  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t)  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  if(r!=  null)  {  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t)  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	if(r!=  null)  {  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t)	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	13	None	replace
70	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	3	None	add
71	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    Double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	3	None	add
72	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  1)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    double  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  1)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	3	None	add
73	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  double  r  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  double  r  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    double  r  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	3	None	add
74	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	3	None	add
75	[BUG]  [BUGGY]      double  nObs  =  correlationMatrix.getColumnDimension();  double  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]      double  nObs  =  correlationMatrix.getColumnDimension();  double  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	        double    nObs    =    correlationMatrix.getColumnDimension();    double  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	20	None	add
76	[BUG]  [BUGGY]      double  nObs  =  correlationMatrix.getColumnDimension();  Double  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]      double  nObs  =  correlationMatrix.getColumnDimension();  Double  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	        double    nObs    =    correlationMatrix.getColumnDimension();    Double  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	20	None	add
77	[BUG]  [BUGGY]      double  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]      double  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	        double    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	20	None	add
78	[BUG]  [BUGGY]      double  nObs  =  correlationMatrix.getColumnDimension();  double  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]      double  nObs  =  correlationMatrix.getColumnDimension();  double  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	        double    nObs    =    correlationMatrix.getColumnDimension();    double  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	20	None	add
79	[BUG]  [BUGGY]  int  numberOfObservations  =  correlationMatrix.getNumberOfObservations();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  int  numberOfObservations  =  correlationMatrix.getNumberOfObservations();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	int  numberOfObservations  =  correlationMatrix.getNumberOfObservations();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
80	[BUG]  [BUGGY]  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  t  [FE]                  AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	int  numberOfObservations  =  correlationMatrix.getColumnDimension();	      	non-compiled	[CE]  cannot  find  symbol  t	9	None	replace
81	[BUG]  [BUGGY]  RealMatrix  tDistribution  =  new  RealMatrixImpl(r,  i);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]                    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  RealMatrix  tDistribution  =  new  RealMatrixImpl(r,  i);  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	RealMatrix  tDistribution  =  new  RealMatrixImpl(r,  i);	      	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	9	None	replace
82	[BUG]  [BUGGY]  double  r  =  matrix.getColumnDimension();  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  matrix.getColumnDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  matrix.getColumnDimension();	      double    r    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	14	None	replace
83	[BUG]  [BUGGY]  double  r  =  dataMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  dataMatrix.getEntry(i,  j);  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  dataMatrix.getEntry(i,  j);	      double    r    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	12	None	replace
84	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  double  r  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  double  r  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    double  r  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	18	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	2	4	replace
86	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  nVars)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	2	4	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
88	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
89	[BUG]  [BUGGY]  double  r  =  this.covarianceMatrix.getEntry(i,  j);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  this.covarianceMatrix.getEntry(i,  j);  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  this.covarianceMatrix.getEntry(i,  j);	      double    r    =    correlationMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	10	None	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    	compilable	  [FE]  AssertionFailedError  	19	4	replace
91	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  nVars)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    	compilable	  [FE]  AssertionFailedError  	19	4	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    	compilable	  [FE]  AssertionFailedError  	16	4	replace
93	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nVars  *  nVars)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    	compilable	  [FE]  AssertionFailedError  	16	4	replace
94	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  r)));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	13	None	replace
95	[BUG]  [BUGGY]  out[i][j]  =  2  *  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [CE]  cannot  find  symbol  t  [FE]                AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  out[i][j]  =  2  *  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	out[i][j]  =  2  *  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol  t	13	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	3	replace
97	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	3	replace
98	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ')'  expected	11	None	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
100	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
101	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    j)));    double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	7	None	add
102	[BUG]  [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j  +  1);  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  r  =  correlationMatrix.getEntry(i,  j  +  1);  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  r  =  correlationMatrix.getEntry(i,  j  +  1);	      double    r    =    covarianceMatrix.getEntry(i,    j);    	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	12	None	replace
103	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  double  t  =  Math.abs(R  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  double  t  =  Math.abs(R  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    double  t  =  Math.abs(R  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	15	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	6	1	replace
105	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	6	1	replace
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	6	3	replace
107	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nVars  *  j)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	6	3	replace
108	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	1	None	add
109	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getEntryDimension();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  nObs  =  correlationMatrix.getEntryDimension();  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  nObs  =  correlationMatrix.getEntryDimension();	      double    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
111	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  1)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
113	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    	compilable	  [FE]  AssertionFailedError  	19	4	replace
115	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  nVars)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  1)/(1  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    	compilable	  [FE]  AssertionFailedError  	19	4	replace
116	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	18	None	add
117	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	3	None	add
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	3	replace
119	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	3	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
121	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	3	replace
123	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	3	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
125	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
127	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  i  -  2)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
128	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	5	None	add
129	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	13	3	replace
130	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]    =    2    *    1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	13	3	replace
131	[BUG]  [BUGGY]  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	int  nVars  =  correlationMatrix.getColumnDimension();	      	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	9	None	replace
132	[BUG]  [BUGGY]  double  tT  =  correlationMatrix.getEntry(i,  j);  [CE]  cannot  find  symbol  t  [FE]                  AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  tT  =  correlationMatrix.getEntry(i,  j);  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  tT  =  correlationMatrix.getEntry(i,  j);	      	non-compiled	[CE]  cannot  find  symbol  t	9	None	replace
133	[BUG]  [BUGGY]  double  tDistribution  =  tDistribution.cumulativeProbability(r);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]                    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  tDistribution  =  tDistribution.cumulativeProbability(r);  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  tDistribution  =  tDistribution.cumulativeProbability(r);	      	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	9	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nObs  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nObs  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    	compilable	  [FE]  AssertionFailedError  	16	1	replace
135	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nObs  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  RealMatrix  getCorrelationPValues()  throws  MathException  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nObs  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nObs  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    	compilable	  [FE]  AssertionFailedError  	16	1	replace
