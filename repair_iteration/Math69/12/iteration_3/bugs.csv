bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  n	20	None	replace
2	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  ')'  expected	20	None	replace
3	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  ')'  expected	20	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));	  	compilable	  [FE]  AssertionFailedError  	33	3	add
5	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));	  	compilable	  [FE]  AssertionFailedError  	33	3	add
6	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  t)));  [CE]  cannot  find  symbol  nobs  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	33	None	add
7	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [CE]  cannot  find  symbol  d  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));	  	non-compiled	[CE]  cannot  find  symbol  d	33	None	add
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  t)));	  	compilable	  [FE]  AssertionFailedError  	33	3	add
9	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  t)));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  t)));	  	compilable	  [FE]  AssertionFailedError  	33	3	add
10	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	75	None	replace
11	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                      AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    nObs    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	75	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	108	1	add
13	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	108	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(2  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(2  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	108	1	add
15	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(2  -  r  *  t)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(2  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(2  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	108	1	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	77	3	add
17	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	77	3	add
18	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  d)));  [CE]  cannot  find  symbol  d  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  d)));	  	non-compiled	[CE]  cannot  find  symbol  d	77	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	77	3	add
20	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	77	3	add
21	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  l)));  [CE]  cannot  find  symbol  l  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  l)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  l)));	  	non-compiled	[CE]  cannot  find  symbol  l	77	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));	  	compilable	  [FE]  AssertionFailedError  	144	3	add
23	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));	  	compilable	  [FE]  AssertionFailedError  	144	3	add
24	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r))  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r))  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r))	  	non-compiled	[CE]  ')'  expected	144	None	add
25	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)	  	non-compiled	[CE]  ')'  expected	144	None	add
26	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((obs  -  2)/(1  -  t  *  r)));  [CE]  cannot  find  symbol  obs  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((obs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((obs  -  2)/(1  -  t  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  obs	144	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));	  t    =    Math.abs(r    *    Math.sqrt((    numberOfObservations    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	160	6	replace
28	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  i)));	  t    =    Math.abs(r    *    Math.sqrt((    numberOfObservations    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	160	6	replace
29	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	128	3	add
30	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	128	3	add
31	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(t  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  nobs  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(t  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(t  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	128	None	add
32	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  l  *  t)));  [CE]  cannot  find  symbol  l  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  l  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  l  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  l	128	None	add
33	[BUG]  [BUGGY]  int  numberOfObservations  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  dataMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  dataMatrix.getColumnDimension();	          int    numberOfObservations    =    correlationMatrix.getColumnDimension();    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	82	None	replace
34	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  n	129	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	129	6	replace
36	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	129	6	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	129	6	replace
38	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	129	6	replace
39	[BUG]  [BUGGY]  int  numberOfObservations  =  t.getColumnDimension();  Int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  t.getColumnDimension();  Int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  t.getColumnDimension();  Int  numberOfObservations  =  correlationMatrix.getColumnDimension();	          int    numberOfObservations    =    correlationMatrix.getColumnDimension();    Int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  double  cannot  be  dereferenced	84	None	replace
40	[BUG]  [BUGGY]  int  numberOfObservations  =  dataMatrix.getColumnDimension();  Integer  numberOfObservations  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  dataMatrix.getColumnDimension();  Integer  numberOfObservations  =  dataMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  dataMatrix.getColumnDimension();  Integer  numberOfObservations  =  dataMatrix.getColumnDimension();	          int    numberOfObservations    =    correlationMatrix.getColumnDimension();    Int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	84	None	replace
41	[BUG]  [BUGGY]  int  numberOfObservations  =  dataMatrix.getColumnDimension();  Integer  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  dataMatrix.getColumnDimension();  Integer  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  dataMatrix.getColumnDimension();  Integer  numberOfObservations  =  correlationMatrix.getColumnDimension();	          int    numberOfObservations    =    correlationMatrix.getColumnDimension();    Int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	84	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	  	compilable	  [FE]  AssertionFailedError  	149	3	add
43	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	  	compilable	  [FE]  AssertionFailedError  	149	3	add
44	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  j)));  [CE]  cannot  find  symbol  nobs  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	149	None	add
45	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [CE]  cannot  find  symbol  d  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));	  	non-compiled	[CE]  cannot  find  symbol  d	149	None	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  j)));	  	compilable	  [FE]  AssertionFailedError  	149	3	add
47	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  j)));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  j)));	  	compilable	  [FE]  AssertionFailedError  	149	3	add
48	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  t  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  t  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  t	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ')'  expected	11	None	replace
50	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	147	4	add
52	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	147	4	add
53	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	147	None	add
54	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1	  	non-compiled	[CE]  ')'  expected	147	None	add
55	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -	  	non-compiled	[CE]  ')'  expected	147	None	add
56	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars	  	non-compiled	[CE]  ')'  expected	147	None	add
57	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [CE]  cannot  find  symbol  n  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    n    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	119	None	replace
58	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  nVars)));  [CE]  cannot  find  symbol  n  [FE]                      AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  nVars)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    n    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	119	None	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  j  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  j  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    n    *    r)));    	compilable	  [FE]  AssertionFailedError  	119	6	replace
60	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  j  *  r)));  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  j  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  j  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    n    *    r)));    	compilable	  [FE]  AssertionFailedError  	119	6	replace
61	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ']'  expected	125	None	replace
62	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulativeProbability  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulativeProbability  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulativeProbability	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ']'  expected	125	None	replace
63	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.abs(r  *  Math.sqrt  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.abs(r  *  Math.sqrt  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.abs(r  *  Math.sqrt	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ']'  expected	125	None	replace
64	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.abs(r  *  Math.sqrt((  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.abs(r  *  Math.sqrt((  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.abs(r  *  Math.sqrt((	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ']'  expected	125	None	replace
65	[BUG]  [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	50	None	replace
66	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  t.cumulativeProbability(r));  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  t.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  t.cumulativeProbability(r));	  out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	118	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	118	6	replace
68	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	118	6	replace
69	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  t.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  t.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  t.cumulativeProbability(t));	  out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	118	None	replace
70	[BUG]  [BUGGY]  int  nObs  =  matrix.getColumnDimension();  [CE]  cannot  find  symbol  matrix  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  matrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  matrix.getColumnDimension();	  int    nObs    =    covarianceMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  matrix	72	None	replace
71	[BUG]  [BUGGY]  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  l  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  t    =    Math.abs(relativeProbability    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  l	35	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  t    =    Math.abs(relativeProbability    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	35	6	replace
73	[BUG]  [BUGGY]  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  t    =    Math.abs(relativeProbability    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	35	6	replace
74	[BUG]  [BUGGY]  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [CE]  cannot  find  symbol  relativeProbability  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    	non-compiled	[CE]  cannot  find  symbol  relativeProbability	80	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	80	6	replace
76	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	80	6	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  4)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  4)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    	compilable	  [FE]  AssertionFailedError  	152	6	replace
78	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  4)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  4)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  4)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    	compilable	  [FE]  AssertionFailedError  	152	6	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  1)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  1)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    	compilable	  [FE]  AssertionFailedError  	152	6	replace
80	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  1)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  1)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  1)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    	compilable	  [FE]  AssertionFailedError  	152	6	replace
81	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
82	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r)));  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	106	None	replace
83	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
84	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	78	6	replace
86	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	78	6	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	78	6	replace
88	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	78	6	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	115	2	add
90	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	115	2	add
91	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	115	None	add
92	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
93	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
94	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  dataMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  dataMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  dataMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
95	[BUG]  [BUGGY]  int  nObs  =  tDistribution.getColumnDimension();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  tDistribution.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  tDistribution.getColumnDimension();	  int    nObs    =    t.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
96	[BUG]  [BUGGY]  int  nObs  =  datasetMatrix.getColumnDimension();  [CE]  cannot  find  symbol  datasetMatrix  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  datasetMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  datasetMatrix.getColumnDimension();	  int    nObs    =    dataMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  datasetMatrix	120	None	replace
97	[BUG]  [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                int        nObs        =        correlationMatrix.getColumnDimension();        int    nobs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	92	None	add
98	[BUG]  [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                int        nObs        =        correlationMatrix.getColumnDimension();        int    nobs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	92	None	add
99	[BUG]  [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                int        nObs        =        correlationMatrix.getColumnDimension();        int    nobs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	92	None	add
100	[BUG]  [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRangeDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRangeDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                int        nObs        =        correlationMatrix.getColumnDimension();        int    nobs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRangeDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	92	None	add
101	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	112	None	add
102	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	112	None	add
103	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	112	None	add
104	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	112	None	add
105	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	112	None	add
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	1	3	add
107	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	1	3	add
108	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [CE]  cannot  find  symbol  d  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));	  	non-compiled	[CE]  cannot  find  symbol  d	1	None	add
109	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));  [CE]  cannot  find  symbol  l  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));	  	non-compiled	[CE]  cannot  find  symbol  l	1	None	add
110	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  r)));  [CE]  cannot  find  symbol  nobs  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	1	None	add
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnD  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnD	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ';'  expected	102	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnD  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnD	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ';'  expected	102	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.get  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.get  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.get	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ';'  expected	102	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getRowD  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getRowD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getRowD	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ';'  expected	102	None	replace
115	[BUG]  [BUGGY]  int  nObs  =  tDistribution.getRowDimension();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  tDistribution.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  tDistribution.getRowDimension();	  int    nObs    =    t.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    tDistribution.cumulativeProbability(t)));    	compilable	  [FE]  AssertionFailedError  	9	2	replace
117	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    tDistribution.cumulativeProbability(t)));    	compilable	  [FE]  AssertionFailedError  	9	2	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    tDistribution.cumulativeProbability(t)));    	compilable	  [FE]  AssertionFailedError  	9	4	replace
119	[BUG]  [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    tDistribution.cumulativeProbability(t)));    	compilable	  [FE]  AssertionFailedError  	9	4	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    tDistribution.cumulativeProbability(t)));    	compilable	  [FE]  AssertionFailedError  	9	6	replace
121	[BUG]  [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    tDistribution.cumulativeProbability(t)));    	compilable	  [FE]  AssertionFailedError  	9	6	replace
122	[BUG]  [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  d  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    tDistribution.cumulativeProbability(t)));    	non-compiled	[CE]  cannot  find  symbol  d	9	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	double  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    double    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	163	6	replace
124	[BUG]  [BUGGY]  double  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    double    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	163	6	replace
125	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  double  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  double  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getRowDimension();  double  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    double    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	163	None	replace
126	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  double  nObs  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  double  nObs  =  dataMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  double  nObs  =  dataMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    double    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	163	None	replace
127	[BUG]  [BUGGY]  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  l  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	  t    =    Math.abs(relativeProbability    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  l	81	None	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	  t    =    Math.abs(relativeProbability    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	81	6	replace
129	[BUG]  [BUGGY]  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	  t    =    Math.abs(relativeProbability    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	81	6	replace
130	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	114	None	replace
131	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	114	None	replace
132	[BUG]  [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [CE]  '('  or  '['  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	114	None	replace
133	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	143	6	replace
135	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	143	6	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	143	5	replace
137	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	143	5	replace
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	143	6	replace
139	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	143	6	replace
140	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  n)));  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  n)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  n)));	  t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	23	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(j  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(j  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	  t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	23	6	replace
142	[BUG]  [BUGGY]  t  =  Math.abs(j  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(j  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(j  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	  t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	23	6	replace
143	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int    nObs    =    correlationMatrix.getRowDimension();    int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	69	None	add
144	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int    nObs    =    correlationMatrix.getRowDimension();    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	69	None	add
145	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  Int  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  Int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int    nObs    =    correlationMatrix.getRowDimension();    Int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	int    nObs    =    correlationMatrix.getRowDimension();    int  nobs  =  correlationMatrix.getRowDimension();	  	compilable	  [FE]  AssertionFailedError  	69	2	add
147	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int    nObs    =    correlationMatrix.getRowDimension();    int  nobs  =  correlationMatrix.getRowDimension();	  	compilable	  [FE]  AssertionFailedError  	69	2	add
148	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
149	[BUG]  [BUGGY]  out[i][j]  =  2d  *  1  -  tDistribution.cumulativeProbability(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  1  -  tDistribution.cumulativeProbability(  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  1  -  tDistribution.cumulativeProbability(	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
150	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    	compilable	  [FE]  AssertionFailedError  	145	6	replace
152	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    	compilable	  [FE]  AssertionFailedError  	145	6	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    	compilable	  [FE]  AssertionFailedError  	145	6	replace
154	[BUG]  [BUGGY]  out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    	compilable	  [FE]  AssertionFailedError  	145	6	replace
155	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	74	None	replace
156	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  2)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  2)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  2)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	74	None	replace
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	37	5	replace
158	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	37	5	replace
159	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  r.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  r.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  r.cumulativeProbability(t));	  out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	37	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	139	5	replace
161	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	139	5	replace
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	139	2	replace
163	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	139	2	replace
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	139	5	replace
165	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	139	5	replace
166	[BUG]  [BUGGY]  out[i][j]  =  t  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    t    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	141	None	replace
167	[BUG]  [BUGGY]  out[i][j]  =  t  /  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  t  /  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  t  /  tDistribution.cumulativeProbability(t));	  out[i][j]    =    t    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	141	None	replace
168	[BUG]  [BUGGY]  out[i][j]  =  t  -  correlationMatrix.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  t  -  correlationMatrix.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  t  -  correlationMatrix.cumulativeProbability(t));	  out[i][j]    =    t    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	141	None	replace
169	[BUG]  [BUGGY]  out[i][j]  =  t  -  tDistribution.cumulativeProbability(r,  t));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  t  -  tDistribution.cumulativeProbability(r,  t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  t  -  tDistribution.cumulativeProbability(r,  t));	  out[i][j]    =    t    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	141	None	replace
170	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  1  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  1  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  1	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    }    	non-compiled	[CE]  ';'  expected	42	None	replace
171	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    }    	non-compiled	[CE]  ';'  expected	42	None	replace
172	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
173	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	22	6	add
175	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	22	6	add
176	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  d  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));	  	non-compiled	[CE]  cannot  find  symbol  d	22	None	add
177	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((nobs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  nobs  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((nobs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(t  *  Math.sqrt((nobs  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	22	None	add
178	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
179	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  <identifier>  expected	126	None	replace
180	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDis  [CE]  '('  or  '['  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDis  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDis	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
181	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  <identifier>  expected	126	None	replace
182	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
183	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  '('  or  '['  expected	44	None	replace
184	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [CE]  '('  or  '['  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  '('  or  '['  expected	44	None	replace
185	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDis  [CE]  '('  or  '['  expected  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDis  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDis	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  '('  or  '['  expected	44	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	13	3	add
187	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	13	3	add
188	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t))  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t))  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t))	  	non-compiled	[CE]  ')'  expected	13	None	add
189	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)	  	non-compiled	[CE]  ')'  expected	13	None	add
190	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((obs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  obs  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((obs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((obs  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  obs	13	None	add
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    n    *    r)));    	compilable	  [FE]  AssertionFailedError  	104	6	replace
192	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    n    *    r)));    	compilable	  [FE]  AssertionFailedError  	104	6	replace
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  i)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  i)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    n    *    r)));    	compilable	  [FE]  AssertionFailedError  	104	6	replace
194	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  i)));  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  i)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  i)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    n    *    r)));    	compilable	  [FE]  AssertionFailedError  	104	6	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	55	4	replace
196	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	55	4	replace
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	55	5	replace
198	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	55	5	replace
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	19	3	add
200	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	19	3	add
201	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t))  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t))  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t))	  	non-compiled	[CE]  ')'  expected	19	None	add
202	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)	  	non-compiled	[CE]  ')'  expected	19	None	add
203	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((obs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  obs  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((obs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((obs  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  obs	19	None	add
204	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *	  	non-compiled	[CE]  ')'  expected	19	None	add
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));	  	compilable	  [FE]  AssertionFailedError  	161	4	add
206	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));	  	compilable	  [FE]  AssertionFailedError  	161	4	add
207	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  nVars)));  [CE]  cannot  find  symbol  nobs  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  nVars)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	161	None	add
208	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  nVars)));	  	compilable	  [FE]  AssertionFailedError  	161	4	add
209	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  nVars)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  nVars)));	  	compilable	  [FE]  AssertionFailedError  	161	4	add
210	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));  [CE]  cannot  find  symbol  l  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));	  	non-compiled	[CE]  cannot  find  symbol  l	161	None	add
211	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  <identifier>  expected	111	None	replace
212	[BUG]  [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  <identifier>  expected	111	None	replace
213	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  '('  or  '['  expected	111	None	replace
214	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  '('  or  '['  expected	111	None	replace
215	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	138	None	add
216	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	138	None	add
217	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	138	None	add
218	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	138	None	add
219	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	138	None	add
220	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  t.cumulativeProbability(relativeMatrix));  [CE]  cannot  find  symbol  relativeMatrix  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  t.cumulativeProbability(relativeMatrix));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  t.cumulativeProbability(relativeMatrix));	  out[i][j]    =    2    *    (1    -    correlationMatrix.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	107	None	replace
221	[BUG]  [BUGGY]  out[i][j]  =  2  *(r  -  correlationMatrix.cumulativeProbability(t));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(r  -  correlationMatrix.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(r  -  correlationMatrix.cumulativeProbability(t));	  out[i][j]    =    2    *    (1    -    correlationMatrix.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
222	[BUG]  [BUGGY]  int  numberOfObservations  =  matrix.getColumnDimension();  [CE]  cannot  find  symbol  matrix  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  matrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  matrix.getColumnDimension();	  int    numberOfObservations    =    covarianceMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  matrix	103	None	replace
223	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	45	None	replace
224	[BUG]  [BUGGY]  out[i][j]  =  2d  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [CE]  '('  or  '['  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	45	None	replace
225	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [CE]  '('  or  '['  expected  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	45	None	replace
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	7	2	add
227	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	7	2	add
228	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  ';'  expected	7	None	add
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	7	2	add
230	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	7	2	add
231	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  ';'  expected	7	None	add
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	79	3	add
233	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	79	3	add
234	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  d)));  [CE]  cannot  find  symbol  d  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  d)));	  	non-compiled	[CE]  cannot  find  symbol  d	79	None	add
235	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  l)));  [CE]  cannot  find  symbol  l  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  l)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  l)));	  	non-compiled	[CE]  cannot  find  symbol  l	79	None	add
236	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(2  -  nVars  *  r)));  [CE]  cannot  find  symbol  nobs  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(2  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(2  -  nVars  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	79	None	add
237	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	56	None	add
238	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(	  	non-compiled	[CE]  ')'  expected	56	None	add
239	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(	  	non-compiled	[CE]  ')'  expected	56	None	add
240	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	56	None	add
241	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	56	None	add
242	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowDi  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowDi	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	28	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowD  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowD	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	28	None	replace
244	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnD  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnD	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	28	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnD  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnD	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	28	None	replace
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  nVars)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  nVars)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    d)));    	compilable	  [FE]  AssertionFailedError  	131	6	replace
247	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  nVars)));  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  nVars)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  nVars)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    d)));    	compilable	  [FE]  AssertionFailedError  	131	6	replace
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	113	2	replace
249	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	113	2	replace
250	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	113	4	replace
251	[BUG]  [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	113	4	replace
252	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  double  cannot  be  dereferenced	113	None	replace
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	27	3	replace
254	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	27	3	replace
255	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));	  out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	27	None	replace
256	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	27	3	replace
257	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	27	3	replace
258	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
259	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ')'  expected	123	None	replace
260	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
261	[BUG]  [BUGGY]  int  numberOfObservations  =  tDistribution.getRowDimension();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  tDistribution.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  tDistribution.getRowDimension();	  int    numberOfObservations    =    t.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
262	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *	  	non-compiled	[CE]  ')'  expected	105	None	add
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	105	6	add
264	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	105	6	add
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	105	6	add
266	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	105	6	add
267	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *	  	non-compiled	[CE]  ')'  expected	105	None	add
268	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)	  	non-compiled	[CE]  ')'  expected	105	None	add
269	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	51	None	replace
270	[BUG]  [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	51	None	replace
271	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nobs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	93	6	replace
272	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nobs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	93	6	replace
273	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  int  nobs  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  int  nobs  =  dataMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  int  nobs  =  dataMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nobs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	93	None	replace
274	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getNumberOfObservations();  int  nobs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getNumberOfObservations();  int  nobs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getNumberOfObservations();  int  nobs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nobs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nobs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	93	6	replace
276	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nobs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	93	6	replace
277	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
278	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    noObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  n	153	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ';'  expected	121	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.get  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.get  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.get	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ';'  expected	121	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getRowD  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getRowD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getRowD	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ';'  expected	121	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ';'  expected	121	None	replace
283	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  r.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  r.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  r.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    t.cumulativeProbability(r));    	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
284	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  t.cumulativeProbability(r));  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  t.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  t.cumulativeProbability(r));	  out[i][j]    =    2d    *    (1    -    t.cumulativeProbability(r));    	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
285	[BUG]  [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	122	None	replace
286	[BUG]  [BUGGY]  out[i][j]  =  2  *  t.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  t.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  t.cumulativeProbability(t));	  out[i][j]    =    2    *    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	122	None	replace
287	[BUG]  [BUGGY]  out[i][j]  =  1  *  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	122	None	replace
288	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t)    	non-compiled	[CE]  '('  or  '['  expected	95	None	replace
289	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  int  nObs  =  dataMatrix.getRowDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  int  nObs  =  dataMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  int  nObs  =  dataMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	16	None	replace
290	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    nobs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
291	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    nobs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	67	None	replace
292	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    nobs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	67	None	replace
293	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    nobs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	62	4	replace
295	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	62	4	replace
296	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	62	4	replace
297	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	62	4	replace
298	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	compilable	  [FE]  AssertionFailedError  	148	6	replace
299	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	compilable	  [FE]  AssertionFailedError  	148	6	replace
300	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	non-compiled	[CE]  double  cannot  be  dereferenced	148	None	replace
301	[BUG]  [BUGGY]  out[i][j]  =  2d  *  1  -  t.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  1  -  t.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  1  -  t.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	non-compiled	[CE]  ';'  expected	148	None	replace
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	26	2	add
303	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	26	2	add
304	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  d  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));	  	non-compiled	[CE]  cannot  find  symbol  d	26	None	add
305	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(t  *  Math.sqrt((nobs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  nobs  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(t  *  Math.sqrt((nobs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  Math.abs(t  *  Math.sqrt((nobs  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	26	None	add
306	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    nobs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  n	21	None	replace
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension()  -  1;  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	int  numberOfObservations  =  correlationMatrix.getRowDimension()  -  1;	  int    numberOfObservations    =    correlationMatrix.getRowDimension();    	compilable	  [FE]  AssertionFailedError  	88	6	replace
308	[BUG]  [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension()  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension()  -  1;  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  correlationMatrix.getRowDimension()  -  1;	  int    numberOfObservations    =    correlationMatrix.getRowDimension();    	compilable	  [FE]  AssertionFailedError  	88	6	replace
309	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t)));  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  n	98	None	replace
310	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t)  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t)	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    	non-compiled	[CE]  ')'  expected	98	None	replace
311	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
312	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t))  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t))  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t))	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    	non-compiled	[CE]  ')'  expected	98	None	replace
313	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	3	replace
314	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	3	replace
315	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(relativeMatrix  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  relativeMatrix  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(relativeMatrix  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(relativeMatrix  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  relativeMatrix	25	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	61	2	add
317	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	61	2	add
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	61	2	add
319	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	61	2	add
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (3  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (3  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	61	2	add
321	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (3  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (3  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (3  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	61	2	add
322	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  ';'  expected	61	None	add
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	65	2	add
324	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	65	2	add
325	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *	  	non-compiled	[CE]  ')'  expected	65	None	add
326	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r))  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r))  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r))	  	non-compiled	[CE]  ')'  expected	65	None	add
327	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)	  	non-compiled	[CE]  ')'  expected	65	None	add
328	[BUG]  [BUGGY]  int  numberOfObservations  =  matrix.getRowDimension();  [CE]  cannot  find  symbol  matrix  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  matrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  matrix.getRowDimension();	  int    numberOfObservations    =    covarianceMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  matrix	90	None	replace
329	[BUG]  [BUGGY]  int  numberOfObservations  =  dataMatrix.getRowDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  dataMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  dataMatrix.getRowDimension();	  int    numberOfObservations    =    covarianceMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	90	None	replace
330	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(2  -  tDistribution.cumulativeProbability(r)));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(2  -  tDistribution.cumulativeProbability(r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(2  -  tDistribution.cumulativeProbability(r)));	  	non-compiled	[CE]  ')'  expected	48	None	add
331	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    for(int  i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  ';'  expected	48	None	add
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	48	6	add
333	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	48	6	add
334	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    NObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  ')'  expected	154	None	replace
335	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    NObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	154	6	replace
336	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    NObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	154	6	replace
337	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(r  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(r  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(r    -    t.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	165	6	replace
338	[BUG]  [BUGGY]  out[i][j]  =  2  *(r  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(r  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(r  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(r    -    t.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	165	6	replace
339	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  r.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  r.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  r.cumulativeProbability(t));	  out[i][j]    =    2    *(r    -    t.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	165	None	replace
340	[BUG]  [BUGGY]  out[i][j]  =  2  *(r  /  t.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(r  /  t.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(r  /  t.cumulativeProbability(t));	  out[i][j]    =    2    *(r    -    t.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	165	None	replace
341	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    numberOfObservations    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
342	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(r));  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  t.cumulativeProbability(r));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  double  cannot  be  dereferenced	49	None	replace
343	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	142	None	add
344	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	142	None	add
345	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	142	None	add
346	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	142	None	add
347	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	142	None	add
348	[BUG]  [BUGGY]  out[i][j]  =  2  *(covarianceMatrix  -  t.cumulativeProbability(r));  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(covarianceMatrix  -  t.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(covarianceMatrix  -  t.cumulativeProbability(r));	  out[i][j]    =    2    *(t    -    correlationMatrix.cumulativeProbability(r));    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	134	None	replace
349	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  correlationMatrix.cumulativeProbability(r),  t);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  correlationMatrix.cumulativeProbability(r),  t);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  correlationMatrix.cumulativeProbability(r),  t);	  out[i][j]    =    2    *(t    -    correlationMatrix.cumulativeProbability(r));    	non-compiled	[CE]  ')'  expected	134	None	replace
350	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	155	2	add
351	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	155	2	add
352	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(3  -  tDistribution.cumulativeProbability(t)));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(3  -  tDistribution.cumulativeProbability(t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(3  -  tDistribution.cumulativeProbability(t)));	  	non-compiled	[CE]  ')'  expected	155	None	add
353	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    for(int  i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  ';'  expected	155	None	add
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	155	3	add
355	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	155	3	add
356	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  d  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	non-compiled	[CE]  cannot  find  symbol  d	68	None	replace
357	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	non-compiled	[CE]  ')'  expected	68	None	replace
358	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	12	None	replace
359	[BUG]  [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	12	None	replace
360	[BUG]  [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	12	None	replace
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	150	6	replace
362	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	150	6	replace
363	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	40	2	add
364	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	40	2	add
365	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  ';'  expected	40	None	add
366	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  1  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  1  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  ';'  expected	40	None	add
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
368	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
370	[BUG]  [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
371	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
372	[BUG]  [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	8	4	replace
373	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));	  	compilable	  [FE]  AssertionFailedError  	151	4	add
374	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));	  	compilable	  [FE]  AssertionFailedError  	151	4	add
375	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  3)));  [CE]  cannot  find  symbol  nobs  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  3)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  nVars  *  3)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	151	None	add
376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  4)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  4)));	  	compilable	  [FE]  AssertionFailedError  	151	4	add
377	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  4)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  4)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  4)));	  	compilable	  [FE]  AssertionFailedError  	151	4	add
378	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	97	3	add
379	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	97	3	add
380	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	97	3	add
381	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	97	3	add
382	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)	  	non-compiled	[CE]  ')'  expected	97	None	add
383	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t))  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t))  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t))	  	non-compiled	[CE]  ')'  expected	97	None	add
384	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)	  	non-compiled	[CE]  ')'  expected	97	None	add
385	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  t)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	109	6	replace
386	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  t)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	109	6	replace
387	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars  +  1)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars  +  1)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars  +  1)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	157	None	replace
388	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	18	None	replace
389	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Integer  nObs  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Integer  nObs  =  dataMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  Integer  nObs  =  dataMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	18	None	replace
390	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  covarianceMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	18	None	replace
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	117	2	add
392	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	117	2	add
393	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	117	None	add
394	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	117	None	add
395	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
396	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t)  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t)  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t)	  	non-compiled	[CE]  ')'  expected	117	None	add
397	[BUG]  [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	31	None	replace
398	[BUG]  [BUGGY]  out[i][j]  =  0d  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	31	None	replace
399	[BUG]  [BUGGY]  out[i][j]  =  0  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	31	None	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	60	6	replace
401	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	60	6	replace
402	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	60	6	replace
403	[BUG]  [BUGGY]  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	60	6	replace
404	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    for(int  i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  ';'  expected	63	None	add
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  t  =  Math.abs(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    t  =  Math.abs(t  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	63	6	add
406	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  t  =  Math.abs(t  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  t  =  Math.abs(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    t  =  Math.abs(t  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	63	6	add
407	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
408	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
409	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getRowDimension();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
410	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	24	2	add
411	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	24	2	add
412	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  d  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));	  	non-compiled	[CE]  cannot  find  symbol  d	24	None	add
413	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(r  *  Math.sqrt((nobs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  nobs  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(r  *  Math.sqrt((nobs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  Math.abs(r  *  Math.sqrt((nobs  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	24	None	add
414	[BUG]  [BUGGY]  int  numberOfObservations  =  t.getNumberOfElements();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  t.getNumberOfElements();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  t.getNumberOfElements();	  int    numberOfObservations    =    correlationMatrix.getNumberOfElements();    	non-compiled	[CE]  double  cannot  be  dereferenced	140	None	replace
415	[BUG]  [BUGGY]  int  numberOfObservations  =  covarianceMatrix.getNumberOfElements();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  covarianceMatrix.getNumberOfElements();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  covarianceMatrix.getNumberOfElements();	  int    numberOfObservations    =    correlationMatrix.getNumberOfElements();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	140	None	replace
416	[BUG]  [BUGGY]  int  numberOfObservations  =  dataMatrix.getNumberOfElements();  [CE]  cannot  find  symbol  dataMatrix  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  dataMatrix.getNumberOfElements();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  dataMatrix.getNumberOfElements();	  int    numberOfObservations    =    correlationMatrix.getNumberOfElements();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	140	None	replace
417	[BUG]  [BUGGY]  out[i][j]  =  0d  /  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  /  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  /  tDistribution.cumulativeProbability(t));	  out[i][j]    =    0d    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	30	None	replace
418	[BUG]  [BUGGY]  out[i][j]  =  0d  *  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  tDistribution.cumulativeProbability(t));	  out[i][j]    =    0d    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	30	None	replace
419	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r)    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
420	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t)	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r)    	non-compiled	[CE]  ')'  expected	124	None	replace
421	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    	compilable	  [FE]  AssertionFailedError  	5	6	replace
422	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    	compilable	  [FE]  AssertionFailedError  	5	6	replace
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  r  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  r  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    	compilable	  [FE]  AssertionFailedError  	5	6	replace
424	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  r  *  j)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  r  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  r  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    	compilable	  [FE]  AssertionFailedError  	5	6	replace
425	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getEntryDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  covarianceMatrix.getEntryDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  covarianceMatrix.getEntryDimension();	  int    nObs    =    correlationMatrix.getEntryDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	133	None	replace
426	[BUG]  [BUGGY]  int  nObs  =  t.getEntryDimension();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  t.getEntryDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  t.getEntryDimension();	  int    nObs    =    correlationMatrix.getEntryDimension();    	non-compiled	[CE]  double  cannot  be  dereferenced	133	None	replace
427	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getEntryDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  dataMatrix.getEntryDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  dataMatrix.getEntryDimension();	  int    nObs    =    correlationMatrix.getEntryDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	133	None	replace
428	[BUG]  [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int    numberOfObservations    =    correlationMatrix.getRowDimension();    int  numberOfObservations  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()	87	None	add
429	[BUG]  [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int    numberOfObservations    =    correlationMatrix.getRowDimension();    int  numberOfObservations  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()	87	None	add
430	[BUG]  [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  Int  numberOfObservations  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  Int  numberOfObservations  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int    numberOfObservations    =    correlationMatrix.getRowDimension();    Int  numberOfObservations  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  cannot  find  symbol	87	None	add
431	[BUG]  [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  int  numberOfObservations  =  comparisonMatrix.getRowDimension();  [CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  int  numberOfObservations  =  comparisonMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int    numberOfObservations    =    correlationMatrix.getRowDimension();    int  numberOfObservations  =  comparisonMatrix.getRowDimension();	  	non-compiled	[CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()	87	None	add
432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	54	2	add
433	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	54	2	add
434	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  ';'  expected	54	None	add
435	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  ';'  expected	54	None	add
436	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	10	None	add
437	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribu  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribu  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribu	  	non-compiled	[CE]  ')'  expected	10	None	add
438	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  t  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  t  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  t	  	non-compiled	[CE]  ')'  expected	10	None	add
439	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribu  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribu  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribu	  	non-compiled	[CE]  ')'  expected	10	None	add
440	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.get  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.get  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.get	  	non-compiled	[CE]  ';'  expected	10	None	add
441	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDimension();	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t,    i);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
442	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDimension();  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDimension();  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDimension();  }	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t,    i);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	132	None	replace
443	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDi  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDi	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t,    i);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	132	None	replace
444	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getColumnDimension();  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getColumnDimension();  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getColumnDimension();  }	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t,    i);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	132	None	replace
445	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	58	None	replace
446	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	58	None	replace
447	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	58	None	replace
448	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	36	2	add
449	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	36	2	add
450	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  tDistribution.cumulativeProbability(t)));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  tDistribution.cumulativeProbability(t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  tDistribution.cumulativeProbability(t)));	  	non-compiled	[CE]  ')'  expected	36	None	add
451	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    for(int  i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  ';'  expected	36	None	add
452	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getRowDi  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getRowDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getRowDi	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	130	None	replace
453	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nVars);  int  nVars  =  correlationMatrix.getRowDi  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nVars);  int  nVars  =  correlationMatrix.getRowDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nVars);  int  nVars  =  correlationMatrix.getRowDi	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	130	None	replace
454	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs,  nVars);  int  nVars  =  correlationMatrix.get  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs,  nVars);  int  nVars  =  correlationMatrix.get  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs,  nVars);  int  nVars  =  correlationMatrix.get	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	130	None	replace
455	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nVars);  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nVars);  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nVars);  int  nVars  =  correlationMatrix.getRowDimension();	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
456	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getRowD  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getRowD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getRowD	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	101	None	replace
457	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getRowDi  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getRowDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getRowDi	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	101	None	replace
458	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.get  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.get  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.get	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	101	None	replace
459	[BUG]  [BUGGY]  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	146	None	replace
460	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  nVars.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  nVars.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  nVars.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	146	None	replace
461	[BUG]  [BUGGY]  out[i][j]  =  2d  *  1  -  t.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  1  -  t.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  1  -  t.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	non-compiled	[CE]  ';'  expected	146	None	replace
462	[BUG]  [BUGGY]  out[i][j]  =  2d  *(1  -  t.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *(1  -  t.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *(1  -  t.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	non-compiled	[CE]  double  cannot  be  dereferenced	146	None	replace
463	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  t.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  t.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(3  -  t.cumulativeProbability(t));	  out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	156	None	replace
464	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	156	4	replace
465	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	156	4	replace
466	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  t.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  t.cumulativeProbability(  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  t.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  t.cumulativeProbability(  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  t.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  t.cumulativeProbability(	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
467	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  t  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  t  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  t	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ')'  expected	57	None	replace
468	[BUG]  [BUGGY]  out[i][j]  =  2d  *  t.cumulativeProbability(t));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  t.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  t.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    t.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	38	None	replace
469	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistribu	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars,    i    +    1);    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t)    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
470	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars,    i    +    1);    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t)    	non-compiled	[CE]  <identifier>  expected	159	None	replace
471	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars,    i    +    1);    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t)    	non-compiled	[CE]  '('  or  '['  expected	159	None	replace
472	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getRowDimension();  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getRowDimension();  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getRowDimension();  }	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	100	None	replace
473	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getRowDimension();	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
474	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  }	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	100	None	replace
475	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDi  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDi	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	100	None	replace
476	[BUG]  [BUGGY]  int  numberOfObservations  =  tDistribution.getColumnDimension();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  tDistribution.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  tDistribution.getColumnDimension();	  int    numberOfObservations    =    t.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
477	[BUG]  [BUGGY]  out[i][j]  =  1d  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1d  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1d  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	29	None	replace
478	[BUG]  [BUGGY]  out[i][j]  =  1  -  t.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  -  t.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  t.cumulativeProbability(t));	  out[i][j]    =    1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	29	None	replace
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  1  *(t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	64	5	replace
480	[BUG]  [BUGGY]  out[i][j]  =  1  *(t  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *(t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	64	5	replace
481	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *(t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	64	6	replace
482	[BUG]  [BUGGY]  out[i][j]  =  0d  *(t  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *(t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	64	6	replace
483	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  r.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  r.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  r.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	41	None	replace
484	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	41	2	replace
485	[BUG]  [BUGGY]  out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	41	2	replace
486	[BUG]  [BUGGY]  out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *    t    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	127	None	replace
487	[BUG]  [BUGGY]  out[i][j]  =  2  *  t  /  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  t  /  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  t  /  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    t    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	127	None	replace
488	[BUG]  [BUGGY]  out[i][j]  =  1  *  t  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *  t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *  t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    t    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	127	None	replace
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));	  	compilable	  [FE]  AssertionFailedError  	4	3	add
490	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));	  	compilable	  [FE]  AssertionFailedError  	4	3	add
491	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  j)));  [CE]  cannot  find  symbol  nobs  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  j)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	4	None	add
492	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  d  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));	  	non-compiled	[CE]  cannot  find  symbol  d	4	None	add
493	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  h)));  [CE]  cannot  find  symbol  h  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  h)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  h)));	  	non-compiled	[CE]  cannot  find  symbol  h	4	None	add
494	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    NObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	136	6	replace
495	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    NObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	136	6	replace
496	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	59	2	add
497	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	59	2	add
498	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	59	2	add
499	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	59	2	add
500	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  ';'  expected	59	None	add
501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	8	6	replace
502	[BUG]  [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	8	6	replace
503	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	8	2	replace
504	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	8	2	replace
505	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  l)));  [CE]  cannot  find  symbol  n  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  l)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  l)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    n    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	119	None	replace
506	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDimension();	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t,    i);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
507	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDi  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getRowDi	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t,    i);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	132	None	replace
508	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  d)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  d)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  d)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  n	20	None	replace
509	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	48	None	add
510	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r)  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r)  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r)	  	non-compiled	[CE]  ')'  expected	48	None	add
511	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
512	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
513	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  d  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    tDistribution.cumulativeProbability(t)));    	non-compiled	[CE]  cannot  find  symbol  d	9	None	replace
514	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    numberOfObservations    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	160	6	replace
515	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    numberOfObservations    -    2)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	160	6	replace
516	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	66	None	replace
517	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r))  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r))  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r))	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  ')'  expected	66	None	replace
518	[BUG]  [BUGGY]  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  nVars)));  [CE]  cannot  find  symbol  relativeProbability  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  nVars)));	  t    =    Math.abs(relativeProbability    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  relativeProbability	81	None	replace
519	[BUG]  [BUGGY]  t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  d  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	  t    =    Math.abs(relativeProbability    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  d	81	None	replace
520	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  n  *  r)));  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  n  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  n  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    nobs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	67	None	replace
521	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  r)));  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    nobs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	67	None	replace
522	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    nobs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	67	None	replace
523	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    nobs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  n	21	None	replace
524	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	36	None	add
525	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  2);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  2);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  2);	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	36	None	add
526	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	36	4	add
527	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	36	4	add
528	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	55	6	replace
529	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	55	6	replace
530	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  <identifier>  expected	110	None	replace
531	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  '('  or  '['  expected	110	None	replace
532	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r))  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r))  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        r)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r))	  	non-compiled	[CE]  ')'  expected	105	None	add
533	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    noObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	153	6	replace
534	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    noObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	153	6	replace
535	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    noObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  n	153	None	replace
536	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	129	6	replace
537	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	129	6	replace
538	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	63	None	add
539	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r)  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r)  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r)	  	non-compiled	[CE]  ')'  expected	63	None	add
540	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
541	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	63	None	add
542	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    NObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  n	154	None	replace
543	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  ';'  expected	26	None	add
544	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	115	None	add
545	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r)  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r)  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r)	  	non-compiled	[CE]  ')'  expected	115	None	add
546	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  illegal  start  of  expression	115	None	add
547	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	115	2	add
548	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	115	2	add
549	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  nVars)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	50	None	replace
550	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  t,  covarianceMatrix.cumulativeProbability(t));  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  t,  covarianceMatrix.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  t,  covarianceMatrix.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    t.cumulativeProbability(t));    	non-compiled	[CE]  ')'  expected	47	None	replace
551	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  r.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  r.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  r.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    t.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	47	None	replace
552	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  l)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  l)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  l)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    l)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	52	None	replace
553	[BUG]  [BUGGY]  double  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  l)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                      AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  l)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  l)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    l)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	52	None	replace
554	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  Obs);  int  nVars  =  correlationMatrix.getRowDi  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  Obs);  int  nVars  =  correlationMatrix.getRowDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  Obs);  int  nVars  =  correlationMatrix.getRowDi	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	130	None	replace
555	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getRowD  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getRowD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getRowD	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	130	None	replace
556	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t)    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
557	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
558	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
559	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    t.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
560	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    	non-compiled	[CE]  cannot  find  symbol	145	None	replace
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	6	replace
562	[BUG]  [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	11	6	replace
563	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
564	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
565	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getEntryDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getEntryDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getEntryDimension();  int  nobs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nobs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
566	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	24	2	add
567	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	24	2	add
568	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  0d  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  0d  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  0d  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  ';'  expected	24	None	add
569	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	10	None	add
570	[BUG]  [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  Integer  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                int        nObs        =        correlationMatrix.getColumnDimension();        int    nobs    =    correlationMatrix.getColumnDimension();    Integer  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	92	None	add
571	[BUG]  [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                int        nObs        =        correlationMatrix.getColumnDimension();        int    nobs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getRowDimension();  int  nobs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	92	None	add
572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  3)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  3)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    	compilable	  [FE]  AssertionFailedError  	152	6	replace
573	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  3)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  3)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  3)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    	compilable	  [FE]  AssertionFailedError  	152	6	replace
574	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  3)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  3)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    	compilable	  [FE]  AssertionFailedError  	152	6	replace
575	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  3)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  3)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  3)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    	compilable	  [FE]  AssertionFailedError  	152	6	replace
576	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  4)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  4)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    	compilable	  [FE]  AssertionFailedError  	152	6	replace
577	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  4)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  4)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  4)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    	compilable	  [FE]  AssertionFailedError  	152	6	replace
578	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  nObs)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  nObs)));	  t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	23	6	replace
579	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  nObs)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  nObs)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  nObs)));	  t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	23	6	replace
580	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	3	replace
581	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	3	replace
582	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  r)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	7	replace
583	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  r)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	7	replace
584	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	147	4	add
585	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	147	4	add
586	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	147	4	add
587	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	147	4	add
588	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    int  numberOfObservations  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	147	4	add
589	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    int  numberOfObservations  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	147	4	add
590	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	147	None	add
591	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  t)));  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  n	98	None	replace
592	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
593	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (3  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *  (3  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	62	4	replace
594	[BUG]  [BUGGY]  out[i][j]  =  2  *  (3  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (3  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (3  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	62	4	replace
595	[BUG]  [BUGGY]  out[i][j]  =  1  /  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  /  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  /  tDistribution.cumulativeProbability(t));	  out[i][j]    =    1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	29	None	replace
596	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  correlationMatrix.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  correlationMatrix.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  correlationMatrix.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
597	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	139	4	replace
598	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	139	4	replace
599	[BUG]  [BUGGY]  double  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(nVars  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	51	None	replace
600	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	109	6	replace
601	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	109	6	replace
602	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  l)));  [CE]  cannot  find  symbol  l  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  l)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nVars  *  l)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  l	109	None	replace
603	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	112	None	add
604	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	7	2	add
605	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	7	2	add
606	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	7	2	add
607	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	7	2	add
608	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));	  out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
609	[BUG]  [BUGGY]  out[i][j]  =  r  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  r  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  r  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    t    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	141	None	replace
610	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  covarianceMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	16	None	replace
611	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	16	None	replace
612	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  d)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  d)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    d)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	91	None	replace
613	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r)));  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	106	None	replace
614	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
615	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r))  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r))  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r))	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    	non-compiled	[CE]  ')'  expected	106	None	replace
616	[BUG]  [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  int  numberOfObservations  =  correlationMatrix.getRelativeProbability();  [CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  int  numberOfObservations  =  correlationMatrix.getRelativeProbability();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int    numberOfObservations    =    correlationMatrix.getRowDimension();    int  numberOfObservations  =  correlationMatrix.getRelativeProbability();	  	non-compiled	[CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()	87	None	add
617	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    numberOfObservations    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
618	[BUG]  [BUGGY]  out[i][j]  =  2  *  t  -  correlationMatrix.cumulativeProbability(r));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  t  -  correlationMatrix.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  t  -  correlationMatrix.cumulativeProbability(r));	  out[i][j]    =    2    *    t    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	127	None	replace
619	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	18	None	replace
620	[BUG]  [BUGGY]  int  nObs  =  datasetMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  datasetMatrix  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  datasetMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  datasetMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  datasetMatrix	18	None	replace
621	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nObs;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
622	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  covarianceMatrix.cumulativeProbability(r));  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  covarianceMatrix.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  covarianceMatrix.cumulativeProbability(r));	  out[i][j]    =    2    *(t    -    correlationMatrix.cumulativeProbability(r));    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	134	None	replace
623	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	74	None	replace
624	[BUG]  [BUGGY]  int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnD  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnD	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  >  expected	28	None	replace
625	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ';'  expected	121	None	replace
626	[BUG]  [BUGGY]  int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnD	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  >  expected	121	None	replace
627	[BUG]  [BUGGY]  out[i][j]  =  0d  -  correlationMatrix.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  -  correlationMatrix.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  -  correlationMatrix.cumulativeProbability(t));	  out[i][j]    =    0d    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	30	None	replace
628	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	77	3	add
629	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(2  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	77	3	add
630	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  nVars)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
631	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *(  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	54	2	add
632	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *(  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	54	2	add
633	[BUG]  [BUGGY]  out[i][j]  =  2  *  nVars  -  correlationMatrix.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  nVars  -  correlationMatrix.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  nVars  -  correlationMatrix.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	126	None	replace
634	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  <identifier>  expected	126	None	replace
635	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	45	None	replace
636	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	45	None	replace
637	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	60	6	replace
638	[BUG]  [BUGGY]  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	60	6	replace
639	[BUG]  [BUGGY]  out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (-  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	60	None	replace
640	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	117	None	add
641	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  2);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  2);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  2);	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	117	None	add
642	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension()  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension()  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension()	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ';'  expected	137	None	replace
643	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension()  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension()  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension()	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ';'  expected	137	None	replace
644	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  l)));  [CE]  cannot  find  symbol  l  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  l)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  l)));	  	non-compiled	[CE]  cannot  find  symbol  l	22	None	add
645	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
646	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
647	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
648	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1d  *(1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  1d  *(1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	compilable	  [FE]  AssertionFailedError  	148	6	replace
649	[BUG]  [BUGGY]  out[i][j]  =  1d  *(1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1d  *(1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1d  *(1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	compilable	  [FE]  AssertionFailedError  	148	6	replace
650	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.abs(r  *  Math.sqrt  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.abs(r  *  Math.sqrt  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.abs(r  *  Math.sqrt	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ']'  expected	125	None	replace
651	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulative  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulative  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulative	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ']'  expected	125	None	replace
652	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	150	6	replace
653	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  j  -  2)/(1  -  nVars  *  r)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	150	6	replace
654	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionI  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionI  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionI	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	114	None	replace
655	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nobs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  nobs  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nobs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nobs  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	13	None	add
656	[BUG]  [BUGGY]  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [CE]  cannot  find  symbol  relativeProbability  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    	non-compiled	[CE]  cannot  find  symbol  relativeProbability	5	None	replace
657	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(3  -  nVars  *  3)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(3  -  nVars  *  3)));	  	compilable	  [FE]  AssertionFailedError  	151	4	add
658	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(3  -  nVars  *  3)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(3  -  nVars  *  3)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(3  -  nVars  *  3)));	  	compilable	  [FE]  AssertionFailedError  	151	4	add
659	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  j)));  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    n    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	104	None	replace
660	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  l)));  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  l)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  l)));	  t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    n    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	104	None	replace
661	[BUG]  [BUGGY]  int  nObs  =  matrix.getEntryDimension();  [CE]  cannot  find  symbol  matrix  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  matrix.getEntryDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  matrix.getEntryDimension();	  int    nObs    =    correlationMatrix.getEntryDimension();    	non-compiled	[CE]  cannot  find  symbol  matrix	133	None	replace
662	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r)    	non-compiled	[CE]  ')'  expected	124	None	replace
663	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  t,  correlationMatrix.cumulativeProbability(r));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  t,  correlationMatrix.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  t,  correlationMatrix.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    r.cumulativeProbability(t));    	non-compiled	[CE]  ')'  expected	46	None	replace
664	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
665	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	compilable	  [FE]  AssertionFailedError  	146	6	replace
666	[BUG]  [BUGGY]  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	compilable	  [FE]  AssertionFailedError  	146	6	replace
667	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	142	None	add
668	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	155	None	add
669	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	155	None	add
670	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDi  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDi	  	non-compiled	[CE]  ';'  expected	155	None	add
671	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension()  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension()  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension()	  	non-compiled	[CE]  ';'  expected	155	None	add
672	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(l  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  l  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(l  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    t  =  Math.abs(l  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  l	108	None	add
673	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
674	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	40	2	add
675	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  1d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	40	2	add
676	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nobs  -  2)/(1  -  t  *  r)));  [CE]  cannot  find  symbol  nobs  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nobs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nobs  -  2)/(1  -  t  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	144	None	add
677	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(r));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  correlationMatrix.cumulativeProbability(r));	  out[i][j]    =    2d    *    (1    -    t.cumulativeProbability(r));    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
678	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nobs  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                      AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nobs  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nobs  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	76	None	replace
679	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nObs  =  covarianceMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  int  nObs  =  covarianceMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getRowDimension();  int  nObs  =  covarianceMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nObs    =    covarianceMatrix.getColumnDimension();    	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	17	None	replace
680	[BUG]  [BUGGY]  out[i][j]  =  3  *  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  3  *  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  3  *  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	122	None	replace
681	[BUG]  [BUGGY]  t  =  Math.abs(len  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  len  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(len  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(len  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  t    =    Math.abs(relativeProbability    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  len	35	None	replace
682	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  k)));  [CE]  cannot  find  symbol  k  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  k)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  k)));	  	non-compiled	[CE]  cannot  find  symbol  k	4	None	add
683	[BUG]  [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t))  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t))  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	                t        =        Math.abs(r        *        Math.sqrt((nObs        -        2)/(1        -        r        *        t)));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t))	  	non-compiled	[CE]  ')'  expected	97	None	add
684	[BUG]  [BUGGY]  int  nObs  =  this.covarianceMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  this.covarianceMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  this.covarianceMatrix.getColumnDimension();	  int    nObs    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	70	None	replace
685	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	138	None	add
686	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  r  =  correlationMatrix.getRowDimension();  [CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  r  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    int  r  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  r  is  already  defined  in  method  getCorrelationPValues()	138	None	add
687	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  l)));  [CE]  cannot  find  symbol  l  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  l)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  l)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    d)));    	non-compiled	[CE]  cannot  find  symbol  l	131	None	replace
688	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	56	None	add
689	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumul  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumul  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumul	  	non-compiled	[CE]  ')'  expected	56	None	add
690	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getRowDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getRowDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nVars  =  correlationMatrix.getRowDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	56	None	add
691	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumul  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumul  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumul	  	non-compiled	[CE]  ')'  expected	56	None	add
692	[BUG]  [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	164	None	replace
693	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    NObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	136	None	replace
694	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	27	3	replace
695	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	27	3	replace
696	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  n)));  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  n)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  n)));	  out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	27	None	replace
697	[BUG]  [BUGGY]  int  numberOfObservations  =  dataMatrix.getColumnDimension();  Int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  dataMatrix.getColumnDimension();  Int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  dataMatrix.getColumnDimension();  Int  numberOfObservations  =  correlationMatrix.getColumnDimension();	          int    numberOfObservations    =    correlationMatrix.getColumnDimension();    Int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	84	None	replace
698	[BUG]  [BUGGY]  int  numberOfObservations  =  dataMatrix.getColumnDimension();  Int  numberOfObservations  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  dataMatrix.getColumnDimension();  Int  numberOfObservations  =  dataMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  dataMatrix.getColumnDimension();  Int  numberOfObservations  =  dataMatrix.getColumnDimension();	          int    numberOfObservations    =    correlationMatrix.getColumnDimension();    Int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	84	None	replace
699	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  +  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  +  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	59	2	add
700	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  +  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  +  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  +  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	59	2	add
701	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  NObs  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  NObs	13	None	add
702	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  noObs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  noObs  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  noObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  noObs  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  noObs	13	None	add
703	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    noObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	153	6	replace
704	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    noObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	153	6	replace
705	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    noObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  ')'  expected	153	None	replace
706	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t))  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t))  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t))	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    noObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  ')'  expected	153	None	replace
707	[BUG]  [BUGGY]  out[i][j]  =  2d  *  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    	non-compiled	[CE]  ';'  expected	145	None	replace
708	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  ';'  expected	40	None	add
709	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *(  t  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *(  t  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	40	2	add
710	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *(  t  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *(  t  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *(  t  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	40	2	add
711	[BUG]  [BUGGY]  double  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    l)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	52	None	replace
712	[BUG]  [BUGGY]  int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getColumnDi  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getColumnDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getColumnDi	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t,    i);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  >  expected	132	None	replace
713	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  j);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  j);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  j);  int  nVars  =  correlationMatrix.getColumnDimension();	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t,    i);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
714	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i  +  1,  nVars);  int  nVars  =  correlationMatrix.get  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i  +  1,  nVars);  int  nVars  =  correlationMatrix.get  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i  +  1,  nVars);  int  nVars  =  correlationMatrix.get	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t,    i);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	132	None	replace
715	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getDoubleDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getDoubleDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getDoubleDimension();  int  nobs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nobs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
716	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getNodeDimension();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getNodeDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getNodeDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    int    nobs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	155	2	add
718	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	155	2	add
719	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));	  	compilable	  [FE]  AssertionFailedError  	155	3	add
720	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));	  	compilable	  [FE]  AssertionFailedError  	155	3	add
721	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(3    -    tDistribution.cumulativeProbability(t));    TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	155	None	add
722	[BUG]  [BUGGY]  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nVars  =  correlationMatrix.getColumnDimension();	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	101	None	replace
723	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs,  j);  int  numberOfObservations  =  correlationMatrix.get  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs,  j);  int  numberOfObservations  =  correlationMatrix.get  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs,  j);  int  numberOfObservations  =  correlationMatrix.get	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	101	None	replace
724	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  2);  int  numberOfObservations  =  correlationMatrix.getColumnDi  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  2);  int  numberOfObservations  =  correlationMatrix.getColumnDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  2);  int  numberOfObservations  =  correlationMatrix.getColumnDi	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	101	None	replace
725	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2d  *  Math.sqrt((  [CE]  ']'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2d  *  Math.sqrt((  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2d  *  Math.sqrt((	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ']'  expected	125	None	replace
726	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0d;  }  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0d;  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  0d;  }	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ']'  expected	125	None	replace
727	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.sqrt((  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.sqrt((  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  Math.sqrt((	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double[][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ']'  expected	125	None	replace
728	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	27	3	replace
729	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	27	3	replace
730	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  double  j  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  [CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  double  j  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    double  j  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  variable  j  is  already  defined  in  method  getCorrelationPValues()	36	None	add
731	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    TDistribution  tDistribution  =  new  TDistributionImpl(nVars);	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	36	None	add
732	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	113	4	replace
733	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getRowDimension();	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	113	4	replace
734	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    }    	non-compiled	[CE]  '('  or  '['  expected	94	None	replace
735	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  NOBs  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  r)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((    NObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  NOBs	136	None	replace
736	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	58	None	replace
737	[BUG]  [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	58	None	replace
738	[BUG]  [BUGGY]  int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getColumnD  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getColumnD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getColumnD	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  >  expected	130	None	replace
739	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  2);  int  nVars  =  correlationMatrix.getColumnDi  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  2);  int  nVars  =  correlationMatrix.getColumnDi  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  2);  int  nVars  =  correlationMatrix.getColumnDi	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t    *    nObs);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	130	None	replace
740	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	79	3	add
741	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  	compilable	  [FE]  AssertionFailedError  	79	3	add
742	[BUG]  [BUGGY]  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                      AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(R  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(2    -    nVars    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	76	None	replace
743	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  [CE]  cannot  find  symbol  l  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    3)));    t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));	  	non-compiled	[CE]  cannot  find  symbol  l	151	None	add
744	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  0d  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  out[i][j]  =  0d  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    out[i][j]  =  0d  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  ';'  expected	26	None	add
745	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.get  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.get  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.get	          for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars    -    1);    int    numberOfObservations    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ';'  expected	121	None	replace
746	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getNumberOfObservations();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getNumberOfObservations();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getNumberOfObservations();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	138	None	add
747	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  '('  or  '['  expected	43	None	replace
748	[BUG]  [BUGGY]  out[i][j]  =  1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	43	None	replace
749	[BUG]  [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	43	None	replace
750	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(  -  tDistribution.cumulativeProbability(r));  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	56	None	add
751	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(  t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(  t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(  t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	56	None	add
752	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ')'  expected	114	None	replace
753	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
754	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ')'  expected	114	None	replace
755	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
756	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  3d  /  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  3d  /  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	37	5	replace
757	[BUG]  [BUGGY]  out[i][j]  =  3d  /  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  3d  /  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  3d  /  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2d    /    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	37	5	replace
758	[BUG]  [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    d)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	91	None	replace
759	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ')'  expected	110	None	replace
760	[BUG]  [BUGGY]  out[i][j]  =  1  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *(2  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ')'  expected	110	None	replace
761	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  '('  or  '['  expected	110	None	replace
762	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [CE]  cannot  find  symbol  d  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));	  	non-compiled	[CE]  cannot  find  symbol  d	4	None	add
763	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [CE]  cannot  find  symbol  l  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    j)));    t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));	  	non-compiled	[CE]  cannot  find  symbol  l	4	None	add
764	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars,    i    +    1);    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    }    	compilable	  [FE]  AssertionFailedError  	158	4	replace
765	[BUG]  [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  *(2  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nVars,    i    +    1);    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    }    	compilable	  [FE]  AssertionFailedError  	158	4	replace
766	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	150	6	replace
767	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  j)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  1)/(1  -  nObs  *  j)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    	compilable	  [FE]  AssertionFailedError  	150	6	replace
768	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  d)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  d)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    nVars)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	164	None	replace
769	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  d  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  d	20	None	replace
770	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  /  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  /  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	118	6	replace
771	[BUG]  [BUGGY]  out[i][j]  =  0d  /  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  /  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  /  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	118	6	replace
772	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t)  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  t)	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    	non-compiled	[CE]  ')'  expected	98	None	replace
773	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  r  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
774	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    t)));    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
775	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    	compilable	  [FE]  AssertionFailedError  	162	6	replace
776	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    	compilable	  [FE]  AssertionFailedError  	162	6	replace
777	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));	  	compilable	  [FE]  AssertionFailedError  	144	3	add
778	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  t  *  r)));	  	compilable	  [FE]  AssertionFailedError  	144	3	add
779	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  t  *  r)));  [CE]  cannot  find  symbol  NObs  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  t  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    t    *    r)));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  t  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  NObs	144	None	add
780	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	147	None	add
781	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	147	None	add
782	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        tDistribution    =    new    TDistributionImpl(nVars    -    1);    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1	  	non-compiled	[CE]  ')'  expected	147	None	add
783	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	45	None	replace
784	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [CE]  '('  or  '['  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  correlationMatrix.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  '('  or  '['  expected	45	None	replace
785	[BUG]  [BUGGY]  out[i][j]  =  2d  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(n	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    2);    int    nVars    =    correlationMatrix.getColumnDi    	non-compiled	[CE]  ')'  expected	45	None	replace
786	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  t.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    int    nVars    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ')'  expected	111	None	replace
787	[BUG]  [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  n)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                      AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  n)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  n)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    n)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	53	None	replace
788	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	112	None	add
789	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getNumberOfObservations();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getNumberOfObservations();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getNumberOfObservations();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	112	None	add
790	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	115	2	add
791	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	115	2	add
792	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  TDistribution  tDistribution  =  new  TDistributionImpl(t,  nVars  -  2);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  TDistribution  tDistribution  =  new  TDistributionImpl(t,  nVars  -  2);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    TDistribution  tDistribution  =  new  TDistributionImpl(t,  nVars  -  2);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	115	None	add
793	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(r));    TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	115	None	add
794	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [CE]  cannot  find  symbol  d  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));	  	non-compiled	[CE]  cannot  find  symbol  d	161	None	add
795	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [CE]  cannot  find  symbol  l  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));	  	non-compiled	[CE]  cannot  find  symbol  l	161	None	add
796	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
797	[BUG]  [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));	  double    t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    nVars)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	157	None	replace
798	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  correlationMatrix.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TD	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
799	[BUG]  [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	126	None	replace
800	[BUG]  [BUGGY]  out[i][j]  =  2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	126	None	replace
801	[BUG]  [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (2    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	62	None	replace
802	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  r  *  t)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	129	6	replace
803	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  r  *  t)));	  t    =    Math.abs(t    *    Math.sqrt((    nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	129	6	replace
804	[BUG]  [BUGGY]  out[i][j]  =  1d  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1d  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1d  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	41	None	replace
805	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  2)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  2)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	78	6	replace
806	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  2)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  2)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  2)));	  t    =    Math.abs(r    *    Math.sqrt((    nObs    -    1)/(1    -    nVars    *    r)));    	compilable	  [FE]  AssertionFailedError  	78	6	replace
807	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	117	3	add
808	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    0d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	117	3	add
809	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	48	2	add
810	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	48	2	add
811	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  }  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	48	None	add
812	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r)  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r)  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r)	  	non-compiled	[CE]  ')'  expected	48	None	add
813	[BUG]  [BUGGY]  out[i][j]  =  2d  *  t  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  t  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  t  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution    =    new    TDistributionImpl(nVars    -    1);    	non-compiled	[CE]  ';'  expected	148	None	replace
814	[BUG]  [BUGGY]  out[i][j]  =  2  *(r  -  t,  covarianceMatrix.cumulativeProbability(t));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(r  -  t,  covarianceMatrix.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(r  -  t,  covarianceMatrix.cumulativeProbability(t));	  out[i][j]    =    2    *(r    -    t.cumulativeProbability(t));    	non-compiled	[CE]  ')'  expected	165	None	replace
815	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [CE]  '('  or  '['  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(nObs    -    1);    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t)    	non-compiled	[CE]  '('  or  '['  expected	95	None	replace
816	[BUG]  [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  t  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  t  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  t	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ')'  expected	11	None	replace
817	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [CE]  cannot  find  symbol  d  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  cannot  find  symbol  d	149	None	add
818	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [CE]  cannot  find  symbol  l  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    j)));    t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	  	non-compiled	[CE]  cannot  find  symbol  l	149	None	add
819	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	63	None	add
820	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	63	None	add
821	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(  t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *(  t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	54	2	add
822	[BUG]  [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(  t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *(  t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *        (1        -        tDistribution.cumulativeProbability(r));        out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *(  t  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	54	2	add
823	[BUG]  [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	60	None	replace
824	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	3	replace
825	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	3	replace
826	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	3	replace
827	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	3	replace
828	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  t)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	3	replace
829	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  t)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  t)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  t)));	  out[i][j]    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	25	3	replace
830	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  dataMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  dataMatrix.getColumnDimension();  Int  nObs  =  dataMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	18	None	replace
831	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]                AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  covarianceMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();	          int    nObs    =    correlationMatrix.getColumnDimension();    Int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	18	None	replace
832	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int    i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	12	None	replace
833	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(d  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  d  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(d  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    t  =  Math.abs(d  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  d	108	None	add
834	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(R  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  R  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  t  =  Math.abs(R  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nVars    -    2)/(1    -    r    *    t)));    t  =  Math.abs(R  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  R	108	None	add
835	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  /  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(t  /  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	64	5	replace
836	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  /  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  /  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  /  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *(t    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	64	5	replace
837	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getRowDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getRowDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nVars  =  correlationMatrix.getRowDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	10	None	add
838	[BUG]  [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2        *(2        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nVars  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(1  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	10	None	add
839	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((  numberOfObservations  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  numberOfObservations  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(t  *  Math.sqrt((  numberOfObservations  -  2)/(1  -  r  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(t  *  Math.sqrt((  numberOfObservations  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  numberOfObservations	22	None	add
840	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  double  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  double  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int    nObs    =    correlationMatrix.getRowDimension();    double  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	69	None	add
841	[BUG]  [BUGGY]  out[i][j]  =  2d  *(t  -  t.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  *(t  -  t.cumulativeProbability(t));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *(t  -  t.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    t.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
842	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  correlationMatrix.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
843	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [CE]  cannot  find  symbol  l  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    t)));    t  =  Math.abs(l  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  l	33	None	add
844	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [CE]  cannot  find  symbol  d  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t    =    Math.abs(r    *    Math.sqrt((    nObs    -    2)/(1    -    nVars    *    t)));    t  =  Math.abs(d  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  d	33	None	add
845	[BUG]  [BUGGY]  out[i][j]  =  2  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	139	None	replace
846	[BUG]  [BUGGY]  out[i][j]  =  2  *  t  -  correlationMatrix.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  t  -  correlationMatrix.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  t  -  correlationMatrix.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	139	None	replace
847	[BUG]  [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	139	None	replace
848	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  /  (1  -  tDistribution.  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  /  (1  -  tDistribution.  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  /  (1  -  tDistribution.	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int    i    =    0;    i    <    nVars;    i++)    {    out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
849	[BUG]  [BUGGY]  int  numberOfObservations  =  t  *  correlationMatrix.getRowDimension();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  numberOfObservations  =  t  *  correlationMatrix.getRowDimension();  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  t  *  correlationMatrix.getRowDimension();	  int    numberOfObservations    =    correlationMatrix.getRowDimension();    	non-compiled	[CE]  possible  loss  of  precision	88	None	replace
850	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r)  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r)  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  n  *  r)	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(2    -    r    *    r)));    	non-compiled	[CE]  ')'  expected	106	None	replace
851	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	23	6	replace
852	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	  t    =    Math.abs(t    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	23	6	replace
853	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  NOBs  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  t)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  NOBs  -  2)/(1  -  r  *  t)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t    =    Math.abs(r    *    Math.sqrt((    NObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  NOBs	154	None	replace
854	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
855	[BUG]  [BUGGY]  out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getColumnDimension();    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    }    	non-compiled	[CE]  ';'  expected	137	None	replace
856	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  d  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [BUGGY]      out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));	          t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	non-compiled	[CE]  cannot  find  symbol  d	68	None	replace
857	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r)    	non-compiled	[CE]  ')'  expected	124	None	replace
858	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int    i    =    0;    i    <    nVars;    i++)    {    double    r    =    correlationMatrix.getEntry(i,    j);    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r)    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
859	[BUG]  [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	55	None	replace
860	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	142	None	add
861	[BUG]  [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getNumberOfObservations();  [CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  int  nVars  =  correlationMatrix.getNumberOfObservations();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]        =        2d        *        (1        -        tDistribution.cumulativeProbability(t));        int    nObs    =    correlationMatrix.getColumnDimension();    int  nVars  =  correlationMatrix.getNumberOfObservations();	  	non-compiled	[CE]  variable  nVars  is  already  defined  in  method  getCorrelationPValues()	142	None	add
862	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getRowDimension();	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
863	[BUG]  [BUGGY]  int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  >  expected  [FE]          AssertionFailedError      [CONTEXT]      TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));      [BUGGY]  int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]      }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();	  for(int    i    =    0;    i    <    nVars;    i++)    {    TDistribution    tDistribution    =    new    TDistributionImpl(t);    int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  >  expected	100	None	replace
