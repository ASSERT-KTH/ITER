bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	compilable	  [FE]  AssertionFailedError  	13	6	replace
2	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	compilable	  [FE]  AssertionFailedError  	13	6	replace
3	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [CE]  cannot  find  symbol  d  [FE]                  AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	non-compiled	[CE]  cannot  find  symbol  d	13	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	compilable	  [FE]  AssertionFailedError  	13	6	replace
5	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  j)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	compilable	  [FE]  AssertionFailedError  	13	6	replace
6	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));  [CE]  cannot  find  symbol  l  [FE]                      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	non-compiled	[CE]  cannot  find  symbol  l	13	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	2	2	add
8	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	2	2	add
9	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  tDistribution.cumulativeProbability(t)));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  tDistribution.cumulativeProbability(t)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  tDistribution.cumulativeProbability(t)));	  	non-compiled	[CE]  ')'  expected	2	None	add
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	2	2	add
11	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	2	2	add
12	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int  i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));	  	non-compiled	[CE]  ';'  expected	2	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	2	3	add
14	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	2	3	add
15	[BUG]  [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	21	None	add
16	[BUG]  [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	21	None	add
17	[BUG]  [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  covarianceMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  int  nObs  =  covarianceMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        int    nObs    =    correlationMatrix.getColumnDimension();    int  nObs  =  covarianceMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	21	None	add
18	[BUG]  [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  Int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        int    nObs    =    correlationMatrix.getColumnDimension();    Int  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  cannot  find  symbol	21	None	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	7	3	add
20	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	7	3	add
21	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  nobs  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	7	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	      	compilable	  [FE]  AssertionFailedError  	6	6	replace
23	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	      	compilable	  [FE]  AssertionFailedError  	6	6	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	      	compilable	  [FE]  AssertionFailedError  	6	5	replace
25	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	      	compilable	  [FE]  AssertionFailedError  	6	5	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	      	compilable	  [FE]  AssertionFailedError  	6	5	replace
27	[BUG]  [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  Math.abs(t  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	      	compilable	  [FE]  AssertionFailedError  	6	5	replace
28	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
29	[BUG]  [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	20	None	replace
30	[BUG]  [BUGGY]  out[i][j]  =  0d  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  0d  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	20	None	replace
31	[BUG]  [BUGGY]  out[i][j]  =  2  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	20	None	replace
32	[BUG]  [BUGGY]  out[i][j]  =  0  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  0  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	20	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	8	6	replace
34	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  t)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	8	6	replace
35	[BUG]  [BUGGY]  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  relativeProbability  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  cannot  find  symbol  relativeProbability	8	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	19	5	replace
37	[BUG]  [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  /  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	19	5	replace
38	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
39	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(r));  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  t.cumulativeProbability(r));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	19	None	replace
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	18	2	add
41	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));	  	compilable	  [FE]  AssertionFailedError  	18	2	add
42	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  }  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	18	None	add
43	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
44	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowDimension();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
45	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDi  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDi  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDi	  	non-compiled	[CE]  ';'  expected	18	None	add
46	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  r.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  r.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  r.cumulativeProbability(t));	  out[i][j]    =    2    *    (1    -    t.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
47	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  t.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	3	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	3	4	replace
49	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	3	4	replace
50	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  r)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	11	None	replace
51	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	11	None	replace
52	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  l)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	11	None	replace
53	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  n)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  n)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  n)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	11	None	replace
54	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	14	2	add
55	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	14	2	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	14	2	add
57	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	14	2	add
58	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));	  	non-compiled	[CE]  ';'  expected	14	None	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	14	2	add
60	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	14	2	add
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	14	2	add
62	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    out[i][j]  =  2  *  (2  -  tDistribution.cumulativeProbability(r));	  	compilable	  [FE]  AssertionFailedError  	14	2	add
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	15	5	replace
64	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	compilable	  [FE]  AssertionFailedError  	15	5	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	9	2	add
66	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	9	2	add
67	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  nobs  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  nobs  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  nobs	9	None	add
68	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  d  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  d)));	  	non-compiled	[CE]  cannot  find  symbol  d	9	None	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	int  nObs  =  correlationMatrix.getRowDimension();	      int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	22	6	replace
70	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  nObs  =  correlationMatrix.getRowDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getRowDimension();	      int    nObs    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	22	6	replace
71	[BUG]  [BUGGY]  int  nObs  =  t.getColumnDimension();  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  nObs  =  t.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  t.getColumnDimension();	      int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	replace
72	[BUG]  [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  nObs  =  covarianceMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  covarianceMatrix.getColumnDimension();	      int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	22	None	replace
73	[BUG]  [BUGGY]  int  nObs  =  t.getRowDimension();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  nObs  =  t.getRowDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  t.getRowDimension();	      int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  double  cannot  be  dereferenced	22	None	replace
74	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	12	None	replace
75	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  nObs  *  r)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	12	None	replace
76	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]                  AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	12	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	10	6	replace
78	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  r)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	10	6	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	10	6	replace
80	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(2  -  nVars  *  r)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	10	6	replace
81	[BUG]  [BUGGY]  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  relativeProbability  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(relativeProbability  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  r)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  relativeProbability	10	None	replace
82	[BUG]  [BUGGY]      int  numberOfObservations  =  correlationMatrix.getColumnDimension();  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  numberOfObservations  =  correlationMatrix.getColumnDimension();  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        int    numberOfObservations    =    correlationMatrix.getColumnDimension();    int  numberOfObservations  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()	16	None	add
83	[BUG]  [BUGGY]      int  numberOfObservations  =  correlationMatrix.getColumnDimension();  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  numberOfObservations  =  correlationMatrix.getColumnDimension();  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        int    numberOfObservations    =    correlationMatrix.getColumnDimension();    int  numberOfObservations  =  correlationMatrix.getRowDimension();	  	non-compiled	[CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()	16	None	add
84	[BUG]  [BUGGY]      int  numberOfObservations  =  correlationMatrix.getColumnDimension();  Int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  numberOfObservations  =  correlationMatrix.getColumnDimension();  Int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        int    numberOfObservations    =    correlationMatrix.getColumnDimension();    Int  numberOfObservations  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
85	[BUG]  [BUGGY]      int  numberOfObservations  =  correlationMatrix.getColumnDimension();  int  numberOfObservations  =  comparisonMatrix.getColumnDimension();  [CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  numberOfObservations  =  correlationMatrix.getColumnDimension();  int  numberOfObservations  =  comparisonMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        int    numberOfObservations    =    correlationMatrix.getColumnDimension();    int  numberOfObservations  =  comparisonMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  numberOfObservations  is  already  defined  in  method  getCorrelationPValues()	16	None	add
86	[BUG]  [BUGGY]  int  numberOfObservations  =  t.getColumnDimension();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  numberOfObservations  =  t.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  t.getColumnDimension();	      int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	int  numberOfObservations  =  correlationMatrix.getRowDimension();	      int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	17	6	replace
88	[BUG]  [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  numberOfObservations  =  correlationMatrix.getRowDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  correlationMatrix.getRowDimension();	      int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	compilable	  [FE]  AssertionFailedError  	17	6	replace
89	[BUG]  [BUGGY]  int  numberOfObservations  =  t.getRowDimension();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  numberOfObservations  =  t.getRowDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  t.getRowDimension();	      int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	replace
90	[BUG]  [BUGGY]  int  numberOfObservations  =  covarianceMatrix.getRowDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  numberOfObservations  =  covarianceMatrix.getRowDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  covarianceMatrix.getRowDimension();	      int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	17	None	replace
91	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  d)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	12	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	        int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	21	2	add
93	[BUG]  [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  int  nobs  =  correlationMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        int    nObs    =    correlationMatrix.getColumnDimension();    int  nobs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	21	2	add
94	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  }  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	18	None	add
95	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t)  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t)  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t)	  	non-compiled	[CE]  ')'  expected	18	None	add
96	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(	  	non-compiled	[CE]  ')'  expected	18	None	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	7	3	add
98	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  t)));	  	compilable	  [FE]  AssertionFailedError  	7	3	add
99	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  correlationMatrix.cumulativeProbability(r));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  correlationMatrix.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  correlationMatrix.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    t.cumulativeProbability(r));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnDi  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnDi  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  numberOfObservations  =  correlationMatrix.getColumnDi	      	non-compiled	[CE]  ';'  expected	6	None	replace
103	[BUG]  [BUGGY]  int  numberOfObservations  =  covarianceMatrix.getColumnDimension();  [CE]  cannot  find  symbol  covarianceMatrix  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  numberOfObservations  =  covarianceMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  covarianceMatrix.getColumnDimension();	      int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  covarianceMatrix	17	None	replace
104	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  r)));  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  n  *  r)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  n	10	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	9	6	add
106	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(2  -  r  *  r)));	  	compilable	  [FE]  AssertionFailedError  	9	6	add
107	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  correlationMatrix.cumulativeProbability(t));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  correlationMatrix.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  (1  -  correlationMatrix.cumulativeProbability(t));	  out[i][j]    =    2    *    (1    -    t.cumulativeProbability(t));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	8	6	replace
109	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nVars  -  2)/(1  -  r  *  t)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	compilable	  [FE]  AssertionFailedError  	8	6	replace
110	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
111	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  1);  int  nVars  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	2	2	add
113	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	2	2	add
114	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDi  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDi  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDi	  	non-compiled	[CE]  ';'  expected	2	None	add
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	19	4	replace
116	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	19	4	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	19	6	replace
118	[BUG]  [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  0d  *  (1  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	19	6	replace
119	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  [CE]  cannot  find  symbol  n  [FE]                AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  n  *  r)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	non-compiled	[CE]  cannot  find  symbol  n	13	None	replace
120	[BUG]  [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  [CE]  cannot  find  symbol  dataMatrix  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  nObs  =  dataMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  dataMatrix.getColumnDimension();	      int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  dataMatrix	22	None	replace
121	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnDi  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnDi  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  int  numberOfObservations  =  correlationMatrix.getColumnDi	  	non-compiled	[CE]  ';'  expected	5	None	add
122	[BUG]  [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	20	None	replace
123	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  }  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	14	None	add
124	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r)  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r)  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getEntry(i,  j);  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r)	  	non-compiled	[CE]  ')'  expected	14	None	add
125	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  }  [CE]  ']'  expected  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  }  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double[][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  }	  	non-compiled	[CE]  ']'  expected	14	None	add
126	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t);  int  numberOfObservations  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
127	[BUG]  [BUGGY]  out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(r));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *  t  -  tDistribution.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    	non-compiled	[CE]  ';'  expected	15	None	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	      	compilable	  [FE]  AssertionFailedError  	6	6	replace
129	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  t)));	      	compilable	  [FE]  AssertionFailedError  	6	6	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t  *  nObs);  int  nVars  =  correlationMatrix.getColumnDimension();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
131	[BUG]  [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [CE]  cannot  find  symbol  d  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(t  *  Math.sqrt((  nObs  -  2)/(1  -  r  *  d)));	      	non-compiled	[CE]  cannot  find  symbol  d	6	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(t,  i);  int  nVars  =  correlationMatrix.getColumnDimension();	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
133	[BUG]  [BUGGY]  int  nObs  =  correlationMatrix.getEntryDimension();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  nObs  =  correlationMatrix.getEntryDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  nObs  =  correlationMatrix.getEntryDimension();	      int    nObs    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
134	[BUG]  [BUGGY]  out[i][j]  =  2  *(t  -  correlationMatrix.cumulativeProbability(r));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(t  -  correlationMatrix.cumulativeProbability(r));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(t  -  correlationMatrix.cumulativeProbability(r));	  out[i][j]    =    2    *    (1    -    t.cumulativeProbability(r));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
135	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  numberOfObservations  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  numberOfObservations  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  numberOfObservations  -  2)/(1  -  r  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  numberOfObservations  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  numberOfObservations	9	None	add
136	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  r  *  r)));  [CE]  cannot  find  symbol  NObs  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));  t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  r  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  r  *  r)));	  	non-compiled	[CE]  cannot  find  symbol  NObs	9	None	add
137	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  }  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    for(int  i  =  0;  i  <  nVars;  i++)  {  double  r  =  correlationMatrix.getColumnDimension();  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	14	None	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	14	2	add
139	[BUG]  [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(r));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *    (1    -    tDistribution.cumulativeProbability(r));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	14	2	add
140	[BUG]  [BUGGY]  int  numberOfObservations  =  correlationMatrix.getNumberOfElements();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  int  numberOfObservations  =  correlationMatrix.getNumberOfElements();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	int  numberOfObservations  =  correlationMatrix.getNumberOfElements();	      int    numberOfObservations    =    correlationMatrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
141	[BUG]  [BUGGY]  out[i][j]  =  t  -  tDistribution.cumulativeProbability(t));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  t  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  t  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    -    tDistribution.cumulativeProbability(t));    	non-compiled	[CE]  ';'  expected	20	None	replace
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	18	2	add
143	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  int  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    int  nObs  =  correlationMatrix.getColumnDimension();	  	compilable	  [FE]  AssertionFailedError  	18	2	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));	  	compilable	  [FE]  AssertionFailedError  	18	3	add
145	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  t  *  r)));	  	compilable	  [FE]  AssertionFailedError  	18	3	add
146	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    TDistribution  tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	non-compiled	[CE]  variable  tDistribution  is  already  defined  in  method  getCorrelationPValues()	18	None	add
147	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
148	[BUG]  [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2d  *  (1  -  tDistribution.cumulativeProbability(t));  tDistribution  =  new  TDistributionImpl(nVars  -  1);  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2d    *    (1    -    tDistribution.cumulativeProbability(t));    tDistribution  =  new  TDistributionImpl(nVars  -  1);	  	compilable	  [FE]  AssertionFailedError  	18	4	add
149	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	compilable	  [FE]  AssertionFailedError  	13	6	replace
150	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  j)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	compilable	  [FE]  AssertionFailedError  	13	6	replace
151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	compilable	  [FE]  AssertionFailedError  	13	6	replace
152	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  3)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    d)));    	compilable	  [FE]  AssertionFailedError  	13	6	replace
153	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  noObs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  noObs  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  noObs  -  2)/(1  -  r  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  noObs  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  noObs	7	None	add
154	[BUG]  [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  r  *  t)));  [CE]  cannot  find  symbol  NObs  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  t)));  t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  r  *  t)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    t  =  Math.abs(r  *  Math.sqrt((  NObs  -  2)/(1  -  r  *  t)));	  	non-compiled	[CE]  cannot  find  symbol  NObs	7	None	add
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	3	4	replace
156	[BUG]  [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(3  -  tDistribution.cumulativeProbability(t));	  out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    	compilable	  [FE]  AssertionFailedError  	3	4	replace
157	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]            AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    t)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	11	None	replace
158	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars,  i  +  1);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  }  [CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars,  i  +  1);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  }  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars,  i  +  1);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  }	  	non-compiled	[CE]  variable  i  is  already  defined  in  method  getCorrelationPValues()	2	None	add
159	[BUG]  [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars,  i  +  1);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t)  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t));  for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars,  i  +  1);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t)  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]    =    2    *(2    -    tDistribution.cumulativeProbability(t));    for(int  i  =  0;  i  <  nVars;  i++)  {  TDistribution  tDistribution  =  new  TDistributionImpl(nVars,  i  +  1);  out[i][j]  =  2  *(2  -  tDistribution.cumulativeProbability(t)	  	non-compiled	[CE]  ')'  expected	2	None	add
160	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  numberOfObservations  -  2)/(1  -  nVars  *  r)));  [CE]  cannot  find  symbol  numberOfObservations  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  numberOfObservations  -  2)/(1  -  nVars  *  r)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  numberOfObservations  -  2)/(1  -  nVars  *  r)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  cannot  find  symbol  numberOfObservations	10	None	replace
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	10	6	replace
162	[BUG]  [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	t  =  Math.abs(r  *  Math.sqrt((  nObs  -  2)/(1  -  nVars  *  nVars)));	      t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	compilable	  [FE]  AssertionFailedError  	10	6	replace
163	[BUG]  [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  double  nObs  =  correlationMatrix.getColumnDimension();  [CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()  [FE]    AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]      int  nObs  =  correlationMatrix.getColumnDimension();  double  nObs  =  correlationMatrix.getColumnDimension();  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	        int    nObs    =    correlationMatrix.getColumnDimension();    double  nObs  =  correlationMatrix.getColumnDimension();	  	non-compiled	[CE]  variable  nObs  is  already  defined  in  method  getCorrelationPValues()	21	None	add
164	[BUG]  [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()  [FE]              AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));  [BUGGY]    out[i][j]  =  2  *  (1  -  tDistribution.cumulativeProbability(t));  }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	double  t  =  Math.abs(r  *  Math.sqrt((  nObs  -  1)/(1  -  nVars  *  nVars)));	      double    t    =    Math.abs(r    *    Math.sqrt((nObs    -    2)/(1    -    r    *    r)));    	non-compiled	[CE]  variable  t  is  already  defined  in  method  getCorrelationPValues()	12	None	replace
165	[BUG]  [BUGGY]  out[i][j]  =  2  *(r  -  t.cumulativeProbability(t));  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    TDistribution  tDistribution  =  new  TDistributionImpl(nObs  -  2);  int  nVars  =  correlationMatrix.getColumnDimension();  double[][]  out  =  new  double[nVars][nVars];  for  (int  i  =  0;  i  <  nVars;  i++)  {  for  (int  j  =  0;  j  <  nVars;  j++)  {  if  (i  ==  j)  {  out[i][j]  =  0d;  }  else  {  double  r  =  correlationMatrix.getEntry(i,  j);  double  t  =  Math.abs(r  *  Math.sqrt((nObs  -  2)/(1  -  r  *  r)));    [BUGGY]  out[i][j]  =  2  *(r  -  t.cumulativeProbability(t));  [BUGGY]    }  }  }  return  new  BlockRealMatrix(out);  }  [CLASS]  PearsonsCorrelation  [METHOD]  getCorrelationPValues  [RETURN_TYPE]  RealMatrix  [VARIABLES]  double[][]  out  TDistribution  tDistribution  boolean  RealMatrix  correlationMatrix  covarianceMatrix  matrix  int  i  j  nObs  nVars  numberOfObservations  double  r  t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	out[i][j]  =  2  *(r  -  t.cumulativeProbability(t));	  out[i][j]    =    2    *    (1    -    t.cumulativeProbability(t));    	non-compiled	[CE]  double  cannot  be  dereferenced	1	None	replace
