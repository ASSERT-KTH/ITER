bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] this(new BlockRealMatrix(data)); [FE] AssertionFailedError testPValueNearZero [CONTEXT] public PearsonsCorrelation(double[][] data) { [BUGGY] this(new BlockRealMatrix(data)); [BUGGY] } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] PearsonsCorrelation(double[][])  double[][] data [VARIABLES] double[][] data boolean RealMatrix correlationMatrix int nObs  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	1.0	68	68	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError testPValueNearZero [CONTEXT] public PearsonsCorrelation(double[][] data) { [BUGGY] [BUGGY] this(new BlockRealMatrix(data)); } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] PearsonsCorrelation(double[][])  double[][] data [VARIABLES] double[][] data boolean RealMatrix correlationMatrix int nObs  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	1.0	68	68	2	add	
3	[BUG] [BUGGY] } [FE] AssertionFailedError testPValueNearZero [CONTEXT] public PearsonsCorrelation(double[][] data) { this(new BlockRealMatrix(data)); [BUGGY] } [BUGGY]  [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] PearsonsCorrelation(double[][])  double[][] data [VARIABLES] double[][] data boolean RealMatrix correlationMatrix int nObs  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	1.0	69	69	2	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError testPValueNearZero [CONTEXT] public PearsonsCorrelation(double[][] data) { this(new BlockRealMatrix(data)); [BUGGY] [BUGGY] } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] PearsonsCorrelation(double[][])  double[][] data [VARIABLES] double[][] data boolean RealMatrix correlationMatrix int nObs  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	1.0	69	69	2	add	
5	[BUG] [BUGGY] TDistribution tDistribution = new TDistributionImpl(nObs - 2); [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { [BUGGY] TDistribution tDistribution = new TDistributionImpl(nObs - 2); [BUGGY] int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	161	161	2	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { [BUGGY] [BUGGY] TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	161	161	2	add	
7	[BUG] [BUGGY] int nVars = correlationMatrix.getColumnDimension(); [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); [BUGGY] int nVars = correlationMatrix.getColumnDimension(); [BUGGY] double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	162	162	2	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); [BUGGY] [BUGGY] int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	162	162	2	add	
9	[BUG] [BUGGY] double[][] out = new double[nVars][nVars]; [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); [BUGGY] double[][] out = new double[nVars][nVars]; [BUGGY] for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	163	163	2	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); [BUGGY] [BUGGY] double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	163	163	2	add	
11	[BUG] [BUGGY] for (int i = 0; i < nVars; i++) { [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; [BUGGY] for (int i = 0; i < nVars; i++) { [BUGGY] for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	164	164	2	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; [BUGGY] [BUGGY] for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	164	164	2	add	
13	[BUG] [BUGGY] for (int j = 0; j < nVars; j++) { [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { [BUGGY] for (int j = 0; j < nVars; j++) { [BUGGY] if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	165	165	2	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { [BUGGY] [BUGGY] for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	165	165	2	add	
15	[BUG] [BUGGY] if (i == j) { [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { [BUGGY] if (i == j) { [BUGGY] out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	166	166	2	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { [BUGGY] [BUGGY] if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	166	166	2	add	
17	[BUG] [BUGGY] out[i][j] = 0d; [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { [BUGGY] out[i][j] = 0d; [BUGGY] } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { [BUGGY] [BUGGY] out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	
19	[BUG] [BUGGY] double r = correlationMatrix.getEntry(i, j); [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { [BUGGY] double r = correlationMatrix.getEntry(i, j); [BUGGY] double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	169	169	2	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError testPValueNearZero [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { [BUGGY] [BUGGY] double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	169	169	2	add	
