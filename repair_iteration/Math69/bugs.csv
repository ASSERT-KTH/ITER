bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] this(new BlockRealMatrix(data)); [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(double[][] data) { [BUGGY] this(new BlockRealMatrix(data)); [BUGGY] } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] PearsonsCorrelation(double[][])  double[][] data [VARIABLES] double[][] data boolean RealMatrix correlationMatrix int nObs  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	1.0	68	68	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(double[][] data) { [BUGGY] [BUGGY] this(new BlockRealMatrix(data)); } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] PearsonsCorrelation(double[][])  double[][] data [VARIABLES] double[][] data boolean RealMatrix correlationMatrix int nObs  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	1.0	68	68	2	add	
3	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(double[][] data) { this(new BlockRealMatrix(data)); [BUGGY] } [BUGGY]  [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] PearsonsCorrelation(double[][])  double[][] data [VARIABLES] double[][] data boolean RealMatrix correlationMatrix int nObs  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	1.0	69	69	2	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(double[][] data) { this(new BlockRealMatrix(data)); [BUGGY] [BUGGY] } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] PearsonsCorrelation(double[][])  double[][] data [VARIABLES] double[][] data boolean RealMatrix correlationMatrix int nObs  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	1.0	69	69	2	add	
5	[BUG] [BUGGY] TDistribution tDistribution = new TDistributionImpl(nObs - 2); [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { [BUGGY] TDistribution tDistribution = new TDistributionImpl(nObs - 2); [BUGGY] int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	161	161	2	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { [BUGGY] [BUGGY] TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	161	161	2	add	
7	[BUG] [BUGGY] int nVars = correlationMatrix.getColumnDimension(); [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); [BUGGY] int nVars = correlationMatrix.getColumnDimension(); [BUGGY] double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	162	162	2	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); [BUGGY] [BUGGY] int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	162	162	2	add	
9	[BUG] [BUGGY] double[][] out = new double[nVars][nVars]; [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); [BUGGY] double[][] out = new double[nVars][nVars]; [BUGGY] for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	163	163	2	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); [BUGGY] [BUGGY] double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	163	163	2	add	
11	[BUG] [BUGGY] for (int i = 0; i < nVars; i++) { [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; [BUGGY] for (int i = 0; i < nVars; i++) { [BUGGY] for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	164	164	2	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; [BUGGY] [BUGGY] for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	164	164	2	add	
13	[BUG] [BUGGY] for (int j = 0; j < nVars; j++) { [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { [BUGGY] for (int j = 0; j < nVars; j++) { [BUGGY] if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	165	165	2	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { [BUGGY] [BUGGY] for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	165	165	2	add	
15	[BUG] [BUGGY] if (i == j) { [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { [BUGGY] if (i == j) { [BUGGY] out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	166	166	2	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { [BUGGY] [BUGGY] if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	166	166	2	add	
17	[BUG] [BUGGY] out[i][j] = 0d; [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { [BUGGY] out[i][j] = 0d; [BUGGY] } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { [BUGGY] [BUGGY] out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	167	167	2	add	
19	[BUG] [BUGGY] double r = correlationMatrix.getEntry(i, j); [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { [BUGGY] double r = correlationMatrix.getEntry(i, j); [BUGGY] double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	169	169	2	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { [BUGGY] [BUGGY] double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	169	169	2	add	
21	[BUG] [BUGGY] double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); [BUGGY] double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); [BUGGY] out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix getCorrelationPValues() throws MathException { TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); [BUGGY] [BUGGY] double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	170	170	2	add	
23	[BUG] [BUGGY] out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); [FE] AssertionFailedError [CONTEXT] TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); [BUGGY] out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); [BUGGY] } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] TDistribution tDistribution = new TDistributionImpl(nObs - 2); int nVars = correlationMatrix.getColumnDimension(); double[][] out = new double[nVars][nVars]; for (int i = 0; i < nVars; i++) { for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); [BUGGY] [BUGGY] out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	171	171	2	add	
25	[BUG] [BUGGY] return new BlockRealMatrix(out); [FE] AssertionFailedError [CONTEXT] for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } [BUGGY] return new BlockRealMatrix(out); [BUGGY] } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	175	175	2	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (int j = 0; j < nVars; j++) { if (i == j) { out[i][j] = 0d; } else { double r = correlationMatrix.getEntry(i, j); double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r))); out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)); } } } [BUGGY] [BUGGY] return new BlockRealMatrix(out); } [CLASS] PearsonsCorrelation [METHOD] getCorrelationPValues [RETURN_TYPE] RealMatrix  [VARIABLES] double[][] out TDistribution tDistribution boolean RealMatrix correlationMatrix covarianceMatrix matrix int i j nObs nVars numberOfObservations double r t  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.5345224838248488	175	175	2	add	
27	[BUG] [BUGGY] nObs = matrix.getRowDimension(); [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(RealMatrix matrix) { checkSufficientData(matrix); [BUGGY] nObs = matrix.getRowDimension(); [BUGGY] correlationMatrix = computeCorrelationMatrix(matrix); } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] RealMatrix)  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix matrix int nObs boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	79	79	2	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(RealMatrix matrix) { checkSufficientData(matrix); [BUGGY] [BUGGY] nObs = matrix.getRowDimension(); correlationMatrix = computeCorrelationMatrix(matrix); } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] RealMatrix)  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix matrix int nObs boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	79	79	2	add	
29	[BUG] [BUGGY] correlationMatrix = computeCorrelationMatrix(matrix); [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(RealMatrix matrix) { checkSufficientData(matrix); nObs = matrix.getRowDimension(); [BUGGY] correlationMatrix = computeCorrelationMatrix(matrix); [BUGGY] } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] RealMatrix)  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix matrix int nObs boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	80	80	2	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(RealMatrix matrix) { checkSufficientData(matrix); nObs = matrix.getRowDimension(); [BUGGY] [BUGGY] correlationMatrix = computeCorrelationMatrix(matrix); } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] RealMatrix)  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix matrix int nObs boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	80	80	2	add	
31	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(RealMatrix matrix) { checkSufficientData(matrix); nObs = matrix.getRowDimension(); correlationMatrix = computeCorrelationMatrix(matrix); [BUGGY] } [BUGGY]  [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] RealMatrix)  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix matrix int nObs boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	81	81	2	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(RealMatrix matrix) { checkSufficientData(matrix); nObs = matrix.getRowDimension(); correlationMatrix = computeCorrelationMatrix(matrix); [BUGGY] [BUGGY] } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] RealMatrix)  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix matrix int nObs boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	81	81	2	add	
33	[BUG] [BUGGY] int nVars = matrix.getColumnDimension(); [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { [BUGGY] int nVars = matrix.getColumnDimension(); [BUGGY] RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	187	187	2	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { [BUGGY] [BUGGY] int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	187	187	2	add	
35	[BUG] [BUGGY] RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); [BUGGY] RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); [BUGGY] for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	188	188	2	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); [BUGGY] [BUGGY] RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	188	188	2	add	
37	[BUG] [BUGGY] for (int i = 0; i < nVars; i++) { [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); [BUGGY] for (int i = 0; i < nVars; i++) { [BUGGY] for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	189	189	2	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); [BUGGY] [BUGGY] for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	189	189	2	add	
39	[BUG] [BUGGY] for (int j = 0; j < i; j++) { [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { [BUGGY] for (int j = 0; j < i; j++) { [BUGGY] double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	190	190	2	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { [BUGGY] [BUGGY] for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	190	190	2	add	
41	[BUG] [BUGGY] double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { [BUGGY] double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); [BUGGY] outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	191	191	2	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { [BUGGY] [BUGGY] double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	191	191	2	add	
43	[BUG] [BUGGY] outMatrix.setEntry(i, j, corr); [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); [BUGGY] outMatrix.setEntry(i, j, corr); [BUGGY] outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	192	192	2	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); [BUGGY] [BUGGY] outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	192	192	2	add	
45	[BUG] [BUGGY] outMatrix.setEntry(j, i, corr); [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); [BUGGY] outMatrix.setEntry(j, i, corr); [BUGGY] } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	193	193	2	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); [BUGGY] [BUGGY] outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	193	193	2	add	
47	[BUG] [BUGGY] outMatrix.setEntry(i, i, 1d); [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } [BUGGY] outMatrix.setEntry(i, i, 1d); [BUGGY] } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	195	195	2	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public RealMatrix computeCorrelationMatrix(RealMatrix matrix) { int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } [BUGGY] [BUGGY] outMatrix.setEntry(i, i, 1d); } return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	195	195	2	add	
49	[BUG] [BUGGY] return outMatrix; [FE] AssertionFailedError [CONTEXT] int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } [BUGGY] return outMatrix; [BUGGY] } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	197	197	2	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] int nVars = matrix.getColumnDimension(); RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars); for (int i = 0; i < nVars; i++) { for (int j = 0; j < i; j++) { double corr = correlation(matrix.getColumn(i), matrix.getColumn(j)); outMatrix.setEntry(i, j, corr); outMatrix.setEntry(j, i, corr); } outMatrix.setEntry(i, i, 1d); } [BUGGY] [BUGGY] return outMatrix; } [CLASS] PearsonsCorrelation [METHOD] computeCorrelationMatrix [RETURN_TYPE] RealMatrix  RealMatrix matrix [VARIABLES] boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nObs nVars numberOfObservations double corr  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.42640143271122083	197	197	2	add	
52	[BUG] [BUGGY] public PearsonsCorrelation(RealMatrix matrix) { [FE] AssertionFailedError [CONTEXT] [BUGGY] public PearsonsCorrelation(RealMatrix matrix) { [BUGGY] checkSufficientData(matrix); nObs = matrix.getRowDimension(); correlationMatrix = computeCorrelationMatrix(matrix); } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] RealMatrix)  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix matrix int nObs boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	77	77	2	replace	
53	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] public PearsonsCorrelation(RealMatrix matrix) { checkSufficientData(matrix); nObs = matrix.getRowDimension(); correlationMatrix = computeCorrelationMatrix(matrix); } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] RealMatrix)  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix matrix int nObs boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	77	77	2	add	
54	[BUG] [BUGGY] checkSufficientData(matrix); [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(RealMatrix matrix) { [BUGGY] checkSufficientData(matrix); [BUGGY] nObs = matrix.getRowDimension(); correlationMatrix = computeCorrelationMatrix(matrix); } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] RealMatrix)  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix matrix int nObs boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	78	78	2	replace	
55	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public PearsonsCorrelation(RealMatrix matrix) { [BUGGY] [BUGGY] checkSufficientData(matrix); nObs = matrix.getRowDimension(); correlationMatrix = computeCorrelationMatrix(matrix); } [CLASS] PearsonsCorrelation [METHOD] <init> [RETURN_TYPE] RealMatrix)  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix matrix int nObs boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	78	78	2	add	
56	[BUG] [BUGGY] for(int i=0; i<xArray.length; i++) { [FE] AssertionFailedError [CONTEXT] public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException { SimpleRegression regression = new SimpleRegression(); if(xArray.length == yArray.length && xArray.length > 1) { [BUGGY] for(int i=0; i<xArray.length; i++) { [BUGGY] regression.addData(xArray[i], yArray[i]); } return regression.getR(); } else { throw MathRuntimeException.createIllegalArgumentException( "invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length); } } [CLASS] PearsonsCorrelation [METHOD] correlation [RETURN_TYPE] double  final double[] xArray final double[] yArray [VARIABLES] SimpleRegression regression boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix double[] xArray yArray int i j nObs nVars numberOfObservations  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	227	227	2	replace	
57	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException { SimpleRegression regression = new SimpleRegression(); if(xArray.length == yArray.length && xArray.length > 1) { [BUGGY] [BUGGY] for(int i=0; i<xArray.length; i++) { regression.addData(xArray[i], yArray[i]); } return regression.getR(); } else { throw MathRuntimeException.createIllegalArgumentException( "invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length); } } [CLASS] PearsonsCorrelation [METHOD] correlation [RETURN_TYPE] double  final double[] xArray final double[] yArray [VARIABLES] SimpleRegression regression boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix double[] xArray yArray int i j nObs nVars numberOfObservations  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	227	227	2	add	
58	[BUG] [BUGGY] regression.addData(xArray[i], yArray[i]); [FE] AssertionFailedError [CONTEXT] public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException { SimpleRegression regression = new SimpleRegression(); if(xArray.length == yArray.length && xArray.length > 1) { for(int i=0; i<xArray.length; i++) { [BUGGY] regression.addData(xArray[i], yArray[i]); [BUGGY] } return regression.getR(); } else { throw MathRuntimeException.createIllegalArgumentException( "invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length); } } [CLASS] PearsonsCorrelation [METHOD] correlation [RETURN_TYPE] double  final double[] xArray final double[] yArray [VARIABLES] SimpleRegression regression boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix double[] xArray yArray int i j nObs nVars numberOfObservations  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	228	228	2	replace	
59	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException { SimpleRegression regression = new SimpleRegression(); if(xArray.length == yArray.length && xArray.length > 1) { for(int i=0; i<xArray.length; i++) { [BUGGY] [BUGGY] regression.addData(xArray[i], yArray[i]); } return regression.getR(); } else { throw MathRuntimeException.createIllegalArgumentException( "invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length); } } [CLASS] PearsonsCorrelation [METHOD] correlation [RETURN_TYPE] double  final double[] xArray final double[] yArray [VARIABLES] SimpleRegression regression boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix double[] xArray yArray int i j nObs nVars numberOfObservations  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	228	228	2	add	
60	[BUG] [BUGGY] return regression.getR(); [FE] AssertionFailedError [CONTEXT] public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException { SimpleRegression regression = new SimpleRegression(); if(xArray.length == yArray.length && xArray.length > 1) { for(int i=0; i<xArray.length; i++) { regression.addData(xArray[i], yArray[i]); } [BUGGY] return regression.getR(); [BUGGY] } else { throw MathRuntimeException.createIllegalArgumentException( "invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length); } } [CLASS] PearsonsCorrelation [METHOD] correlation [RETURN_TYPE] double  final double[] xArray final double[] yArray [VARIABLES] SimpleRegression regression boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix double[] xArray yArray int i j nObs nVars numberOfObservations  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	230	230	2	replace	
61	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException { SimpleRegression regression = new SimpleRegression(); if(xArray.length == yArray.length && xArray.length > 1) { for(int i=0; i<xArray.length; i++) { regression.addData(xArray[i], yArray[i]); } [BUGGY] [BUGGY] return regression.getR(); } else { throw MathRuntimeException.createIllegalArgumentException( "invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length); } } [CLASS] PearsonsCorrelation [METHOD] correlation [RETURN_TYPE] double  final double[] xArray final double[] yArray [VARIABLES] SimpleRegression regression boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix double[] xArray yArray int i j nObs nVars numberOfObservations  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	230	230	2	add	
62	[BUG] [BUGGY] int nRows = matrix.getRowDimension(); [FE] AssertionFailedError [CONTEXT] private void checkSufficientData(final RealMatrix matrix) { [BUGGY] int nRows = matrix.getRowDimension(); [BUGGY] int nCols = matrix.getColumnDimension(); if (nRows < 2 || nCols < 2) { throw MathRuntimeException.createIllegalArgumentException( "insufficient data: only {0} rows and {1} columns.", nRows, nCols); } } [CLASS] PearsonsCorrelation [METHOD] checkSufficientData [RETURN_TYPE] void  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nCols nObs nRows nVars numberOfObservations boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	273	273	2	replace	
63	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void checkSufficientData(final RealMatrix matrix) { [BUGGY] [BUGGY] int nRows = matrix.getRowDimension(); int nCols = matrix.getColumnDimension(); if (nRows < 2 || nCols < 2) { throw MathRuntimeException.createIllegalArgumentException( "insufficient data: only {0} rows and {1} columns.", nRows, nCols); } } [CLASS] PearsonsCorrelation [METHOD] checkSufficientData [RETURN_TYPE] void  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nCols nObs nRows nVars numberOfObservations boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	273	273	2	add	
64	[BUG] [BUGGY] int nCols = matrix.getColumnDimension(); [FE] AssertionFailedError [CONTEXT] private void checkSufficientData(final RealMatrix matrix) { int nRows = matrix.getRowDimension(); [BUGGY] int nCols = matrix.getColumnDimension(); [BUGGY] if (nRows < 2 || nCols < 2) { throw MathRuntimeException.createIllegalArgumentException( "insufficient data: only {0} rows and {1} columns.", nRows, nCols); } } [CLASS] PearsonsCorrelation [METHOD] checkSufficientData [RETURN_TYPE] void  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nCols nObs nRows nVars numberOfObservations boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	274	274	2	replace	
65	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void checkSufficientData(final RealMatrix matrix) { int nRows = matrix.getRowDimension(); [BUGGY] [BUGGY] int nCols = matrix.getColumnDimension(); if (nRows < 2 || nCols < 2) { throw MathRuntimeException.createIllegalArgumentException( "insufficient data: only {0} rows and {1} columns.", nRows, nCols); } } [CLASS] PearsonsCorrelation [METHOD] checkSufficientData [RETURN_TYPE] void  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nCols nObs nRows nVars numberOfObservations boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	274	274	2	add	
66	[BUG] [BUGGY] if (nRows < 2 || nCols < 2) { [FE] AssertionFailedError [CONTEXT] private void checkSufficientData(final RealMatrix matrix) { int nRows = matrix.getRowDimension(); int nCols = matrix.getColumnDimension(); [BUGGY] if (nRows < 2 || nCols < 2) { [BUGGY] throw MathRuntimeException.createIllegalArgumentException( "insufficient data: only {0} rows and {1} columns.", nRows, nCols); } } [CLASS] PearsonsCorrelation [METHOD] checkSufficientData [RETURN_TYPE] void  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nCols nObs nRows nVars numberOfObservations boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	275	275	2	replace	
67	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void checkSufficientData(final RealMatrix matrix) { int nRows = matrix.getRowDimension(); int nCols = matrix.getColumnDimension(); [BUGGY] [BUGGY] if (nRows < 2 || nCols < 2) { throw MathRuntimeException.createIllegalArgumentException( "insufficient data: only {0} rows and {1} columns.", nRows, nCols); } } [CLASS] PearsonsCorrelation [METHOD] checkSufficientData [RETURN_TYPE] void  RealMatrix matrix [VARIABLES] RealMatrix correlationMatrix covarianceMatrix matrix outMatrix int i j nCols nObs nRows nVars numberOfObservations boolean  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3922322702763681	275	275	2	add	
68	[BUG] [BUGGY] SimpleRegression regression = new SimpleRegression(); [FE] AssertionFailedError [CONTEXT] public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException { [BUGGY] SimpleRegression regression = new SimpleRegression(); [BUGGY] if(xArray.length == yArray.length && xArray.length > 1) { for(int i=0; i<xArray.length; i++) { regression.addData(xArray[i], yArray[i]); } return regression.getR(); } else { throw MathRuntimeException.createIllegalArgumentException( "invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length); [CLASS] PearsonsCorrelation [METHOD] correlation [RETURN_TYPE] double  final double[] xArray final double[] yArray [VARIABLES] SimpleRegression regression boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix double[] xArray yArray int i j nObs nVars numberOfObservations  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3779644730092272	225	225	2	replace	
69	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException { [BUGGY] [BUGGY] SimpleRegression regression = new SimpleRegression(); if(xArray.length == yArray.length && xArray.length > 1) { for(int i=0; i<xArray.length; i++) { regression.addData(xArray[i], yArray[i]); } return regression.getR(); } else { throw MathRuntimeException.createIllegalArgumentException( "invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length); [CLASS] PearsonsCorrelation [METHOD] correlation [RETURN_TYPE] double  final double[] xArray final double[] yArray [VARIABLES] SimpleRegression regression boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix double[] xArray yArray int i j nObs nVars numberOfObservations  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3779644730092272	225	225	2	add	
70	[BUG] [BUGGY] if(xArray.length == yArray.length && xArray.length > 1) { [FE] AssertionFailedError [CONTEXT] public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException { SimpleRegression regression = new SimpleRegression(); [BUGGY] if(xArray.length == yArray.length && xArray.length > 1) { [BUGGY] for(int i=0; i<xArray.length; i++) { regression.addData(xArray[i], yArray[i]); } return regression.getR(); } else { throw MathRuntimeException.createIllegalArgumentException( "invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length); } [CLASS] PearsonsCorrelation [METHOD] correlation [RETURN_TYPE] double  final double[] xArray final double[] yArray [VARIABLES] SimpleRegression regression boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix double[] xArray yArray int i j nObs nVars numberOfObservations  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3779644730092272	226	226	2	replace	
71	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public double correlation(final double[] xArray, final double[] yArray) throws IllegalArgumentException { SimpleRegression regression = new SimpleRegression(); [BUGGY] [BUGGY] if(xArray.length == yArray.length && xArray.length > 1) { for(int i=0; i<xArray.length; i++) { regression.addData(xArray[i], yArray[i]); } return regression.getR(); } else { throw MathRuntimeException.createIllegalArgumentException( "invalid array dimensions. xArray has size {0}; yArray has {1} elements", xArray.length, yArray.length); } [CLASS] PearsonsCorrelation [METHOD] correlation [RETURN_TYPE] double  final double[] xArray final double[] yArray [VARIABLES] SimpleRegression regression boolean RealMatrix correlationMatrix covarianceMatrix matrix outMatrix double[] xArray yArray int i j nObs nVars numberOfObservations  	projects/Math69/src/main/java/org/apache/commons/math/stat/correlation/PearsonsCorrelation.java	0.3779644730092272	226	226	2	add	
