bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  return  null;  [CE]  unreachable  statement  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(initialIndex);  return  null;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setErrorIndex(initialIndex);  return  null;	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  unreachable  statement	108	None	replace
2	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	108	None	replace
3	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	108	None	replace
4	[BUG]  [BUGGY]  pos.setErrorIndex(startIndex);  return  null;  [CE]  unreachable  statement  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(startIndex);  return  null;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setErrorIndex(startIndex);  return  null;	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  unreachable  statement	108	None	replace
5	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(endIndex);  pos.setErrorIndex(endIndex);	  pos.setIndex(initialIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  cannot  find  symbol  endIndex	49	None	replace
6	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(endIndex);  pos.setErrorIndex(startIndex);	  pos.setIndex(initialIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  cannot  find  symbol  endIndex	49	None	replace
7	[BUG]  [BUGGY]  char  initialIndex  =  im.charAt(startIndex);  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  initialIndex  =  im.charAt(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  initialIndex  =  im.charAt(startIndex);	  char    initialIndex    =    re.charAt(startIndex);    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	95	None	replace
8	[BUG]  [BUGGY]  char  initialIndex  =  source.charAt(startIndex);  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  initialIndex  =  source.charAt(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  initialIndex  =  source.charAt(startIndex);	  char    initialIndex    =    re.charAt(startIndex);    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	95	None	replace
9	[BUG]  [BUGGY]  String  initialIndex  =  re.charAt(startIndex);  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  String  initialIndex  =  re.charAt(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	String  initialIndex  =  re.charAt(startIndex);	  char    initialIndex    =    re.charAt(startIndex);    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	95	None	replace
10	[BUG]  [BUGGY]  char  initialIndex  =  re.charAt(endIndex);  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  initialIndex  =  re.charAt(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  initialIndex  =  re.charAt(endIndex);	  char    initialIndex    =    re.charAt(startIndex);    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	95	None	replace
11	[BUG]  [BUGGY]  int  initialIndex  =  pos.initialIndex;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  pos.initialIndex;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  pos.initialIndex;	  int    initialIndex    =    im.initialIndex;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	48	None	replace
12	[BUG]  [BUGGY]  int  initialIndex  =  im.initialIndex  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  im.initialIndex  +  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  im.initialIndex  +  1;	  int    initialIndex    =    im.initialIndex;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	48	None	replace
13	[BUG]  [BUGGY]  sign  =(im  <  0)?  1  :  -1;  [CE]  cannot  find  symbol  im  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =(im  <  0)?  1  :  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =(im  <  0)?  1  :  -1;	  sign    =(n    <    0)?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  im	136	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =(initialIndex  <  0)?  1  :  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign  =(initialIndex  <  0)?  1  :  -1;	  sign    =(n    <    0)?    1    :    -1;    	compilable	  [FE]  AssertionFailedError  	136	12	replace
15	[BUG]  [BUGGY]  sign  =(initialIndex  <  0)?  1  :  -1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =(initialIndex  <  0)?  1  :  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =(initialIndex  <  0)?  1  :  -1;	  sign    =(n    <    0)?    1    :    -1;    	compilable	  [FE]  AssertionFailedError  	136	12	replace
16	[BUG]  [BUGGY]  sign  =(endIndex  <  0)?  1  :  -1;  [CE]  cannot  find  symbol  endIndex  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =(endIndex  <  0)?  1  :  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =(endIndex  <  0)?  1  :  -1;	  sign    =(n    <    0)?    1    :    -1;    	non-compiled	[CE]  cannot  find  symbol  endIndex	136	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =(c  <  0)?  1  :  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign  =(c  <  0)?  1  :  -1;	  sign    =(n    <    0)?    1    :    -1;    	compilable	  [FE]  AssertionFailedError  	136	12	replace
18	[BUG]  [BUGGY]  sign  =(c  <  0)?  1  :  -1;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =(c  <  0)?  1  :  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =(c  <  0)?  1  :  -1;	  sign    =(n    <    0)?    1    :    -1;    	compilable	  [FE]  AssertionFailedError  	136	12	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(startIndex);  pos.setErrorIndex(initialIndex);	  pos.setIndex(startIndex);    pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	50	14	replace
20	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(initialIndex);  [FE]  AssertionFailedError  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(startIndex);  pos.setErrorIndex(initialIndex);	  pos.setIndex(startIndex);    pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	50	14	replace
21	[BUG]  [BUGGY]  pos.setIndex(index);  [CE]  cannot  find  symbol  index  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(index);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(index);	  pos.setIndex(InitialIndex);    	non-compiled	[CE]  cannot  find  symbol  index	78	None	replace
22	[BUG]  [BUGGY]  sign  =  0.0  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  0.0  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER.charAt(0);	  sign    =    0.0    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER.charAt(0);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	61	None	replace
23	[BUG]  [BUGGY]  char  c  =  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  DEFAULT_IMAGINARY_CHARACTER.charAt(0);	  sign    =    0.0    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER.charAt(0);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	61	None	replace
24	[BUG]  [BUGGY]  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.substring(0,  c);  [CE]  incomparable  types:  char  and  String  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.substring(0,  c);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.substring(0,  c);	  sign    =    0.0    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER.charAt(0);    	non-compiled	[CE]  incomparable  types:  char  and  String	61	None	replace
25	[BUG]  [BUGGY]  sign  =  0.0  &&  c!=  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  0.0  &&  c!=  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  &&  c!=  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    0.0    ||    c!=    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incomparable  types:  char  and  String	60	None	replace
26	[BUG]  [BUGGY]  sign  =  0.0  &&  c  >>  DEFAULT_IMAGINARY_CHARACTER;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  0.0  &&  c  >>  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  &&  c  >>  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    0.0    ||    c!=    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	60	None	replace
27	[BUG]  [BUGGY]  int  initialIndex  =  im.getIndex()  -  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  im.getIndex()  -  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  im.getIndex()  -  1;	  int    initialIndex    =    im.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	4	None	replace
28	[BUG]  [BUGGY]  int  initialIndex  =  im.getIndex()  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  im.getIndex()  +  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  im.getIndex()  +  1;	  int    initialIndex    =    im.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	4	None	replace
29	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	58	None	replace
30	[BUG]  [BUGGY]  char  c  =  re.charAt(0);  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  re.charAt(0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  re.charAt(0);	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	58	None	replace
31	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	58	None	replace
32	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]                      AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	58	None	replace
33	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [CE]  orphaned  default  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	110	None	replace
34	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [CE]  orphaned  default  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	110	None	replace
35	[BUG]  [BUGGY]  int  initialIndex  =  source.length;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  source.length;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  source.length;	  int    initialIndex    =    DEFAULT_IMAGINARY_CHARACTER.length;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	128	None	replace
36	[BUG]  [BUGGY]  int  initialIndex  =  c.length;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  c.length;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  c.length;	  int    initialIndex    =    DEFAULT_IMAGINARY_CHARACTER.length;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	128	None	replace
37	[BUG]  [BUGGY]  int  initialIndex  =  n.length;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  n.length;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  n.length;	  int    initialIndex    =    DEFAULT_IMAGINARY_CHARACTER.length;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	128	None	replace
38	[BUG]  [BUGGY]  int  initialIndex  =  re.length;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  re.length;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  re.length;	  int    initialIndex    =    DEFAULT_IMAGINARY_CHARACTER.length;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	128	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	28	14	add
40	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	28	14	add
41	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
42	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	28	None	add
43	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	44	None	replace
44	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  return  null;  [CE]  unreachable  statement  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  return  null;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  return  null;	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  unreachable  statement	44	None	replace
45	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }  }  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  orphaned  default	44	None	replace
46	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  orphaned  default  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  orphaned  default	86	None	add
47	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  orphaned  default  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  orphaned  default	86	None	add
48	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(initialIndex  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(initialIndex  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(initialIndex  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  orphaned  default	86	None	add
49	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  orphaned  default  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  orphaned  default	86	None	add
50	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  orphaned  default  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  orphaned  default	86	None	add
51	[BUG]  [BUGGY]  sign  =  '+'  +  re.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  re.getCharacter().toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  re.getCharacter().toLowerCase();	  sign    =       "+   "    +    re.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
52	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	131	None	replace
53	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	119	None	replace
54	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  [CE]  unreachable  statement  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  unreachable  statement	119	None	replace
55	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  orphaned  default	119	None	replace
56	[BUG]  [BUGGY]  re.setIndex(n);  [CE]  cannot  find  symbol  n  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  re.setIndex(n);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re.setIndex(n);	  re.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  n	10	None	replace
57	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	2	add
58	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	2	add
59	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  orphaned  default  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  orphaned  default	104	None	add
60	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	104	None	add
61	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  orphaned  default  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  orphaned  default	104	None	add
62	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  orphaned  default  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  orphaned  default	104	None	add
63	[BUG]  [BUGGY]  if(source.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(source.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(source.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
64	[BUG]  [BUGGY]  if(source.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(source.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(source.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
65	[BUG]  [BUGGY]  pos  =  re.getCharacterIndex();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos  =  re.getCharacterIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos  =  re.getCharacterIndex();	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
66	[BUG]  [BUGGY]  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setErrorIndex(endIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	127	None	replace
67	[BUG]  [BUGGY]  re.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  re.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
68	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	123	2	add
69	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	123	2	add
70	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()	  	non-compiled	[CE]  ')'  expected	123	None	add
71	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()	  	non-compiled	[CE]  ')'  expected	123	None	add
72	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(initialIndex  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(initialIndex  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	123	2	add
73	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(initialIndex  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(initialIndex  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(initialIndex  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	123	2	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    pos.setIndex(initialIndex);  pos.setErrorIndex(sign);	  	compilable	  [FE]  AssertionFailedError  	51	14	add
75	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    pos.setIndex(initialIndex);  pos.setErrorIndex(sign);	  	compilable	  [FE]  AssertionFailedError  	51	14	add
76	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(sign);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    pos.setInitialIndex(initialIndex);  pos.setErrorIndex(sign);	  	non-compiled	[CE]  cannot  find  symbol	51	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(startIndex);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	102	14	add
78	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	102	14	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(startIndex);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	102	14	add
80	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	102	14	add
81	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  int  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  int  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        parseAndIgnoreWhitespace(source,    pos);    int  pos  =  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	102	None	add
82	[BUG]  [BUGGY]  pos.setIndex(Integer.MIN_VALUE,  1);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MIN_VALUE,  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MIN_VALUE,  1);	  pos.setIndex(Integer.MIN_VALUE);    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	39	None	replace
83	[BUG]  [BUGGY]  sign  =  '+'  +  im.getCharacter().doubleValue();  [CE]  cannot  find  symbol  im  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  im.getCharacter().doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  im.getCharacter().doubleValue();	  sign    =    '+'    +    re.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol  im	156	None	replace
84	[BUG]  [BUGGY]  char  re  =  re.getCharacter().doubleValue();  [CE]  variable  re  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  re  =  re.getCharacter().doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  re  =  re.getCharacter().doubleValue();	  sign    =    '+'    +    re.getCharacter().doubleValue();    	non-compiled	[CE]  variable  re  is  already  defined  in  method  parse(String,ParsePosition)	156	None	replace
85	[BUG]  [BUGGY]  sign  =  '+'  +  source.getCharacter().doubleValue();  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  source.getCharacter().doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  source.getCharacter().doubleValue();	  sign    =    '+'    +    re.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
86	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '0';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '0';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '0';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  char  and  String	129	None	replace
87	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  ' "'  +  c  + "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  ' "'  +  c  + "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  ' "'  +  c  + "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  char  and  String	129	None	replace
88	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '0'  +  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '0'  +  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '0'  +  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  char  and  String	129	None	replace
89	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	107	2	add
90	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	107	2	add
91	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	107	None	add
92	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	107	2	add
93	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	107	2	add
94	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	107	2	add
95	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  }  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	107	2	add
96	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  }  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	107	None	add
97	[BUG]  [BUGGY]  if(re.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(re.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(re.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
98	[BUG]  [BUGGY]  if(re.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(re.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(re.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
99	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	45	None	replace
100	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	45	None	replace
101	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  }  [CE]  orphaned  default  [FE]                    AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  orphaned  default	45	None	replace
102	[BUG]  [BUGGY]  sign  =  source.toLowerCase();  [CE]  incompatible  types  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  source.toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  source.toLowerCase();	  sign    =       "+   "    +    source.toLowerCase();    	non-compiled	[CE]  incompatible  types	111	None	replace
103	[BUG]  [BUGGY]  sign  =  '+'  +  source.toLowerCase();  [CE]  incompatible  types  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  source.toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  source.toLowerCase();	  sign    =       "+   "    +    source.toLowerCase();    	non-compiled	[CE]  incompatible  types	111	None	replace
104	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  +  source.toLowerCase();  [CE]  incompatible  types  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  +  source.toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER  +  source.toLowerCase();	  sign    =       "+   "    +    source.toLowerCase();    	non-compiled	[CE]  incompatible  types	111	None	replace
105	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }	  sign    =    '+';    sign    =    '+';    	non-compiled	[CE]  incomparable  types:  char  and  String	41	None	replace
106	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sign    =    '+';    sign    =    '+';    	non-compiled	[CE]  incomparable  types:  char  and  String	41	None	replace
107	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    '+';    sign    =    '+';    	non-compiled	[CE]  incomparable  types:  char  and  String	41	None	replace
108	[BUG]  [BUGGY]  int  initialIndex  =  source.initialIndex  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  source.initialIndex  +  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  source.initialIndex  +  1;	  int    initialIndex    =    re.initialIndex    +    1;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	47	None	replace
109	[BUG]  [BUGGY]  int  initialIndex  =  re.initialIndex  +  2;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  re.initialIndex  +  2;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  re.initialIndex  +  2;	  int    initialIndex    =    re.initialIndex    +    1;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	47	None	replace
110	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  +  c.toCharArray();  [CE]  char  cannot  be  dereferenced  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  +  c.toCharArray();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER  +  c.toCharArray();	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.toCharArray();    	non-compiled	[CE]  char  cannot  be  dereferenced	116	None	replace
111	[BUG]  [BUGGY]  char  c  =  DEFAULT_IMAGINARY_CHARACTER.toCharArray();  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  DEFAULT_IMAGINARY_CHARACTER.toCharArray();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  DEFAULT_IMAGINARY_CHARACTER.toCharArray();	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.toCharArray();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	116	None	replace
112	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER.toCharArray();  [CE]  incompatible  types  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER.toCharArray();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER.toCharArray();	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.toCharArray();    	non-compiled	[CE]  incompatible  types	116	None	replace
113	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    -1;    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	55	None	replace
114	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  }  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    -1;    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  orphaned  default	55	None	replace
115	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    -1;    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	55	None	replace
116	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER);  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER);	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  incomparable  types:  char  and  String	34	None	replace
117	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  '+');  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  '+');  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  '+');	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  	34	None	replace
118	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  0;  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  0;	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  incomparable  types:  char  and  String	34	None	replace
119	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	80	14	add
120	[BUG]  [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	80	14	add
121	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	80	14	add
122	[BUG]  [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	80	14	add
123	[BUG]  [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setInteger(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setInteger(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MAX_VALUE);    pos.setInteger(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);	  	non-compiled	[CE]  cannot  find  symbol	80	None	add
124	[BUG]  [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Long.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Long.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Long.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);	  	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	80	None	add
125	[BUG]  [BUGGY]  n.setIndex(endIndex);  n.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n.setIndex(endIndex);  n.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(endIndex);  n.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    n.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	27	None	replace
126	[BUG]  [BUGGY]  re.setIndex(initialIndex);  re.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  re.setIndex(initialIndex);  re.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re.setIndex(initialIndex);  re.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    n.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
127	[BUG]  [BUGGY]  im.setIndex(initialIndex);  im.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  im  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  im.setIndex(initialIndex);  im.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	im.setIndex(initialIndex);  im.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    n.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  im	27	None	replace
128	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	63	None	replace
129	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(endIndex);  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	63	None	replace
130	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  pos.setIndex(Integer.MAX_VALUE  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(Integer.MAX_VALUE    +    1);    pos.setIndex(Integer.MAX_VALUE  +  1);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	114	14	add
131	[BUG]  [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  pos.setIndex(Integer.MAX_VALUE  +  1);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  pos.setIndex(Integer.MAX_VALUE  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MAX_VALUE    +    1);    pos.setIndex(Integer.MAX_VALUE  +  1);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	114	14	add
132	[BUG]  [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  int  pos.setIndex(Integer.MAX_VALUE  +  1);  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  int  pos.setIndex(Integer.MAX_VALUE  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MAX_VALUE    +    1);    int  pos.setIndex(Integer.MAX_VALUE  +  1);	  	non-compiled	[CE]  ';'  expected	114	None	add
133	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  pos.setIndex(Integer.MIN_VALUE  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(Integer.MAX_VALUE    +    1);    pos.setIndex(Integer.MIN_VALUE  +  1);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	114	14	add
134	[BUG]  [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  pos.setIndex(Integer.MIN_VALUE  +  1);  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  pos.setIndex(Integer.MIN_VALUE  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MAX_VALUE    +    1);    pos.setIndex(Integer.MIN_VALUE  +  1);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	114	14	add
135	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));  [CE]  'void'  type  not  allowed  here  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(initialIndex));    	non-compiled	[CE]  'void'  type  not  allowed  here	138	None	replace
136	[BUG]  [BUGGY]  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));  [CE]  'void'  type  not  allowed  here  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(initialIndex));    	non-compiled	[CE]  'void'  type  not  allowed  here	138	None	replace
137	[BUG]  [BUGGY]  pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));  [CE]  cannot  find  symbol  endIndex  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(initialIndex));    	non-compiled	[CE]  cannot  find  symbol  endIndex	138	None	replace
138	[BUG]  [BUGGY]  pos.setStartIndex(initialIndex  +  1);  [CE]  cannot  find  symbol  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setStartIndex(initialIndex  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setStartIndex(initialIndex  +  1);	  pos.setStartIndex(startIndex    +    1);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
139	[BUG]  [BUGGY]  pos.setStartIndex(endIndex  +  1);  [CE]  cannot  find  symbol  endIndex  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setStartIndex(endIndex  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setStartIndex(endIndex  +  1);	  pos.setStartIndex(startIndex    +    1);    	non-compiled	[CE]  cannot  find  symbol  endIndex	19	None	replace
140	[BUG]  [BUGGY]  pos.setStartIndex(n  +  1);  [CE]  cannot  find  symbol  n  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setStartIndex(n  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setStartIndex(n  +  1);	  pos.setStartIndex(startIndex    +    1);    	non-compiled	[CE]  cannot  find  symbol  n	19	None	replace
141	[BUG]  [BUGGY]  char  c  =  re.charAt(initialIndex);  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  re.charAt(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  re.charAt(initialIndex);	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0.0;    }    else    {    pos.setIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	146	None	replace
142	[BUG]  [BUGGY]  char  c  =  im.getCharacter();  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  im.getCharacter();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  im.getCharacter();	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0.0;    }    else    {    pos.setIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	146	None	replace
143	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  [CE]  cannot  find  symbol  endIndex  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  endIndex	88	None	replace
144	[BUG]  [BUGGY]  char  c  =  im.getCharacter();  sign  =  '+';  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  im.getCharacter();  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  im.getCharacter();  sign  =  '+';	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	70	None	replace
145	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  Character.toLowerCase(c);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  Character.toLowerCase(c);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  Character.toLowerCase(c);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  incomparable  types:  char  and  String	70	None	replace
146	[BUG]  [BUGGY]  pos.setStartIndex(InitialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setStartIndex(InitialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setStartIndex(InitialIndex);	  pos.setStartIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  InitialIndex	17	None	replace
147	[BUG]  [BUGGY]  pos.setStartIndex(source.getStartIndex());  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setStartIndex(source.getStartIndex());  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setStartIndex(source.getStartIndex());	  pos.setStartIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
148	[BUG]  [BUGGY]  pos.setIndex(endIndex);  return  new  Complex(re.doubleValue(),  0.0);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(endIndex);  return  new  Complex(re.doubleValue(),  0.0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(endIndex);  return  new  Complex(re.doubleValue(),  0.0);	          pos.setIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    	non-compiled	[CE]  cannot  find  symbol  endIndex	157	None	replace
149	[BUG]  [BUGGY]  pos.setIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  [CE]  unreachable  statement  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);	          pos.setIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    	non-compiled	[CE]  unreachable  statement	157	None	replace
150	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  1.0);  [CE]  unreachable  statement  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  1.0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  1.0);	          pos.setIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    	non-compiled	[CE]  unreachable  statement	157	None	replace
151	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(endIndex);  pos.setIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	29	None	replace
152	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.getIndex(),    -initialIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	139	None	replace
153	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -1,  -initialIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -1,  -initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -1,  -initialIndex);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.getIndex(),    -initialIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	139	None	replace
154	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex,  sign);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex,  sign);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex,  sign);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.getIndex(),    -initialIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	139	None	replace
155	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex,  DEFAULT_IMAGINARY_CHARACTER);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.getIndex(),    -initialIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	139	None	replace
156	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	90	None	replace
157	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue()	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	90	None	replace
158	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  sign  =  -1;  sign  =  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        -1;        sign    =    -1;    sign  =  -1;  sign  =  -1;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	53	2	add
159	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  sign  =  -1;  sign  =  -1;  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  sign  =  -1;  sign  =  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    sign  =  -1;  sign  =  -1;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	53	2	add
160	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	53	None	add
161	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER	  	non-compiled	[CE]  ')'  expected	53	None	add
162	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	53	None	add
163	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	53	None	add
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	140	14	add
165	[BUG]  [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	140	14	add
166	[BUG]  [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    int  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	140	None	add
167	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(  sign  <  '+')  {  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  AssertionFailedError  	140	14	add
168	[BUG]  [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(  sign  <  '+')  {  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  AssertionFailedError  	140	14	add
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	compilable	  [FE]  AssertionFailedError  	140	14	add
170	[BUG]  [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	compilable	  [FE]  AssertionFailedError  	140	14	add
171	[BUG]  [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  orphaned  default  [FE]            AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(  sign  <  '+')  {  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  orphaned  default	140	None	add
172	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  sign  =  '+'  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    '+'    +    1;    sign  =  '+'  +  1;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	93	2	add
173	[BUG]  [BUGGY]  sign  =  '+'  +  1;  sign  =  '+'  +  1;  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  sign  =  '+'  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    sign  =  '+'  +  1;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	93	2	add
174	[BUG]  [BUGGY]  sign  =  '+'  +  1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  '+'  +  1;  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  '+'  +  1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  '+'  +  1;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	93	None	add
175	[BUG]  [BUGGY]  sign  =  '+'  +  1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +  1;  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +  1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +  1;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	93	None	add
176	[BUG]  [BUGGY]  sign  =  '+'  +  1;  char  im  =  re.charAt(endIndex);  sign  =  '+'  +  1;  [CE]  cannot  find  symbol  endIndex  [FE]          AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  char  im  =  re.charAt(endIndex);  sign  =  '+'  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    char  im  =  re.charAt(endIndex);  sign  =  '+'  +  1;	  	non-compiled	[CE]  cannot  find  symbol  endIndex	93	None	add
177	[BUG]  [BUGGY]  sign  =  '+'  +  1;  char  im  =  re.charAt(i);  sign  =  '+'  +  1;  [CE]  cannot  find  symbol  i  [FE]            AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  char  im  =  re.charAt(i);  sign  =  '+'  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    char  im  =  re.charAt(i);  sign  =  '+'  +  1;	  	non-compiled	[CE]  cannot  find  symbol  i	93	None	add
178	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	42	None	replace
179	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  }  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  orphaned  default	42	None	replace
180	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	42	None	replace
181	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	106	None	replace
182	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	106	None	replace
183	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	121	2	add
184	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	121	2	add
185	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	121	None	add
186	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  orphaned  default	121	None	add
187	[BUG]  [BUGGY]  '+'  +  source.getCharacter().toLowerCase();  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  +  source.getCharacter().toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  +  source.getCharacter().toLowerCase();	  sign    =    '+'    +    source.getCharacter().toLowerCase();    	non-compiled	[CE]  not  a  statement	15	None	replace
188	[BUG]  [BUGGY]  sign  =  '+'  +  source.getCharacter().toLowerCase(c);  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  source.getCharacter().toLowerCase(c);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  source.getCharacter().toLowerCase(c);	  sign    =    '+'    +    source.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
189	[BUG]  [BUGGY]  char  c  =  source.getCharacter().toLowerCase();  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  source.getCharacter().toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  source.getCharacter().toLowerCase();	  sign    =    '+'    +    source.getCharacter().toLowerCase();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	15	None	replace
190	[BUG]  [BUGGY]  char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    '+'    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	72	None	replace
191	[BUG]  [BUGGY]  sign  =  '+'  ||  c!=  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  ||  c!=  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  ||  c!=  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    '+'    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incomparable  types:  char  and  String	72	None	replace
192	[BUG]  [BUGGY]  c  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	c  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    '+'    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incomparable  types:  char  and  String	72	None	replace
193	[BUG]  [BUGGY]  sign  =  0.0  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  0.0  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    0.0    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incomparable  types:  char  and  String	59	None	replace
194	[BUG]  [BUGGY]  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER  +  1;  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER  +  1;	  sign    =    0.0    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incomparable  types:  char  and  String	59	None	replace
195	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	8	None	replace
196	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	8	None	replace
197	[BUG]  [BUGGY]  int  initialIndex  =  source.getIndex()  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  source.getIndex()  +  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  source.getIndex()  +  1;	  int    initialIndex    =    re.getIndex()    +    1;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	6	None	replace
198	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	122	None	replace
199	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [CE]  orphaned  default  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	122	None	replace
200	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	122	None	replace
201	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	122	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	62	14	add
203	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	62	14	add
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	62	14	add
205	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	62	14	add
206	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);  pos.setIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(endIndex);  pos.setIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	62	None	add
207	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  }  [CE]  orphaned  default  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  }	  	non-compiled	[CE]  orphaned  default	91	None	add
208	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  }  [CE]  orphaned  default  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  }	  	non-compiled	[CE]  orphaned  default	91	None	add
209	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(initialIndex  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(initialIndex  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(initialIndex  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  }	  	non-compiled	[CE]  orphaned  default	91	None	add
210	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  orphaned  default	91	None	add
211	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	91	2	add
212	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	91	2	add
213	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MIN_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	14	add
214	[BUG]  [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MIN_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	14	add
215	[BUG]  [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  int  pos.setIndex(Integer.MIN_VALUE);  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  int  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MIN_VALUE);    int  pos.setIndex(Integer.MIN_VALUE);	  	non-compiled	[CE]  ';'  expected	38	None	add
216	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MAX_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	14	add
217	[BUG]  [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MAX_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	14	add
218	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  sign  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MIN_VALUE);  sign  =  1;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	14	add
219	[BUG]  [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  sign  =  1;  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  sign  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MIN_VALUE);  sign  =  1;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	38	14	add
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setErrorIndex(initialIndex);	          pos.setErrorIndex(startIndex);    	compilable	  [FE]  AssertionFailedError  	77	12	replace
221	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setErrorIndex(initialIndex);	          pos.setErrorIndex(startIndex);    	compilable	  [FE]  AssertionFailedError  	77	12	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(initialIndex    +    1);    pos.setIndex(initialIndex  +  1);	  	compilable	  [FE]  AssertionFailedError  	1	14	add
223	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex    +    1);    pos.setIndex(initialIndex  +  1);	  	compilable	  [FE]  AssertionFailedError  	1	14	add
224	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  int  pos.setIndex(initialIndex  +  1);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex  +  1);  int  pos.setIndex(initialIndex  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex    +    1);    int  pos.setIndex(initialIndex  +  1);	  	non-compiled	[CE]  ';'  expected	1	None	add
225	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  int  initialIndex  =  initialIndex  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex  +  1);  int  initialIndex  =  initialIndex  +  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex    +    1);    int  initialIndex  =  initialIndex  +  1;	  	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	1	None	add
226	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	2	add
227	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	2	add
228	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	2	add
229	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	76	2	add
230	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	76	None	add
231	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  [CE]  cannot  find  symbol  n  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);	  	non-compiled	[CE]  cannot  find  symbol  n	76	None	add
232	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER));  [CE]  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER));  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER));	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  	36	None	replace
233	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER));  [CE]  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER));  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER));	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  	36	None	replace
234	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?   "+ "+ ";  [CE]  unclosed  string  literal  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?   "+ "+ ";  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?   "+ "+ ";	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  unclosed  string  literal	36	None	replace
235	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  0;  [CE]  incomparable  types:  char  and  String  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  0;	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  incomparable  types:  char  and  String	36	None	replace
236	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	25	None	replace
237	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  }  [CE]  orphaned  default  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  orphaned  default	25	None	replace
238	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                    AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	25	None	replace
239	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(endIndex));  [CE]  cannot  find  symbol  endIndex  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(endIndex));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  pos.setIndex(endIndex));	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(startIndex));    	non-compiled	[CE]  cannot  find  symbol  endIndex	101	None	replace
240	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex));  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex));	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(startIndex));    	non-compiled	[CE]  'void'  type  not  allowed  here	101	None	replace
241	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  +  source.getCharacter().doubleValue();  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  +  source.getCharacter().doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER  +  source.getCharacter().doubleValue();	  sign    =       "+   "    +    source.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
242	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValu  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValu	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('/'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	151	None	replace
243	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValu  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValu	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('/'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	151	None	replace
244	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('/'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	151	None	replace
245	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue()	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('/'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	151	None	replace
246	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	148	None	replace
247	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [CE]  orphaned  default  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  orphaned  default	148	None	replace
248	[BUG]  [BUGGY]  n.setIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(initialIndex);	          pos.setIndex(initialIndex);    int    pos.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  n	32	None	replace
249	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(initialIndex);  pos.setIndex(Integer.MAX_VALUE);	          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);    	compilable	  [FE]  StringIndexOutOfBoundsException  	81	14	replace
250	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(Integer.MAX_VALUE);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setIndex(Integer.MAX_VALUE);	          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);    	compilable	  [FE]  StringIndexOutOfBoundsException  	81	14	replace
251	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	23	None	replace
252	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  orphaned  default	23	None	replace
253	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  orphaned  default  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	  	non-compiled	[CE]  orphaned  default	89	None	add
254	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  orphaned  default  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	  	non-compiled	[CE]  orphaned  default	89	None	add
255	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  orphaned  default	89	None	add
256	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(initialIndex  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  orphaned  default  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(initialIndex  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(initialIndex  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  orphaned  default	89	None	add
257	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  orphaned  default  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  orphaned  default	89	None	add
258	[BUG]  [BUGGY]  int  initialIndex  =  source.getIndex()  -  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  source.getIndex()  -  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  source.getIndex()  -  1;	  int    initialIndex    =    source.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	3	None	replace
259	[BUG]  [BUGGY]  int  initialIndex  =  pos.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  pos.getIndex();  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  pos.getIndex();	  int    initialIndex    =    source.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	3	None	replace
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	7	14	add
261	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	7	14	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	7	14	add
263	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	7	14	add
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	7	14	add
265	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	7	14	add
266	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]          AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	7	None	add
267	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setInitialIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
268	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	118	2	add
269	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	118	2	add
270	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(initialIndex  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(initialIndex  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	118	2	add
271	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(initialIndex  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(initialIndex  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(initialIndex  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	118	2	add
272	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	118	None	add
273	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	118	None	add
274	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  orphaned  default  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  orphaned  default	118	None	add
275	[BUG]  [BUGGY]  char  re  =  re.getCharacter().toUpperCase();  [CE]  variable  re  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  re  =  re.getCharacter().toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  re  =  re.getCharacter().toUpperCase();	  sign    =       "+   "    +    re.getCharacter().toUpperCase();    	non-compiled	[CE]  variable  re  is  already  defined  in  method  parse(String,ParsePosition)	74	None	replace
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	64	14	add
277	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	64	14	add
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	64	14	add
279	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	64	14	add
280	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(endIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(endIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	64	None	add
281	[BUG]  [BUGGY]  c  =  im.doubleValue();  [CE]  cannot  find  symbol  im  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  im.doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	c  =  im.doubleValue();	  c    =    re.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  im	33	None	replace
282	[BUG]  [BUGGY]  c  =  re.doubleValue()  +  1;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  re.doubleValue()  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	c  =  re.doubleValue()  +  1;	  c    =    re.doubleValue();    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
283	[BUG]  [BUGGY]  c  =  re.doubleValue()  +  2;  [CE]  possible  loss  of  precision  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  re.doubleValue()  +  2;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	c  =  re.doubleValue()  +  2;	  c    =    re.doubleValue();    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
284	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  sign  =  '+';  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        sign    =    '+';    sign  =  '+';  sign  =  '+';	  	compilable	  [FE]  StringIndexOutOfBoundsException  	40	2	add
285	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  sign  =  '+';  sign  =  '+';  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  sign  =  '+';  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    sign  =  '+';  sign  =  '+';	  	compilable	  [FE]  StringIndexOutOfBoundsException  	40	2	add
286	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	40	None	add
287	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	40	None	add
288	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	40	None	add
289	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER  [CE]  ')'  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER	  	non-compiled	[CE]  ')'  expected	40	None	add
290	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  char  and  String	71	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    sign    =    1;    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;	  	compilable	  [FE]  AssertionFailedError  	30	14	add
292	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    sign    =    1;    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;	  	compilable	  [FE]  AssertionFailedError  	30	14	add
293	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  Sign  =  1;  [CE]  cannot  find  symbol  Sign  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  Sign  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    sign    =    1;    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  Sign  =  1;	  	non-compiled	[CE]  cannot  find  symbol  Sign	30	None	add
294	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  signature  =  1;  [CE]  cannot  find  symbol  signature  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  signature  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    sign    =    1;    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  signature  =  1;	  	non-compiled	[CE]  cannot  find  symbol  signature	30	None	add
295	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  sign  =  1;  [CE]  cannot  find  symbol  InitialIndex  [FE]          AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  sign  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    sign    =    1;    pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  sign  =  1;	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	30	None	add
296	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  }  [CE]  orphaned  default  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  orphaned  default	149	None	replace
297	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	149	None	replace
298	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  }  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  orphaned  default	149	None	replace
299	[BUG]  [BUGGY]  re.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  re.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re.setIndex(initialIndex);  pos.setErrorIndex(endIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
300	[BUG]  [BUGGY]  im.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  im  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  im.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	im.setIndex(initialIndex);  pos.setErrorIndex(endIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  im	26	None	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	c  =  0;	  n    =    0;    	compilable	  [FE]  AssertionFailedError  	85	12	replace
302	[BUG]  [BUGGY]  c  =  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	c  =  0;	  n    =    0;    	compilable	  [FE]  AssertionFailedError  	85	12	replace
303	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	109	2	add
304	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	109	2	add
305	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	109	2	add
306	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	109	2	add
307	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  	non-compiled	[CE]  orphaned  default	109	None	add
308	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	109	None	add
309	[BUG]  [BUGGY]  '+'  :  '+'  +(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  :  '+'  +(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  :  '+'  +(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER);	  '+'    :    '+';    	non-compiled	[CE]  not  a  statement	96	None	replace
310	[BUG]  [BUGGY]  '+'  :  '+'  +(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?  '+'  :  '+';  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  :  '+'  +(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?  '+'  :  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  :  '+'  +(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?  '+'  :  '+';	  '+'    :    '+';    	non-compiled	[CE]  not  a  statement	96	None	replace
311	[BUG]  [BUGGY]  '+'  :  '+'  +(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?  '-'  :  '+';  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  :  '+'  +(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?  '-'  :  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  :  '+'  +(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)?  '-'  :  '+';	  '+'    :    '+';    	non-compiled	[CE]  not  a  statement	96	None	replace
312	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  return  null;  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  return  null;  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    else    {    return    null;    }    	non-compiled	[CE]  'else'  without  'if'	126	None	replace
313	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	24	None	replace
314	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  }  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  orphaned  default	24	None	replace
315	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	24	None	replace
316	[BUG]  [BUGGY]  char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  ';'  expected	132	None	replace
317	[BUG]  [BUGGY]  char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER);  sign  =  '+';  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER);  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER);  sign  =  '+';	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  ';'  expected	132	None	replace
318	[BUG]  [BUGGY]  '+'  +  source.getCharacter().toUpperCase();  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  +  source.getCharacter().toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  +  source.getCharacter().toUpperCase();	  sign    =    '+'    +    source.getCharacter().toUpperCase();    	non-compiled	[CE]  not  a  statement	113	None	replace
319	[BUG]  [BUGGY]  char  c  =  source.getCharacter().toUpperCase();  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  source.getCharacter().toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  source.getCharacter().toUpperCase();	  sign    =    '+'    +    source.getCharacter().toUpperCase();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	113	None	replace
320	[BUG]  [BUGGY]  sign  =  '+'  +  source.getCharacter().toUpperCase(c);  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  source.getCharacter().toUpperCase(c);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  source.getCharacter().toUpperCase(c);	  sign    =    '+'    +    source.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
321	[BUG]  [BUGGY]  char  c  =  c.charAt(0);  sign  =  '+';  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  c.charAt(0);  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  c.charAt(0);  sign  =  '+';	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	43	None	replace
322	[BUG]  [BUGGY]  char  c  =  c.charAt(0);  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  c.charAt(0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  c.charAt(0);	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	43	None	replace
323	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(initialIndex);    	non-compiled	[CE]  ')'  expected	137	None	replace
324	[BUG]  [BUGGY]  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(initialIndex);    	non-compiled	[CE]  ')'  expected	137	None	replace
325	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  [CE]  unreachable  statement  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  unreachable  statement	124	None	replace
326	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	124	None	replace
327	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	124	None	replace
328	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0.0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	145	None	replace
329	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [CE]  orphaned  default  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0.0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	145	None	replace
330	[BUG]  [BUGGY]  sign  =  0.0  &&  c  >=  DEFAULT_IMAGINARY_CHARACTER;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  0.0  &&  c  >=  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  &&  c  >=  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    0.0    ||    c    >=    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	97	None	replace
331	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(initialIndex);  sign  =  1;  [CE]  cannot  find  symbol  endIndex  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(initialIndex);  sign  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(endIndex);  pos.setIndex(initialIndex);  sign  =  1;	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    sign    =    1;    	non-compiled	[CE]  cannot  find  symbol  endIndex	31	None	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  0;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  0;	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    sign    =    1;    	compilable	  [FE]  AssertionFailedError  	31	14	replace
333	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  0;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  0;	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    sign    =    1;    	compilable	  [FE]  AssertionFailedError  	31	14	replace
334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  sign  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(startIndex);  pos.setIndex(initialIndex);  sign  =  1;	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    sign    =    1;    	compilable	  [FE]  AssertionFailedError  	31	14	replace
335	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  sign  =  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  sign  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(startIndex);  pos.setIndex(initialIndex);  sign  =  1;	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    sign    =    1;    	compilable	  [FE]  AssertionFailedError  	31	14	replace
336	[BUG]  [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER  +  1;  [CE]  incompatible  types  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER  +  1;	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incompatible  types	35	None	replace
337	[BUG]  [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER  +  c;  [CE]  incompatible  types  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER  +  c;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER  +  c;	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incompatible  types	35	None	replace
338	[BUG]  [BUGGY]  '+'  +  DEFAULT_IMAGINARY_CHARACTER  +  c;  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  +  DEFAULT_IMAGINARY_CHARACTER  +  c;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  +  DEFAULT_IMAGINARY_CHARACTER  +  c;	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  not  a  statement	35	None	replace
339	[BUG]  [BUGGY]  sign  =  '+'  +  re.getCharacter().toUpperCase();  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  re.getCharacter().toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  re.getCharacter().toUpperCase();	  sign    =    '+'    +    im.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
340	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  sign  =  0;  sign  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        0;        sign    =    0;    sign  =  0;  sign  =  0;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	2	add
341	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  sign  =  0;  sign  =  0;  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  sign  =  0;  sign  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    sign  =  0;  sign  =  0;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	20	2	add
342	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	20	None	add
343	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	20	None	add
344	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	20	None	add
345	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  sign  =  0;  sign  =  0;  }  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  sign  =  0;  sign  =  0;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  sign  =  0;  sign  =  0;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	20	None	add
346	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	82	14	add
347	[BUG]  [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	82	14	add
348	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	82	14	add
349	[BUG]  [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIN_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	82	14	add
350	[BUG]  [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setInteger(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);  pos.setInteger(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(Integer.MAX_VALUE);        pos.setIndex(Integer.MIN_VALUE);    pos.setInteger(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);	  	non-compiled	[CE]  cannot  find  symbol	82	None	add
351	[BUG]  [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex,  endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex,  endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex,  endIndex);	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	117	None	replace
352	[BUG]  [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(initialIndex);  [CE]  incompatible  types  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(initialIndex);	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);    	non-compiled	[CE]  incompatible  types	117	None	replace
353	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);  [CE]  incompatible  types  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);    	non-compiled	[CE]  incompatible  types	117	None	replace
354	[BUG]  [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(endIndex);	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	117	None	replace
355	[BUG]  [BUGGY]  int  startIndex  =  im.getIndex()  -  1;  [CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  startIndex  =  im.getIndex()  -  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  startIndex  =  im.getIndex()  -  1;	  int    initialIndex    =    re.getIndex()    -    1;    	non-compiled	[CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)	5	None	replace
356	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  AssertionFailedError  	103	14	replace
357	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  AssertionFailedError  	103	14	replace
358	[BUG]  [BUGGY]  pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  endIndex  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol  endIndex	103	None	replace
359	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	parseAndIgnoreWhitespace(source,  pos);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  AssertionFailedError  	103	12	replace
360	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  pos);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  AssertionFailedError  	103	12	replace
361	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValu  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValu	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('+'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	152	None	replace
362	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue()	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('+'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	152	None	replace
363	[BUG]  [BUGGY]  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('+'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	152	None	replace
364	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('+'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	152	None	replace
365	[BUG]  [BUGGY]  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  [CE]  cannot  find  symbol  endIndex  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;	  sign    =    '+';    if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  endIndex	144	None	replace
366	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);	  sign    =    '+';    if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  endIndex	144	None	replace
367	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	  sign    =    '+';    if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	144	None	replace
368	[BUG]  [BUGGY]  pos.setIndex(Integer.MAX_VALUE,  sign  +  1);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MAX_VALUE,  sign  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MAX_VALUE,  sign  +  1);	  pos.setIndex(Integer.MAX_VALUE    +    1);    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	115	None	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(startIndex  +  1);	  pos.setIndex(initialIndex    +    1);    	compilable	  [FE]  AssertionFailedError  	2	14	replace
370	[BUG]  [BUGGY]  pos.setIndex(startIndex  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(startIndex  +  1);	  pos.setIndex(initialIndex    +    1);    	compilable	  [FE]  AssertionFailedError  	2	14	replace
371	[BUG]  [BUGGY]  pos.setIndex(endIndex  +  1);  [CE]  cannot  find  symbol  endIndex  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(endIndex  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(endIndex  +  1);	  pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  cannot  find  symbol  endIndex	2	None	replace
372	[BUG]  [BUGGY]  char  c  =  source.charAt(initialIndex);  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  source.charAt(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  source.charAt(initialIndex);	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	56	None	replace
373	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(startIndex);    	non-compiled	[CE]  ')'  expected	100	None	replace
374	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(endIndex);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(startIndex);    	non-compiled	[CE]  ')'  expected	100	None	replace
375	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(endIndex);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(startIndex);    	non-compiled	[CE]  ')'  expected	100	None	replace
376	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	22	None	replace
377	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  }  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  orphaned  default	22	None	replace
378	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	22	None	replace
379	[BUG]  [BUGGY]  sign  =  im.getCharacter().doubleValue();  [CE]  cannot  find  symbol  im  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  im.getCharacter().doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  im.getCharacter().doubleValue();	  sign    =    re.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol  im	69	None	replace
380	[BUG]  [BUGGY]  sign  =  source.getCharacter().doubleValue();  [CE]  cannot  find  symbol  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  source.getCharacter().doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  source.getCharacter().doubleValue();	  sign    =    re.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
381	[BUG]  [BUGGY]  re  =  im.getCharacter().doubleValue();  [CE]  cannot  find  symbol  im  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  re  =  im.getCharacter().doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re  =  im.getCharacter().doubleValue();	  sign    =    re.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol  im	69	None	replace
382	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER;	  sign    =   "+   ";    	non-compiled	[CE]  incompatible  types	134	None	replace
383	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  + "+ ";  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  + "+ ";  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER  + "+ ";	  sign    =   "+   ";    	non-compiled	[CE]  incompatible  types	134	None	replace
384	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER.trim();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER.trim();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER.trim();	  sign    =   "+   ";    	non-compiled	[CE]  incompatible  types	134	None	replace
385	[BUG]  [BUGGY]  n  =  0;  sign  =  0;  [CE]  cannot  find  symbol  n  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n  =  0;  sign  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n  =  0;  sign  =  0;	  sign    =    0;    sign    =    0;    	non-compiled	[CE]  cannot  find  symbol  n	21	None	replace
386	[BUG]  [BUGGY]  pos.setErrorIndex(definableIndex);  [CE]  cannot  find  symbol  definableIndex  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(definableIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setErrorIndex(definableIndex);	          pos.setErrorIndex(n);    	non-compiled	[CE]  cannot  find  symbol  definableIndex	98	None	replace
387	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	92	None	replace
388	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [CE]  orphaned  default  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	92	None	replace
389	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    -1;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	130	None	replace
390	[BUG]  [BUGGY]  if(c  ==  DEFAULT_NAMES)  {  sign  =   "+ "+ ";  }  else  if(c  ==  DEFAULT_NAMES)  {  sign  =  -1;  }  [CE]  unclosed  string  literal  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_NAMES)  {  sign  =   "+ "+ ";  }  else  if(c  ==  DEFAULT_NAMES)  {  sign  =  -1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_NAMES)  {  sign  =   "+ "+ ";  }  else  if(c  ==  DEFAULT_NAMES)  {  sign  =  -1;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    -1;    }    	non-compiled	[CE]  unclosed  string  literal	130	None	replace
391	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex));  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex));	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source);    pos.setIndex(startIndex);    	non-compiled	[CE]  'void'  type  not  allowed  here	99	None	replace
392	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex);  pos.setIndex(startIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  startIndex);  pos.setIndex(startIndex);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source);    pos.setIndex(startIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	99	None	replace
393	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	87	None	replace
394	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	87	None	replace
395	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  orphaned  default	87	None	replace
396	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  +  source.getCharacter().toUpperCase();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  +  source.getCharacter().toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER  +  source.getCharacter().toUpperCase();	  sign    =       "+   "    +    source.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
397	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setInitialIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
398	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  2;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign  =  '+'  +  2;	  sign    =    '+'    +    1;    	compilable	  [FE]  AssertionFailedError  	94	10	replace
399	[BUG]  [BUGGY]  sign  =  '+'  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  2;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  2;	  sign    =    '+'    +    1;    	compilable	  [FE]  AssertionFailedError  	94	10	replace
400	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  '+'  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	c  =  '+'  +  1;	  sign    =    '+'    +    1;    	compilable	  [FE]  AssertionFailedError  	94	12	replace
401	[BUG]  [BUGGY]  c  =  '+'  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  '+'  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	c  =  '+'  +  1;	  sign    =    '+'    +    1;    	compilable	  [FE]  AssertionFailedError  	94	12	replace
402	[BUG]  [BUGGY]  int  pos  =  Integer.MAX_VALUE;  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  pos  =  Integer.MAX_VALUE;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  pos  =  Integer.MAX_VALUE;	          pos.setIndex(Integer.MAX_VALUE);    int    pos.setIndex(Integer.MAX_VALUE);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	84	None	replace
403	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }	  sign    =    '+'    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incomparable  types:  char  and  String	72	None	replace
404	[BUG]  [BUGGY]  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    '+'    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  not  a  statement	72	None	replace
405	[BUG]  [BUGGY]  re.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  re.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);	          pos.setIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
406	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  Integer  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [timeout]  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  Integer  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        parseAndIgnoreWhitespace(source,    pos);    Integer  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[timeout]	102	None	add
407	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        parseAndIgnoreWhitespace(source,    pos);    ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	102	None	add
408	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(startIndex);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	102	14	add
409	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	102	14	add
410	[BUG]  [BUGGY]  n.setIndex(endIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n.setIndex(endIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(endIndex);  pos.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	127	None	replace
411	[BUG]  [BUGGY]  char  sign  =  '+';  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  sign  =  '+';	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	43	None	replace
412	[BUG]  [BUGGY]  sign  =  '+'  +  source.substring(startIndex);  [CE]  incompatible  types  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  source.substring(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  source.substring(startIndex);	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);    	non-compiled	[CE]  incompatible  types	117	None	replace
413	[BUG]  [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex,  n);  [CE]  cannot  find  symbol  n  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex,  n);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex,  n);	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	117	None	replace
414	[BUG]  [BUGGY]  sign  =(source  <  0)?  1  :  -1;  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =(source  <  0)?  1  :  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =(source  <  0)?  1  :  -1;	  sign    =(n    <    0)?    1    :    -1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	136	None	replace
415	[BUG]  [BUGGY]  char  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.charAt(0);	  sign    =    0.0    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER.charAt(0);    	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	61	None	replace
416	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	25	None	replace
417	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  nu  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  nu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  nu	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
418	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                    AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	25	None	replace
419	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	44	None	replace
420	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  sign    =    '+';    if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	143	None	replace
421	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	24	None	replace
422	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	24	None	replace
423	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	121	None	add
424	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	121	2	add
425	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	121	2	add
426	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  [CE]  unclosed  string  literal  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  unclosed  string  literal	36	None	replace
427	[BUG]  [BUGGY]  Sign  im  =   "+ "  +  re.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  Sign  im  =   "+ "  +  re.getCharacter().toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	Sign  im  =   "+ "  +  re.getCharacter().toLowerCase();	  sign    =       "+   "    +    re.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
428	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  -  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign  =  '+'  -  1;	  sign    =    '+'    +    1;    	compilable	  [FE]  AssertionFailedError  	94	10	replace
429	[BUG]  [BUGGY]  sign  =  '+'  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  -  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  -  1;	  sign    =    '+'    +    1;    	compilable	  [FE]  AssertionFailedError  	94	10	replace
430	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  orphaned  default  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  orphaned  default	118	None	add
431	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  orphaned  default  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  orphaned  default	118	None	add
432	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	118	None	add
433	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  orphaned  default	89	None	add
434	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue()	  	non-compiled	[CE]  ')'  expected	89	None	add
435	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  orphaned  default	89	None	add
436	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	2	add
437	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	89	2	add
438	[BUG]  [BUGGY]  pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.getIndex(),    -initialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	139	None	replace
439	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(Re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(Re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(Re.doubleValue(),  0.0);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0.0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	145	None	replace
440	[BUG]  [BUGGY]  int  initialIndex  =  re.doubleValue();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  re.doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  re.doubleValue();	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	87	None	replace
441	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	149	None	replace
442	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  nu  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  nu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  nu	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  ';'  expected	149	None	replace
443	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	2	add
444	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	2	add
445	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  endIndex  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  endIndex	104	None	add
446	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	2	add
447	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	2	add
448	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(n);  return  null;  }  [CE]  cannot  find  symbol  n  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(n);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(n);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  n	104	None	add
449	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	23	None	replace
450	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  ';'  expected	23	None	replace
451	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	23	None	replace
452	[BUG]  [BUGGY]  '+'  +  re.getCharacter().doubleValue();  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  +  re.getCharacter().doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  +  re.getCharacter().doubleValue();	  sign    =    '+'    +    re.getCharacter().doubleValue();    	non-compiled	[CE]  not  a  statement	156	None	replace
453	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -sign;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -sign;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -sign;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	22	None	replace
454	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	22	None	replace
455	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  Sign  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  Sign  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    Sign  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  cannot  find  symbol	109	None	add
456	[BUG]  [BUGGY]  char  c  =  source.charAt(i);  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  source.charAt(i);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  source.charAt(i);	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	56	None	replace
457	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex  +  1));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex  +  1));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex    +    1);    pos.setIndex(initialIndex  +  1));	  	non-compiled	[CE]  ';'  expected	1	None	add
458	[BUG]  [BUGGY]  '+'  :  '+'  +  c;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  :  '+'  +  c;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  :  '+'  +  c;	  '+'    :    '+';    	non-compiled	[CE]  not  a  statement	96	None	replace
459	[BUG]  [BUGGY]  '+'  :  '+'  +  im.getCharacterIndex();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  :  '+'  +  im.getCharacterIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  :  '+'  +  im.getCharacterIndex();	  '+'    :    '+';    	non-compiled	[CE]  not  a  statement	96	None	replace
460	[BUG]  [BUGGY]  '+'  :  '+'  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  :  '+'  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  :  '+'  +  1;	  '+'    :    '+';    	non-compiled	[CE]  not  a  statement	96	None	replace
461	[BUG]  [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER  +  1);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER  +  1);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(deFAULT_IMAGINARY_CHARACTER  +  1);	  pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	2	None	replace
462	[BUG]  [BUGGY]  c  =  re.doubleValue()  *  sign;  [CE]  possible  loss  of  precision  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  re.doubleValue()  *  sign;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	c  =  re.doubleValue()  *  sign;	  c    =    re.doubleValue();    	non-compiled	[CE]  possible  loss  of  precision	33	None	replace
463	[BUG]  [BUGGY]  re.setIndex(defulT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  re.setIndex(defulT_IMAGINARY_CHARACTER);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re.setIndex(defulT_IMAGINARY_CHARACTER);	  re.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER	10	None	replace
464	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  Sign  =  0;  sign  =  0;  [CE]  cannot  find  symbol  Sign  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  Sign  =  0;  sign  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    Sign  =  0;  sign  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Sign	20	None	add
465	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  n  =  0;  sign  =  0;  [CE]  cannot  find  symbol  n  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  n  =  0;  sign  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    n  =  0;  sign  =  0;	  	non-compiled	[CE]  cannot  find  symbol  n	20	None	add
466	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  sign  =  0;  Sign  =  0;  [CE]  cannot  find  symbol  Sign  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  sign  =  0;  Sign  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    sign  =  0;  Sign  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Sign	20	None	add
467	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  semn  =  0;  sign  =  0;  [CE]  cannot  find  symbol  semn  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  semn  =  0;  sign  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    semn  =  0;  sign  =  0;	  	non-compiled	[CE]  cannot  find  symbol  semn	20	None	add
468	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	91	2	add
469	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	91	2	add
470	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()	  	non-compiled	[CE]  ')'  expected	91	None	add
471	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  int  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  int  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    int  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	91	None	add
472	[BUG]  [BUGGY]  int  startIndex  =  source.length;  [CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  startIndex  =  source.length;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  startIndex  =  source.length;	  int    initialIndex    =    DEFAULT_IMAGINARY_CHARACTER.length;    	non-compiled	[CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)	128	None	replace
473	[BUG]  [BUGGY]  sign  =  '+'  +  source.toCharArray();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  source.toCharArray();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  source.toCharArray();	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.toCharArray();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	116	None	replace
474	[BUG]  [BUGGY]  '+'  +  DEFAULT_IMAGINARY_CHARACTER.toCharArray();  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  +  DEFAULT_IMAGINARY_CHARACTER.toCharArray();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  +  DEFAULT_IMAGINARY_CHARACTER.toCharArray();	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.toCharArray();    	non-compiled	[CE]  not  a  statement	116	None	replace
475	[BUG]  [BUGGY]  '+'  +  source.toCharArray();  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  +  source.toCharArray();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  +  source.toCharArray();	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.toCharArray();    	non-compiled	[CE]  not  a  statement	116	None	replace
476	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	133	None	replace
477	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  orphaned  default	123	None	add
478	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    int  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()	  	non-compiled	[CE]  ')'  expected	123	None	add
479	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	86	2	add
480	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	86	2	add
481	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	86	2	add
482	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	86	2	add
483	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  orphaned  default	86	None	add
484	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(n);  return  null;  }  }  [CE]  cannot  find  symbol  n  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(n);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  -1)  {  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(n);  return  null;  }  }	  	non-compiled	[CE]  cannot  find  symbol  n	86	None	add
485	[BUG]  [BUGGY]  int  initialIndex  =  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	125	None	replace
486	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '-';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '-';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '-';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  char  and  String	71	None	replace
487	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(startIndex);    	non-compiled	[CE]  ')'  expected	100	None	replace
488	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  + ";  [CE]  unclosed  string  literal  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  + ";  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER  + ";	  sign    =   "+   ";    	non-compiled	[CE]  unclosed  string  literal	134	None	replace
489	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  +  '+';  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER  +  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER  +  '+';	  sign    =   "+   ";    	non-compiled	[CE]  incompatible  types	134	None	replace
490	[BUG]  [BUGGY]  pos  =  0;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos  =  0;	  n    =    0;    	non-compiled	[CE]  incompatible  types	85	None	replace
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  re  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	re  =  0;	  n    =    0;    	compilable	  [FE]  AssertionFailedError  	85	12	replace
492	[BUG]  [BUGGY]  re  =  0;  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  re  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re  =  0;	  n    =    0;    	compilable	  [FE]  AssertionFailedError  	85	12	replace
493	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(Re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(Re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(Re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	42	None	replace
494	[BUG]  [BUGGY]  Sign  im  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  Sign  im  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	Sign  im  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    0.0    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
495	[BUG]  [BUGGY]  if(im.getErrorIndex()  ==  0.0)  {  if(!im.getErrorIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(im.getErrorIndex()  ==  0.0)  {  if(!im.getErrorIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(im.getErrorIndex()  ==  0.0)  {  if(!im.getErrorIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('+'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	152	None	replace
496	[BUG]  [BUGGY]  if(im.getErrorIndex()  ==  '-')  {  if(!im.getErrorIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(im.getErrorIndex()  ==  '-')  {  if(!im.getErrorIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(im.getErrorIndex()  ==  '-')  {  if(!im.getErrorIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('+'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	152	None	replace
497	[BUG]  [BUGGY]  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  ';'  expected	132	None	replace
498	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  incomparable  types:  char  and  String	132	None	replace
499	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0.0;    }    else    {    pos.setIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	146	None	replace
500	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue()	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0.0;    }    else    {    pos.setIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	146	None	replace
501	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	105	None	replace
502	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	106	None	replace
503	[BUG]  [BUGGY]  '+'  +  DEFAULT_IMAGINARY_CHARACTER;  [CE]  not  a  statement  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  +  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  +  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  not  a  statement	35	None	replace
504	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	8	None	replace
505	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	8	None	replace
506	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  + "';  }  [CE]  unclosed  string  literal  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  + "';  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  + "';  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  unclosed  string  literal	34	None	replace
507	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  Integer  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;  Integer  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    sign    =    1;    Integer  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;	  	non-compiled	[CE]  ';'  expected	30	None	add
508	[BUG]  [BUGGY]  n  =  0;  sign  =  -1;  [CE]  cannot  find  symbol  n  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n  =  0;  sign  =  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n  =  0;  sign  =  -1;	  sign    =    -1;    sign    =    -1;    	non-compiled	[CE]  cannot  find  symbol  n	54	None	replace
509	[BUG]  [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	66	None	replace
510	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(initialIndex);  pos.setIndex(startIndex);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	compilable	  [FE]  AssertionFailedError  	63	14	replace
511	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setIndex(startIndex);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	compilable	  [FE]  AssertionFailedError  	63	14	replace
512	[BUG]  [BUGGY]  char  initialIndex  =  c.charAt(0);  sign  =  '+';  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  initialIndex  =  c.charAt(0);  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  initialIndex  =  c.charAt(0);  sign  =  '+';	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	70	None	replace
513	[BUG]  [BUGGY]  char  initialIndex  =  c.charAt(i);  sign  =  '+';  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  initialIndex  =  c.charAt(i);  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  initialIndex  =  c.charAt(i);  sign  =  '+';	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	70	None	replace
514	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0.0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	147	None	replace
515	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [CE]  ';'  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0.0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  ';'  expected	147	None	replace
516	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  if(sign  ==  '+'  +  1)  {  sign  =  '+'  +  1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    '+'    +    1;    if(sign  ==  '+'  +  1)  {  sign  =  '+'  +  1;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	93	2	add
517	[BUG]  [BUGGY]  sign  =  '+'  +  1;  if(sign  ==  '+'  +  1)  {  sign  =  '+'  +  1;  }  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  if(sign  ==  '+'  +  1)  {  sign  =  '+'  +  1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    if(sign  ==  '+'  +  1)  {  sign  =  '+'  +  1;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	93	2	add
518	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  if(sign  ==  '+')  {  sign  =  '+'  +  1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    '+'    +    1;    if(sign  ==  '+')  {  sign  =  '+'  +  1;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	93	2	add
519	[BUG]  [BUGGY]  sign  =  '+'  +  1;  if(sign  ==  '+')  {  sign  =  '+'  +  1;  }  [FE]  StringIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  if(sign  ==  '+')  {  sign  =  '+'  +  1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    if(sign  ==  '+')  {  sign  =  '+'  +  1;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	93	2	add
520	[BUG]  [BUGGY]  sign  =  '+'  +  1;  char  sign  =  '+'  +  1;  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  char  sign  =  '+'  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    char  sign  =  '+'  +  1;	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	93	None	add
521	[BUG]  [BUGGY]  sign  =  '+'  +  1;  Sign  =  '+'  +  1;  [CE]  cannot  find  symbol  Sign  [FE]          AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  Sign  =  '+'  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    Sign  =  '+'  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Sign	93	None	add
522	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  '.')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	if(c  ==  '.')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	compilable	  [FE]  AssertionFailedError  	110	12	replace
523	[BUG]  [BUGGY]  if(c  ==  '.')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  '.')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  '.')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	compilable	  [FE]  AssertionFailedError  	110	12	replace
524	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(sign  ==  '.')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	if(sign  ==  '.')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	compilable	  [FE]  AssertionFailedError  	110	12	replace
525	[BUG]  [BUGGY]  if(sign  ==  '.')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(sign  ==  '.')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(sign  ==  '.')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	compilable	  [FE]  AssertionFailedError  	110	12	replace
526	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	compilable	  [FE]  AssertionFailedError  	110	12	replace
527	[BUG]  [BUGGY]  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  AssertionFailedError  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	compilable	  [FE]  AssertionFailedError  	110	12	replace
528	[BUG]  [BUGGY]  n.setIndex(startIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(startIndex);  pos.setIndex(initialIndex);	          pos.setIndex(startIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  n	65	None	replace
529	[BUG]  [BUGGY]  n.setIndex(startIndex);  n.setIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n.setIndex(startIndex);  n.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(startIndex);  n.setIndex(initialIndex);	          pos.setIndex(startIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  n	65	None	replace
530	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '-';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '-';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '-';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	131	None	replace
531	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +   "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +   "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +   "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  char  and  String	129	None	replace
532	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +   ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unclosed  string  literal  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +   ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +   ";  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	129	None	replace
533	[BUG]  [BUGGY]  sign  =  '+'  +  source.toUpperCase();  [CE]  incompatible  types  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  source.toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  source.toUpperCase();	  sign    =    '+'    +    source.getCharacter().toUpperCase();    	non-compiled	[CE]  incompatible  types	113	None	replace
534	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setIndex(initialIndex);  pos.setErrorIndex(sig);  [CE]  cannot  find  symbol  sig  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setIndex(initialIndex);  pos.setErrorIndex(sig);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    pos.setIndex(initialIndex);  pos.setErrorIndex(sig);	  	non-compiled	[CE]  cannot  find  symbol  sig	51	None	add
535	[BUG]  [BUGGY]  int  startIndex  =  im.getIndex();  [CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  startIndex  =  im.getIndex();  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  startIndex  =  im.getIndex();	  int    initialIndex    =    im.getIndex();    	non-compiled	[CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)	4	None	replace
536	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue());  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue());  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue());  }	  sign    =    '+';    sign    =    '+';    	non-compiled	[CE]  incomparable  types:  char  and  String	41	None	replace
537	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  Integer  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  Integer  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    Integer  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  ';'  expected	28	None	add
538	[BUG]  [BUGGY]  pos.setErrorIndex(defulT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(defulT_IMAGINARY_CHARACTER);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setErrorIndex(defulT_IMAGINARY_CHARACTER);	          pos.setErrorIndex(n);    	non-compiled	[CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER	98	None	replace
539	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  Sign  =  -1;  sign  =  -1;  [CE]  cannot  find  symbol  Sign  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  Sign  =  -1;  sign  =  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    Sign  =  -1;  sign  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  Sign	53	None	add
540	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  char  sign  =  -1;  sign  =  -1;  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  char  sign  =  -1;  sign  =  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    char  sign  =  -1;  sign  =  -1;	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	53	None	add
541	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  n  =  -1;  sign  =  -1;  [CE]  cannot  find  symbol  n  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  n  =  -1;  sign  =  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    n  =  -1;  sign  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  n	53	None	add
542	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  sign  =  -1;  Sign  =  -1;  [CE]  cannot  find  symbol  Sign  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  sign  =  -1;  Sign  =  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    sign  =  -1;  Sign  =  -1;	  	non-compiled	[CE]  cannot  find  symbol  Sign	53	None	add
543	[BUG]  [BUGGY]  if(source.getCharacterIndex()  ==  '+')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(source.getCharacterIndex()  ==  '+')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(source.getCharacterIndex()  ==  '+')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
544	[BUG]  [BUGGY]  if(source.getCharacterIndex()  ==  '-')  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(source.getCharacterIndex()  ==  '-')  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(source.getCharacterIndex()  ==  '-')  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
545	[BUG]  [BUGGY]  int  initialIndex  =  source.indexOf('n',  c);  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  source.indexOf('n',  c);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  source.indexOf('n',  c);	  int    initialIndex    =    im.initialIndex;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	48	None	replace
546	[BUG]  [BUGGY]  pos  =  '+';  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos  =  '+';	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  incompatible  types	45	None	replace
547	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(InitialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(InitialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(InitialIndex);  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	45	None	replace
548	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(sign);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(initialIndex);  pos.setErrorIndex(sign);	  pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    	non-compiled	[CE]  cannot  find  symbol  n	52	None	replace
549	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(sign);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(startIndex);  pos.setErrorIndex(sign);	  pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    	compilable	  [FE]  AssertionFailedError  	52	14	replace
550	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(sign);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(sign);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(startIndex);  pos.setErrorIndex(sign);	  pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    	compilable	  [FE]  AssertionFailedError  	52	14	replace
551	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleVal  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleVal  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleVal	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('/'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	151	None	replace
552	[BUG]  [BUGGY]  if(im.getErrorIndex()  ==  '-')  {  if(!im.getErrorIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(im.getErrorIndex()  ==  '-')  {  if(!im.getErrorIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(im.getErrorIndex()  ==  '-')  {  if(!im.getErrorIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('/'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	151	None	replace
553	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  ';'  expected	119	None	replace
554	[BUG]  [BUGGY]  im.setIndex(startIndex);  [CE]  cannot  find  symbol  im  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  im.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	im.setIndex(startIndex);	  im.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  im	12	None	replace
555	[BUG]  [BUGGY]  im.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  im.setIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	im.setIndex(endIndex);	  im.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	12	None	replace
556	[BUG]  [BUGGY]  symbol  =  '+'  +  source.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  symbol  =  '+'  +  source.getCharacter().toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	symbol  =  '+'  +  source.getCharacter().toLowerCase();	  sign    =    '+'    +    source.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  symbol	15	None	replace
557	[BUG]  [BUGGY]  sign  =  '+'  +  source.getCharacter().toLowerCase(lhs);  [CE]  cannot  find  symbol  lhs  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  source.getCharacter().toLowerCase(lhs);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  source.getCharacter().toLowerCase(lhs);	  sign    =    '+'    +    source.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  lhs	15	None	replace
558	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	7	14	add
559	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	7	14	add
560	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	7	14	add
561	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	7	14	add
562	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  Sign  sign  =  '+';  sign  =  '+';  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  Sign  sign  =  '+';  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    Sign  sign  =  '+';  sign  =  '+';	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
563	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  Sign  =  '+';  sign  =  '+';  [CE]  cannot  find  symbol  Sign  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  Sign  =  '+';  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    Sign  =  '+';  sign  =  '+';	  	non-compiled	[CE]  cannot  find  symbol  Sign	40	None	add
564	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  sign  '+';  sign  =  '+';  [CE]  not  a  statement  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  sign  '+';  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    sign  '+';  sign  =  '+';	  	non-compiled	[CE]  not  a  statement	40	None	add
565	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  sign  =  '+';  Sign  =  '+';  [CE]  cannot  find  symbol  Sign  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  sign  =  '+';  Sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    sign  =  '+';  Sign  =  '+';	  	non-compiled	[CE]  cannot  find  symbol  Sign	40	None	add
566	[BUG]  [BUGGY]  int  initialIndex  =  source.index;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  source.index;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  source.index;	  int    initialIndex    =    source.initialIndex;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	46	None	replace
567	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	122	None	replace
568	[BUG]  [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIDDLE);  [CE]  cannot  find  symbol  MIDDLE  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  pos.setIndex(Integer.MIDDLE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MIN_VALUE);    pos.setIndex(Integer.MIDDLE);	  	non-compiled	[CE]  cannot  find  symbol  MIDDLE	38	None	add
569	[BUG]  [BUGGY]  int  initialIndex  =  im.getIndex()  /  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  im.getIndex()  /  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  im.getIndex()  /  1;	  int    initialIndex    =    re.getIndex()    +    1;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	6	None	replace
570	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	107	2	add
571	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	107	2	add
572	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  orphaned  default  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  orphaned  default	107	None	add
573	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	107	None	add
574	[BUG]  [BUGGY]  Sign  im  =  '+'  +  source.getCharacter().toUpperCase();  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  Sign  im  =  '+'  +  source.getCharacter().toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	Sign  im  =  '+'  +  source.getCharacter().toUpperCase();	  sign    =    '+'    +    im.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
575	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  + "';  }  else  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  [CE]  unclosed  string  literal  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  + "';  }  else  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  + "';  }  else  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    -1;    }    	non-compiled	[CE]  unclosed  string  literal	130	None	replace
576	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    '+';    if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	144	None	replace
577	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    '+';    if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	144	None	replace
578	[BUG]  [BUGGY]  Sign  im  =  '+'  +  source.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  Sign  im  =  '+'  +  source.getCharacter().toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	Sign  im  =  '+'  +  source.getCharacter().toLowerCase();	  sign    =    '+'    +    im.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
579	[BUG]  [BUGGY]  Sign  im  =   "+ "  +  re.getCharacter().toUpperCase();  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  Sign  im  =   "+ "  +  re.getCharacter().toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	Sign  im  =   "+ "  +  re.getCharacter().toUpperCase();	  sign    =       "+   "    +    re.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
580	[BUG]  [BUGGY]  Sign  im  =  re.getCharacter().doubleValue();  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  Sign  im  =  re.getCharacter().doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	Sign  im  =  re.getCharacter().doubleValue();	  sign    =    re.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
581	[BUG]  [BUGGY]  sign  =   "+ "  +  source.toUpperCase();  [CE]  incompatible  types  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "  +  source.toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  source.toUpperCase();	  sign    =       "+   "    +    img.getCharacter().toUpperCase();    	non-compiled	[CE]  incompatible  types	155	None	replace
582	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  Integer  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  Integer  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    Integer  pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	non-compiled	[CE]  ';'  expected	62	None	add
583	[BUG]  [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  endIndex  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  endIndex	140	None	add
584	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	58	None	replace
585	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]                  AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	58	None	replace
586	[BUG]  [BUGGY]  n.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n.setIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(endIndex);	  n.setIndex(initialIndex);    n.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	27	None	replace
587	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(initialIndex);  pos.setIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  n	29	None	replace
588	[BUG]  [BUGGY]  if(source.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(source.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(source.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
589	[BUG]  [BUGGY]  if(source.getCharacterIndex()  ==  '+')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(source.getCharacterIndex()  ==  '+')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(source.getCharacterIndex()  ==  '+')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
590	[BUG]  [BUGGY]  if(source.getCharacterIndex()  ==  '-')  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(source.getCharacterIndex()  ==  '-')  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(source.getCharacterIndex()  ==  '-')  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
591	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    '+';    if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	108	None	replace
592	[BUG]  [BUGGY]  Sign  img  =  '+'  +  source.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  Sign  img  =  '+'  +  source.getCharacter().toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	Sign  img  =  '+'  +  source.getCharacter().toLowerCase();	  sign    =    '+'    +    img.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
593	[BUG]  [BUGGY]  semn  =  '+'  +  source.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  semn  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  semn  =  '+'  +  source.getCharacter().toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	semn  =  '+'  +  source.getCharacter().toLowerCase();	  sign    =    '+'    +    img.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  semn	150	None	replace
594	[BUG]  [BUGGY]  int  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  ';'  expected	133	None	replace
595	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	87	None	replace
596	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(initialIndex);    	non-compiled	[CE]  ')'  expected	137	None	replace
597	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(initialIndex);    	non-compiled	[CE]  ')'  expected	137	None	replace
598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign  =  DEFAULT_IMAGINARY_CHARACTER.charAt(0);	  sign    =   "+   ";    	compilable	  [FE]  AssertionFailedError  	134	10	replace
599	[BUG]  [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  DEFAULT_IMAGINARY_CHARACTER.charAt(0);	  sign    =   "+   ";    	compilable	  [FE]  AssertionFailedError  	134	10	replace
600	[BUG]  [BUGGY]  int  initialIndex  =  n.initialIndex;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  n.initialIndex;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  n.initialIndex;	  int    initialIndex    =    im.initialIndex;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	48	None	replace
601	[BUG]  [BUGGY]  pos.setErrorIndex(deFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setErrorIndex(deFAULT_IMAGINARY_CHARACTER);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setErrorIndex(deFAULT_IMAGINARY_CHARACTER);	          pos.setErrorIndex(n);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	98	None	replace
602	[BUG]  [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex,  c);  [CE]  incompatible  types  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex,  c);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex,  c);	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);    	non-compiled	[CE]  incompatible  types	117	None	replace
603	[BUG]  [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    int  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	86	None	add
604	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  ';'  expected	148	None	replace
605	[BUG]  [BUGGY]  int  pos  =  new  Integer(re.doubleValue());  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  pos  =  new  Integer(re.doubleValue());  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  pos  =  new  Integer(re.doubleValue());	          pos.setIndex(Integer.MAX_VALUE);    int    pos.setIndex(Integer.MAX_VALUE);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	84	None	replace
606	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
607	[BUG]  [BUGGY]  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
608	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  ' "'  +  c  +  ',';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  ' "'  +  c  +  ',';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  ' "'  +  c  +  ',';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  incomparable  types:  char  and  String	129	None	replace
609	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    sign    =    1;    	non-compiled	[CE]  incomparable  types:  char  and  String	31	None	replace
610	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    sign    =    1;    	non-compiled	[CE]  incomparable  types:  char  and  String	31	None	replace
611	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  }  else  {  throw  new  IllegalArgumentException( " ");  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    sign    =    1;    	non-compiled	[CE]  incomparable  types:  char  and  String	31	None	replace
612	[BUG]  [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(initialIndex);	          pos.setIndex(startIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	66	None	replace
613	[BUG]  [BUGGY]  char  c  =  re.charAt(0);  sign  =  '+';  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  re.charAt(0);  sign  =  '+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  re.charAt(0);  sign  =  '+';	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	43	None	replace
614	[BUG]  [BUGGY]  symbol  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.toCharArray();  [CE]  cannot  find  symbol  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  symbol  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.toCharArray();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	symbol  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.toCharArray();	  sign    =    '+'    +    DEFAULT_IMAGINARY_CHARACTER.toCharArray();    	non-compiled	[CE]  cannot  find  symbol  symbol	116	None	replace
615	[BUG]  [BUGGY]  if(initialIndex  <  0)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  cannot  find  symbol  endIndex  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(initialIndex  <  0)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(initialIndex  <  0)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  sign    =    '+';    if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    }    	non-compiled	[CE]  cannot  find  symbol  endIndex	143	None	replace
616	[BUG]  [BUGGY]  if(c.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  char  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  char  cannot  be  dereferenced	154	None	replace
617	[BUG]  [BUGGY]  if(re.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(re.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(re.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
618	[BUG]  [BUGGY]  n.setIndex(Integer.MAX_VALUE);  [CE]  cannot  find  symbol  n  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n.setIndex(Integer.MAX_VALUE);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(Integer.MAX_VALUE);	          pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol  n	81	None	replace
619	[BUG]  [BUGGY]  sign  =   "+ "+';  [CE]  unclosed  character  literal  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+';  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+';	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  unclosed  character  literal	34	None	replace
620	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER;  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  incomparable  types:  char  and  String	34	None	replace
621	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER?  1  :  0);  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER?  1  :  0);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER?  1  :  0);	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  incomparable  types:  char  and  String	34	None	replace
622	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  -1  :  1;  [CE]  incomparable  types:  char  and  String  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  -1  :  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  -1  :  1;	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    	non-compiled	[CE]  incomparable  types:  char  and  String	34	None	replace
623	[BUG]  [BUGGY]  if(c.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  char  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  char  cannot  be  dereferenced	153	None	replace
624	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  return  null;  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    else    {    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	126	None	replace
625	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  ';'  expected	149	None	replace
626	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  Sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  Sign  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  Sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    Sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  cannot  find  symbol  Sign	109	None	add
627	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	107	2	add
628	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	107	2	add
629	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  [CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    return    null;    }    int  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  variable  sign  is  already  defined  in  method  parse(String,ParsePosition)	107	None	add
630	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	20	None	add
631	[BUG]  [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  sign  =  0;  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	20	None	add
632	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setInitialIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	9	None	replace
633	[BUG]  [BUGGY]  '+'  +  re.getCharacter().toUpperCase();  [CE]  not  a  statement  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  '+'  +  re.getCharacter().toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  +  re.getCharacter().toUpperCase();	  sign    =    '+'    +    im.getCharacter().toUpperCase();    	non-compiled	[CE]  not  a  statement	75	None	replace
634	[BUG]  [BUGGY]  if(initialIndex  ==  -1)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  endIndex  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(initialIndex  ==  -1)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(initialIndex  ==  -1)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  endIndex	120	None	replace
635	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  n  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	int  n  =  0;	  n    =    0;    	compilable	  [FE]  AssertionFailedError  	85	12	replace
636	[BUG]  [BUGGY]  int  n  =  0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  n  =  0;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  n  =  0;	  n    =    0;    	compilable	  [FE]  AssertionFailedError  	85	12	replace
637	[BUG]  [BUGGY]  n  =  0  +  1;  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n  =  0  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n  =  0  +  1;	  n    =    0;    	non-compiled	[CE]  cannot  find  symbol  n	85	None	replace
638	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }	  sign    =    -1;    sign    =    -1;    	non-compiled	[CE]  incomparable  types:  char  and  String	54	None	replace
639	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    sign    =    -1;    	non-compiled	[CE]  incomparable  types:  char  and  String	54	None	replace
640	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }	  sign    =    -1;    sign    =    -1;    	non-compiled	[CE]  incomparable  types:  char  and  String	54	None	replace
641	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.01);  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.01);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.01);  }	  sign    =    -1;    sign    =    -1;    	non-compiled	[CE]  incomparable  types:  char  and  String	54	None	replace
642	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	40	None	add
643	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	40	None	add
644	[BUG]  [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	40	None	add
645	[BUG]  [BUGGY]  sign  =  '+'  +  1;  if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  im  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  im	93	None	add
646	[BUG]  [BUGGY]  sign  =  '+'  +  1;  if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  im  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  cannot  find  symbol  im	93	None	add
647	[BUG]  [BUGGY]  sign  =  '+'  +  1;  if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  im  [FE]        AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  im	93	None	add
648	[BUG]  [BUGGY]  sign  =  '+'  +  1;  if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  im  [FE]          AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  1;  if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+'    +    1;    if(  im.isEmpty())  {  int  sign  =  '+'  +  1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  cannot  find  symbol  im	93	None	add
649	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    0;    if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	119	None	replace
650	[BUG]  [BUGGY]  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.substring(1);  [CE]  incomparable  types:  char  and  String  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.substring(1);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.substring(1);	  sign    =    0.0    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER.charAt(0);    	non-compiled	[CE]  incomparable  types:  char  and  String	61	None	replace
651	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  initialIndex);  pos.setErrorIndex(endIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  initialIndex);  pos.setErrorIndex(endIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	26	None	replace
652	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    '+';    if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	141	None	replace
653	[BUG]  [BUGGY]  sign  =  img.getCharacter().doubleValue();  [CE]  cannot  find  symbol  img  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  img.getCharacter().doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  img.getCharacter().doubleValue();	  sign    =    re.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol  img	69	None	replace
654	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	2	add
655	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	2	add
656	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	2	add
657	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	104	2	add
658	[BUG]  [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(sign    ==    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	non-compiled	[CE]  orphaned  default	104	None	add
659	[BUG]  [BUGGY]  int  initialIndex  =  source.initialIndex  -  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  source.initialIndex  -  1;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  source.initialIndex  -  1;	  int    initialIndex    =    source.initialIndex;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	46	None	replace
660	[BUG]  [BUGGY]  sign  =   "+ "  +  im.toLowerCase();  [CE]  cannot  find  symbol  im  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "  +  im.toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  im.toLowerCase();	  sign    =       "+   "    +    source.toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  im	111	None	replace
661	[BUG]  [BUGGY]  char  c  =  source.toLowerCase();  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  source.toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  source.toLowerCase();	  sign    =       "+   "    +    source.toLowerCase();    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	111	None	replace
662	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  sign    =    '+';    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	42	None	replace
663	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValu  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValu	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('/'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	151	None	replace
664	[BUG]  [BUGGY]  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('/'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	151	None	replace
665	[BUG]  [BUGGY]  if(im.getErrorIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(im.getErrorIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(im.getErrorIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('/'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	151	None	replace
666	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue()	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setErrorIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	92	None	replace
667	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	53	None	add
668	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	53	None	add
669	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	53	None	add
670	[BUG]  [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    -1;    sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        -1;        sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	53	None	add
671	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	          pos.setIndex(initialIndex);    return    new    Complex(re.doubleValue(),    0.0);    	non-compiled	[CE]  incomparable  types:  char  and  String	157	None	replace
672	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    int    pos.setIndex(initialIndex);    	non-compiled	[CE]  ';'  expected	32	None	replace
673	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    int    pos.setIndex(initialIndex);    	non-compiled	[CE]  ';'  expected	32	None	replace
674	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    int    pos.setIndex(initialIndex);    	non-compiled	[CE]  ';'  expected	32	None	replace
675	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	65	None	replace
676	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	65	None	replace
677	[BUG]  [BUGGY]  if(c  <  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  endIndex  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  <  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  <  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    '+';    if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  endIndex	144	None	replace
678	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex  +  1);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex  +  1);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.getIndex(),    -initialIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	139	None	replace
679	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  pos.setIndex(startIndex);    pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	50	14	replace
680	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [FE]  AssertionFailedError  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  pos.setIndex(startIndex);    pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	50	14	replace
681	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    DEFAULT_IMAGINARY_CHARACTER);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
682	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(endIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(initialIndex);  n.setErrorIndex(endIndex);	  n.setIndex(initialIndex);    n.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	27	None	replace
683	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  0)  {  sign  =  0;  if(initialIndex  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  0)  {  sign  =  0;  if(initialIndex  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	118	2	add
684	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  0)  {  sign  =  0;  if(initialIndex  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  if(sign  ==  0)  {  sign  =  0;  if(initialIndex  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    if(sign  ==  0)  {  sign  =  0;  if(initialIndex  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	118	2	add
685	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	118	2	add
686	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	118	2	add
687	[BUG]  [BUGGY]  sign  =  0.0  ||  c  >  DEFAULT_IMAGINARY_CHARACTER;  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  0.0  ||  c  >  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  ||  c  >  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    0.0    ||    c    >=    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	97	None	replace
688	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setStartIndex(initialIndex));  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.setStartIndex(initialIndex));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  pos.setStartIndex(initialIndex));	  pos.setStartIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
689	[BUG]  [BUGGY]  c  =  0.0  ||  c!=  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  c  =  0.0  ||  c!=  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	c  =  0.0  ||  c!=  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    0.0    ||    c!=    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incomparable  types:  char  and  String	60	None	replace
690	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  -1  :  -1;  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  -1  :  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  -1  :  -1;	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    -1;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	130	None	replace
691	[BUG]  [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  -1;  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  -1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "+(c  ==  DEFAULT_IMAGINARY_CHARACTER)?  1  :  -1;	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =       "+   "+   ";    }    else    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    -1;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	130	None	replace
692	[BUG]  [BUGGY]  int  initialIndex  =  0;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  int  initialIndex  =  0;  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  0;	  int    initialIndex    =    DEFAULT_IMAGINARY_CHARACTER.length;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	128	None	replace
693	[BUG]  [BUGGY]  sign  =  '+'  +  img.getCharacter().toUpperCase();  [CE]  cannot  find  symbol  img  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =  '+'  +  img.getCharacter().toUpperCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  img.getCharacter().toUpperCase();	  sign    =       "+   "    +    img.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol  img	155	None	replace
694	[BUG]  [BUGGY]  re.setIndex(deFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  re.setIndex(deFAULT_IMAGINARY_CHARACTER);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re.setIndex(deFAULT_IMAGINARY_CHARACTER);	  re.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	10	None	replace
695	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }	  pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    	non-compiled	[CE]  incomparable  types:  char  and  String	52	None	replace
696	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValu  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  if(im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValu	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('+'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	152	None	replace
697	[BUG]  [BUGGY]  if(im.getErrorIndex()  ==  0.0)  {  if(im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(im.getErrorIndex()  ==  0.0)  {  if(im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(im.getErrorIndex()  ==  0.0)  {  if(im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('+'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	152	None	replace
698	[BUG]  [BUGGY]  if(im.getErrorIndex()  ==  0.0)  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(im.getErrorIndex()  ==  0.0)  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(im.getErrorIndex()  ==  0.0)  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('+'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	152	None	replace
699	[BUG]  [BUGGY]  if(im.getErrorIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(im.getErrorIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(im.getErrorIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(    im.getCharacterIndex()    ==    '-')    {    if(!im.getCharacterIndex().equals('+'))    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	152	None	replace
700	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	57	None	replace
701	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	57	None	replace
702	[BUG]  [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(initialIndex));    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	138	None	replace
703	[BUG]  [BUGGY]  ParsePosition  pos  =  parseWhitespace(source,  pos.setIndex(initialIndex));  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  ParsePosition  pos  =  parseWhitespace(source,  pos.setIndex(initialIndex));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	ParsePosition  pos  =  parseWhitespace(source,  pos.setIndex(initialIndex));	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(initialIndex));    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	138	None	replace
704	[BUG]  [BUGGY]  char  c  =  DEFAULT_IMAGINARY_CHARACTER;  [CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  char  c  =  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  c  =  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    '+'    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  variable  c  is  already  defined  in  method  parse(String,ParsePosition)	72	None	replace
705	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  }	  sign    =    '+'    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incomparable  types:  char  and  String	72	None	replace
706	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  sign  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  sign  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  sign  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    '+'    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER;    	non-compiled	[CE]  incomparable  types:  char  and  String	72	None	replace
707	[BUG]  [BUGGY]  sign  =   "+ "  +  img.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  img  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign  =   "+ "  +  img.getCharacter().toLowerCase();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  img.getCharacter().toLowerCase();	  sign    =       "+   "    +    re.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  img	14	None	replace
708	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
709	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  sign    =    -1;    if(sign    ==    -1)    {    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	88	None	replace
710	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	58	None	replace
711	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	56	None	replace
712	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]              AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  sign    =    -1;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    -1;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	56	None	replace
713	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	28	None	add
714	[BUG]  [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  pos.setIndex(Integer.MAX_VALUE  +  1));  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  pos.setIndex(Integer.MAX_VALUE  +  1));  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MAX_VALUE    +    1);    pos.setIndex(Integer.MAX_VALUE  +  1));	  	non-compiled	[CE]  ';'  expected	114	None	add
715	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  initialIndex);  pos.setErrorIndex(startIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  initialIndex);  pos.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	127	None	replace
716	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	63	None	replace
717	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source);    pos.setIndex(startIndex);    	compilable	  [FE]  AssertionFailedError  	99	14	replace
718	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source);    pos.setIndex(startIndex);    	compilable	  [FE]  AssertionFailedError  	99	14	replace
719	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	29	None	replace
720	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	29	None	replace
721	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  DEFAULT_IMAGINARY_CHARACTER;  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  DEFAULT_IMAGINARY_CHARACTER;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  DEFAULT_IMAGINARY_CHARACTER;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    sign    =    '+';    }    	non-compiled	[CE]  incomparable  types:  char  and  String	70	None	replace
722	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return	  sign    =    0;    if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    int    sign    =    0;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    return    null;    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
723	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	140	14	add
724	[BUG]  [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	140	14	add
725	[BUG]  [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  orphaned  default  [FE]      AssertionFailedError    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        '+';        if(    sign    <    '+')    {    sign    =    '+';    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	non-compiled	[CE]  orphaned  default	140	None	add
726	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);  }  [BUGGY]      sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);  }	          pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,    pos.setIndex(startIndex);    	non-compiled	[CE]  ')'  expected	100	None	replace
727	[BUG]  [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  Sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  Sign  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :      [BUGGY]  sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  Sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign        =        0;        if(sign    ==    0)    {    sign    =    0;    }    else    {    return    new    Complex(re.doubleValue(),    0.0);    }    Sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  cannot  find  symbol  Sign	121	None	add
