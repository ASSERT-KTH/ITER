bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(initialIndex  +  1);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(initialIndex  +  1);	      pos.setIndex(initialIndex);    	compilable	  [FE]  AssertionFailedError  	11	14	replace
2	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(initialIndex  +  1);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex  +  1);	      pos.setIndex(initialIndex);    	compilable	  [FE]  AssertionFailedError  	11	14	replace
3	[BUG]  [BUGGY]  int  initialIndex  =  source.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  int  initialIndex  =  source.getIndex();  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  source.getIndex();	      int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	17	None	replace
4	[BUG]  [BUGGY]  int  initialIndex  =  im.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  int  initialIndex  =  im.getIndex();  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  im.getIndex();	      int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	17	None	replace
5	[BUG]  [BUGGY]  int  initialIndex  =  re.getIndex()  -  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  int  initialIndex  =  re.getIndex()  -  1;  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  re.getIndex()  -  1;	      int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	17	None	replace
6	[BUG]  [BUGGY]  int  initialIndex  =  re.getIndex()  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  int  initialIndex  =  re.getIndex()  +  1;  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  re.getIndex()  +  1;	      int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	17	None	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	20	14	add
8	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	20	14	add
9	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
10	[BUG]  [BUGGY]  re.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  re.setIndex(endIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re.setIndex(endIndex);	      re.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	12	None	replace
11	[BUG]  [BUGGY]  re.setIndex(startIndex);  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  re.setIndex(startIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	re.setIndex(startIndex);	      re.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
12	[BUG]  [BUGGY]  im.setIndex(initialIndex);  [CE]  cannot  find  symbol  im  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  im.setIndex(initialIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	im.setIndex(initialIndex);	      re.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  im	12	None	replace
13	[BUG]  [BUGGY]  sign  =   "+ "  +  source.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =   "+ "  +  source.getCharacter().toLowerCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  source.getCharacter().toLowerCase();	  sign    =   "+   "    +    im.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
14	[BUG]  [BUGGY]  sign  =   "+ "  +  re.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =   "+ "  +  re.getCharacter().toLowerCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  re.getCharacter().toLowerCase();	  sign    =   "+   "    +    im.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
15	[BUG]  [BUGGY]  sign  =  '+'  +  source.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  source.getCharacter().toLowerCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  source.getCharacter().toLowerCase();	  sign    =   "+   "    +    im.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
16	[BUG]  [BUGGY]  sign  =  '+'  +  im.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  im  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  im.getCharacter().toLowerCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  im.getCharacter().toLowerCase();	  sign    =   "+   "    +    im.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  im	25	None	replace
17	[BUG]  [BUGGY]  pos.setStartIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setStartIndex(endIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setStartIndex(endIndex);	      pos.setStartIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	15	None	replace
18	[BUG]  [BUGGY]  pos.setStartIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setStartIndex(initialIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setStartIndex(initialIndex);	      pos.setStartIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
19	[BUG]  [BUGGY]  pos.setStartIndex(startIndex  +  1);  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setStartIndex(startIndex  +  1);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setStartIndex(startIndex  +  1);	      pos.setStartIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
20	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  sign  =  0;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    0;    sign  =  0;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
21	[BUG]  [BUGGY]  sign  =  0;  sign  =  0;  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  sign  =  0;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    sign  =  0;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
22	[BUG]  [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	1	None	add
23	[BUG]  [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	1	None	add
24	[BUG]  [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	1	None	add
25	[BUG]  [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	1	None	add
26	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(initialIndex);  pos.setErrorIndex(endIndex);	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	21	None	replace
27	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(initialIndex);  n.setErrorIndex(startIndex);	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	21	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	10	14	add
29	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	10	14	add
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;	  	compilable	  [FE]  AssertionFailedError  	10	14	add
31	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  sign  =  1;  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  sign  =  1;	  	compilable	  [FE]  AssertionFailedError  	10	14	add
32	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  int  pos.setIndex(initialIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(initialIndex);    int  pos.setIndex(initialIndex);	  	non-compiled	[CE]  ';'  expected	10	None	add
33	[BUG]  [BUGGY]  c  =  re.doubleValue();  [CE]  possible  loss  of  precision  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  c  =  re.doubleValue();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	c  =  re.doubleValue();	  sign    =    0;    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
34	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  [CE]  unclosed  string  literal  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }	  sign    =   "+   "+   ";    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
35	[BUG]  [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incompatible  types  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER;	  sign    =   "+   "+   ";    	non-compiled	[CE]  incompatible  types	19	None	replace
36	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  [CE]  unclosed  string  literal  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }	  sign    =   "+   "+   ";    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
37	[BUG]  [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(deFAULT_IMAGINARY_CHARACTER);	      pos.setIndex(Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	24	None	replace
38	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(Integer.MIN_VALUE);	      pos.setIndex(Integer.MAX_VALUE);    	compilable	  [FE]  StringIndexOutOfBoundsException  	24	14	replace
39	[BUG]  [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MIN_VALUE);	      pos.setIndex(Integer.MAX_VALUE);    	compilable	  [FE]  StringIndexOutOfBoundsException  	24	14	replace
40	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  sign  =  '+';  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    '+';    sign  =  '+';	  	compilable	  [FE]  StringIndexOutOfBoundsException  	4	2	add
41	[BUG]  [BUGGY]  sign  =  '+';  sign  =  '+';  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  sign  =  '+';  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    sign  =  '+';	  	compilable	  [FE]  StringIndexOutOfBoundsException  	4	2	add
42	[BUG]  [BUGGY]  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	4	None	add
43	[BUG]  [BUGGY]  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	4	None	add
44	[BUG]  [BUGGY]  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  return  null;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	4	None	add
45	[BUG]  [BUGGY]  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	4	None	add
46	[BUG]  [BUGGY]  int  initialIndex  =  source.initialIndex;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  int  initialIndex  =  source.initialIndex;  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  source.initialIndex;	      int    initialIndex    =    re.initialIndex;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	18	None	replace
47	[BUG]  [BUGGY]  int  initialIndex  =  re.initialIndex  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  int  initialIndex  =  re.initialIndex  +  1;  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  re.initialIndex  +  1;	      int    initialIndex    =    re.initialIndex;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	18	None	replace
48	[BUG]  [BUGGY]  int  initialIndex  =  im.initialIndex;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  int  initialIndex  =  im.initialIndex;  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  im.initialIndex;	      int    initialIndex    =    re.initialIndex;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	18	None	replace
49	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(n);  [CE]  cannot  find  symbol  n  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(n);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(n);	      pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  n	22	None	replace
50	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(startIndex);  pos.setErrorIndex(endIndex);	      pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	22	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(initialIndex);  pos.setErrorIndex(sign);	      pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	22	14	replace
52	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [FE]  AssertionFailedError  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(sign);	      pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	22	14	replace
53	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  sign  =  -1;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    -1;    sign  =  -1;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	6	2	add
54	[BUG]  [BUGGY]  sign  =  -1;  sign  =  -1;  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  sign  =  -1;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    sign  =  -1;	  	compilable	  [FE]  StringIndexOutOfBoundsException  	6	2	add
55	[BUG]  [BUGGY]  sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  DEFAULT_IMAGINARY_CHARACTER);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	6	None	add
56	[BUG]  [BUGGY]  sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	6	None	add
57	[BUG]  [BUGGY]  sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	6	None	add
58	[BUG]  [BUGGY]  sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  int  sign  =  -1;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	6	None	add
59	[BUG]  [BUGGY]  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    0.0;    	non-compiled	[CE]  incomparable  types:  char  and  String	3	None	replace
60	[BUG]  [BUGGY]  sign  =  0.0  ||  c!=  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0.0  ||  c!=  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  ||  c!=  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    0.0;    	non-compiled	[CE]  incomparable  types:  char  and  String	3	None	replace
61	[BUG]  [BUGGY]  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.charAt(0);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER.charAt(0);	  sign    =    0.0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	3	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	        pos.setIndex(startIndex);    pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	13	14	add
63	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(startIndex);    pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	13	14	add
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	        pos.setIndex(startIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	13	14	add
65	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(startIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	13	14	add
66	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(startIndex);    pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	13	None	add
67	[BUG]  [BUGGY]  sign  =   "+ "  +  re.getCharacter().doubleValue();  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =   "+ "  +  re.getCharacter().doubleValue();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  re.getCharacter().doubleValue();	  sign    =   "+   "    +    im.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
68	[BUG]  [BUGGY]  sign  =   "+ "  +  source.getCharacter().doubleValue();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =   "+ "  +  source.getCharacter().doubleValue();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  source.getCharacter().doubleValue();	  sign    =   "+   "    +    im.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
69	[BUG]  [BUGGY]  sign  =  re.getCharacter().doubleValue();  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  re.getCharacter().doubleValue();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  re.getCharacter().doubleValue();	  sign    =   "+   "    +    im.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
70	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }	  sign    =    '+';    	non-compiled	[CE]  incomparable  types:  char  and  String	5	None	replace
71	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sign    =    '+';    	non-compiled	[CE]  incomparable  types:  char  and  String	5	None	replace
72	[BUG]  [BUGGY]  sign  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    '+';    	non-compiled	[CE]  incomparable  types:  char  and  String	5	None	replace
73	[BUG]  [BUGGY]  sign  =   "+ "  +  source.getCharacter().toUpperCase();  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =   "+ "  +  source.getCharacter().toUpperCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  source.getCharacter().toUpperCase();	  sign    =   "+   "    +    im.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
74	[BUG]  [BUGGY]  sign  =   "+ "  +  re.getCharacter().toUpperCase();  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =   "+ "  +  re.getCharacter().toUpperCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  re.getCharacter().toUpperCase();	  sign    =   "+   "    +    im.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
75	[BUG]  [BUGGY]  sign  =  '+'  +  im.getCharacter().toUpperCase();  [CE]  cannot  find  symbol  im  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  im.getCharacter().toUpperCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  im.getCharacter().toUpperCase();	  sign    =   "+   "    +    im.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol  im	26	None	replace
76	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setErrorIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	        pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	8	2	add
77	[BUG]  [BUGGY]      pos.setErrorIndex(startIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setErrorIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	8	2	add
78	[BUG]  [BUGGY]  pos.setIndex(InitialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(InitialIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(InitialIndex);	      pos.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  InitialIndex	16	None	replace
79	[BUG]  [BUGGY]  pos.setIndex(n);  [CE]  cannot  find  symbol  n  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(n);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(n);	      pos.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  n	16	None	replace
80	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	        pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	23	14	add
81	[BUG]  [BUGGY]      pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MAX_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	23	14	add
82	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	        pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	23	14	add
83	[BUG]  [BUGGY]      pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(Integer.MAX_VALUE);  pos.setIndex(Integer.MIN_VALUE);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(Integer.MAX_VALUE);    pos.setIndex(Integer.MIN_VALUE);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	23	14	add
84	[BUG]  [BUGGY]      pos.setIndex(Integer.MAX_VALUE);  int  pos.setIndex(Integer.MAX_VALUE);  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(Integer.MAX_VALUE);  int  pos.setIndex(Integer.MAX_VALUE);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(Integer.MAX_VALUE);    int  pos.setIndex(Integer.MAX_VALUE);	  	non-compiled	[CE]  ';'  expected	23	None	add
85	[BUG]  [BUGGY]  n  =  0;  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  n  =  0;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n  =  0;	  sign    =    0;    	non-compiled	[CE]  cannot  find  symbol  n	2	None	replace
86	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	6	2	add
87	[BUG]  [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	6	2	add
88	[BUG]  [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  endIndex  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  endIndex	6	None	add
89	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	6	2	add
90	[BUG]  [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	6	2	add
91	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	6	2	add
92	[BUG]  [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(sign  ==  -1)  {  sign  =  -1;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	6	2	add
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  1;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign  =  '+'  +  1;	  sign    =    '+';    	compilable	  [FE]  AssertionFailedError  	5	10	replace
94	[BUG]  [BUGGY]  sign  =  '+'  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  1;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  1;	  sign    =    '+';    	compilable	  [FE]  AssertionFailedError  	5	10	replace
95	[BUG]  [BUGGY]  char  initialIndex  =  re.charAt(startIndex);  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  char  initialIndex  =  re.charAt(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	char  initialIndex  =  re.charAt(startIndex);	  sign    =    '+';    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	5	None	replace
96	[BUG]  [BUGGY]  '+'  :  '+';  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  '+'  :  '+';  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	'+'  :  '+';	  sign    =    '+';    	non-compiled	[CE]  not  a  statement	5	None	replace
97	[BUG]  [BUGGY]  sign  =  0.0  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0.0  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  0.0  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER;	  sign    =    0.0;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	3	None	replace
98	[BUG]  [BUGGY]      pos.setErrorIndex(n);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setErrorIndex(n);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setErrorIndex(n);	  	non-compiled	[CE]  cannot  find  symbol  n	8	None	add
99	[BUG]  [BUGGY]      pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source);  pos.setIndex(startIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source);  pos.setIndex(startIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source);  pos.setIndex(startIndex);	  	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	13	None	add
100	[BUG]  [BUGGY]      pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex);	  	non-compiled	[CE]  ')'  expected	13	None	add
101	[BUG]  [BUGGY]      pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex));  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex));  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos.setIndex(startIndex));	  	non-compiled	[CE]  'void'  type  not  allowed  here	13	None	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	        pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	13	14	add
103	[BUG]  [BUGGY]      pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(startIndex);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	13	14	add
104	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	4	2	add
105	[BUG]  [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	4	2	add
106	[BUG]  [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  endIndex  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  endIndex	4	None	add
107	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	4	2	add
108	[BUG]  [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	4	2	add
109	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	4	2	add
110	[BUG]  [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(sign  ==  '+')  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	4	2	add
111	[BUG]  [BUGGY]  sign  =   "+ "  +  source.toLowerCase();  [CE]  incompatible  types  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =   "+ "  +  source.toLowerCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  source.toLowerCase();	  sign    =   "+   "    +    im.getCharacter().toLowerCase();    	non-compiled	[CE]  incompatible  types	25	None	replace
112	[BUG]  [BUGGY]  pos.setIndex(definableIndex);  [CE]  cannot  find  symbol  definableIndex  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(definableIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(definableIndex);	      pos.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  definableIndex	16	None	replace
113	[BUG]  [BUGGY]  sign  =  '+'  +  source.getCharacter().toUpperCase();  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  source.getCharacter().toUpperCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  source.getCharacter().toUpperCase();	  sign    =   "+   "    +    im.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
114	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	pos.setIndex(Integer.MAX_VALUE  +  1);	      pos.setIndex(Integer.MAX_VALUE);    	compilable	  [FE]  StringIndexOutOfBoundsException  	24	14	replace
115	[BUG]  [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(Integer.MAX_VALUE  +  1);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(Integer.MAX_VALUE  +  1);	      pos.setIndex(Integer.MAX_VALUE);    	compilable	  [FE]  StringIndexOutOfBoundsException  	24	14	replace
116	[BUG]  [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.toCharArray();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.toCharArray();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.toCharArray();	  sign    =   "+   "+   ";    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	19	None	replace
117	[BUG]  [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);  [CE]  incompatible  types  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  DEFAULT_IMAGINARY_CHARACTER.substring(startIndex);	  sign    =   "+   "+   ";    	non-compiled	[CE]  incompatible  types	19	None	replace
118	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
119	[BUG]  [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
120	[BUG]  [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  endIndex  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  endIndex	1	None	add
121	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
122	[BUG]  [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
123	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
124	[BUG]  [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    if(sign  ==  0)  {  sign  =  0;  }  else  {  pos.setErrorIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
125	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	21	None	replace
126	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  return  null;  }  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  return  null;  }	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	21	None	replace
127	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	n.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	21	None	replace
128	[BUG]  [BUGGY]  int  initialIndex  =  DEFAULT_IMAGINARY_CHARACTER.length;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  int  initialIndex  =  DEFAULT_IMAGINARY_CHARACTER.length;  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	int  initialIndex  =  DEFAULT_IMAGINARY_CHARACTER.length;	      int    initialIndex    =    re.initialIndex;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	18	None	replace
129	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unclosed  string  literal  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  else  {  throw  new  IllegalArgumentException( " ");  }	  sign    =   "+   "+   ";    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
130	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  else  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  [CE]  unclosed  string  literal  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  else  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =   "+ "+ ";  }  else  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  -1;  }	  sign    =   "+   "+   ";    	non-compiled	[CE]  unclosed  string  literal	19	None	replace
131	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    '+';    	non-compiled	[CE]  incomparable  types:  char  and  String	5	None	replace
132	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  '+';  }	  sign    =    '+';    	non-compiled	[CE]  incomparable  types:  char  and  String	5	None	replace
133	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	21	None	replace
134	[BUG]  [BUGGY]  sign  = "+ ";  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  = "+ ";  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  = "+ ";	  sign    =    0;    	non-compiled	[CE]  incompatible  types	2	None	replace
135	[BUG]  [BUGGY]  pos.setIndex(defulT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  pos.setIndex(defulT_IMAGINARY_CHARACTER);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	pos.setIndex(defulT_IMAGINARY_CHARACTER);	      pos.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER	16	None	replace
136	[BUG]  [BUGGY]  sign  =(n  <  0)?  1  :  -1;  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =(n  <  0)?  1  :  -1;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =(n  <  0)?  1  :  -1;	  sign    =    -1;    	non-compiled	[CE]  cannot  find  symbol  n	7	None	replace
137	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex);	  	non-compiled	[CE]  ')'  expected	10	None	add
138	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));  [CE]  'void'  type  not  allowed  here  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos.setIndex(initialIndex));	  	non-compiled	[CE]  'void'  type  not  allowed  here	10	None	add
139	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);  [BUGGY]    sign  =  1;  break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos.getIndex(),  -initialIndex);	  	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	10	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	add	sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	4	14	add
141	[BUG]  [BUGGY]  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	compilable	  [FE]  AssertionFailedError  	4	14	add
142	[BUG]  [BUGGY]  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  endIndex  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  endIndex	4	None	add
143	[BUG]  [BUGGY]  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	non-compiled	[CE]  cannot  find  symbol  endIndex	4	None	add
144	[BUG]  [BUGGY]  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  endIndex  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+';  if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    '+';    if(  sign  <  '+')  {  sign  =  '+';  }  else  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  endIndex	4	None	add
145	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    0.0;    	non-compiled	[CE]  incomparable  types:  char  and  String	3	None	replace
146	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  }	  sign    =    0.0;    	non-compiled	[CE]  incomparable  types:  char  and  String	3	None	replace
147	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0.0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  sign    =    0.0;    	non-compiled	[CE]  incomparable  types:  char  and  String	3	None	replace
148	[BUG]  [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	1	None	add
149	[BUG]  [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  0;  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    0;    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  sign  =  0;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  incomparable  types:  char  and  String	1	None	add
150	[BUG]  [BUGGY]  sign  =  '+'  +  img.getCharacter().toLowerCase();  [CE]  cannot  find  symbol  img  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  img.getCharacter().toLowerCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  img.getCharacter().toLowerCase();	  sign    =   "+   "    +    im.getCharacter().toLowerCase();    	non-compiled	[CE]  cannot  find  symbol  img	25	None	replace
151	[BUG]  [BUGGY]  sign  =  -1;  if(  im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(  im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(  im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('/'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  orphaned  default	6	None	add
152	[BUG]  [BUGGY]  sign  =  -1;  if(  im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]      AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(  im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(  im.getCharacterIndex()  ==  '-')  {  if(!im.getCharacterIndex().equals('+'))  {  return  new  Complex(re.doubleValue(),  0.0);  }	  	non-compiled	[CE]  orphaned  default	6	None	add
153	[BUG]  [BUGGY]  sign  =  -1;  if(  im.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  im  [FE]        AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(  im.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(  im.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  im	6	None	add
154	[BUG]  [BUGGY]  sign  =  -1;  if(  im.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  cannot  find  symbol  im  [FE]          AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  -1;  if(  im.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign    =    -1;    if(  im.getCharacterIndex()  ==  '-')  {  sign  =  -1;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  return  null;  }	  	non-compiled	[CE]  cannot  find  symbol  im	6	None	add
155	[BUG]  [BUGGY]  sign  =   "+ "  +  img.getCharacter().toUpperCase();  [CE]  cannot  find  symbol  img  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =   "+ "  +  img.getCharacter().toUpperCase();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =   "+ "  +  img.getCharacter().toUpperCase();	  sign    =   "+   "    +    im.getCharacter().toUpperCase();    	non-compiled	[CE]  cannot  find  symbol  img	26	None	replace
156	[BUG]  [BUGGY]  sign  =  '+'  +  re.getCharacter().doubleValue();  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]  sign  =  '+'  +  re.getCharacter().doubleValue();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	sign  =  '+'  +  re.getCharacter().doubleValue();	  sign    =   "+   "    +    im.getCharacter().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
157	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    int  sign  =  0;  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :    [BUGGY]      pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	349	349	2	replace	        pos.setIndex(initialIndex);  return  new  Complex(re.doubleValue(),  0.0);	  	non-compiled	[CE]  unreachable  statement	8	None	add
