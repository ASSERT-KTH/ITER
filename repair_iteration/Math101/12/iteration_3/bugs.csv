bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.setErrorIndex(initialIndex);  n.setErrorIndex(endIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setErrorIndex(initialIndex);  n.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setErrorIndex(initialIndex);  n.setErrorIndex(endIndex);	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(nitialIndex);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
2	[BUG]  [BUGGY]  pos.setStartIndex(initialIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setStartIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setStartIndex(initialIndex);	  pos.setEndIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
3	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
4	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
5	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
6	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
7	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	33	None	add
8	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	26	2	add
9	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	26	2	add
10	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	26	2	add
11	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	26	2	add
12	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(initialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	26	None	add
13	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	26	2	add
14	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	26	2	add
15	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  return  null;  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(initialIndex);  return  null;  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(initialIndex);  return  null;	  pos.setErrorIndex(endIndex);    return    null;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
16	[BUG]  [BUGGY]  Number  im  =  source.parse(initialIndex,  endIndex);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(initialIndex,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(initialIndex,  endIndex);	  Number    im    =    source.parse(startIndex,    endIndex);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
17	[BUG]  [BUGGY]  Number  im  =  source.parse(startIndex,  endIndex  +  1);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(startIndex,  endIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(startIndex,  endIndex  +  1);	  Number    im    =    source.parse(startIndex,    endIndex);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
18	[BUG]  [BUGGY]  Number  im  =  re.parse(source,  endIndex);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  re.parse(source,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  re.parse(source,  endIndex);	  Number    im    =    source.parse(startIndex,    endIndex);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
19	[BUG]  [BUGGY]  Number  im  =  pos.parse(source,  endIndex);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  pos.parse(source,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  pos.parse(source,  endIndex);	  Number    im    =    source.parse(startIndex,    endIndex);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
20	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(startIndex);  pos.setIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
21	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
22	[BUG]  [BUGGY]  pos.setStartIndex(startIndex);  pos.setIndex(endIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setStartIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setStartIndex(startIndex);  pos.setIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
23	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	2	add
24	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	2	add
25	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	2	add
26	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	2	add
27	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	2	add
28	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	2	add
29	[BUG]  [BUGGY]  Number  im  =  nf.getImaginaryCharacter();  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  nf.getImaginaryCharacter();  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  nf.getImaginaryCharacter();	  Number    im    =    realFormat.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
30	[BUG]  [BUGGY]  pos.setInitialIndex(initialIndex  +  1);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setInitialIndex(initialIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setInitialIndex(initialIndex  +  1);	  pos.setInitialIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
31	[BUG]  [BUGGY]  Number  im  =  source.parse(pos,  endIndex);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(pos,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(pos,  endIndex);	  Number    im    =    pos.parse(source,    startIndex);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
32	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())    >=    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	8	2	replace
33	[BUG]  [BUGGY]  if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())    >=    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	8	2	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	8	24	replace
35	[BUG]  [BUGGY]  if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	8	24	replace
36	[BUG]  [BUGGY]  pos.setStartIndex(startIndex);  pos.setErrorIndex(endIndex);  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setStartIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setStartIndex(startIndex);  pos.setErrorIndex(endIndex);	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
37	[BUG]  [BUGGY]  pos.setStartIndex(endIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setStartIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setStartIndex(endIndex);	  pos.setIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
38	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setEndIndex(endIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(startIndex);  pos.setEndIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(startIndex);  pos.setEndIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setEndIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
39	[BUG]  [BUGGY]  pos.setIndex(n);  pos.setEndIndex(endIndex);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(n);  pos.setEndIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(n);  pos.setEndIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setEndIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
40	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setInitialIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
41	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setInitialIndex(endIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(startIndex);  pos.setInitialIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(startIndex);  pos.setInitialIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setInitialIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
42	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(InitialIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(InitialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(startIndex);  pos.setIndex(InitialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
43	[BUG]  [BUGGY]  Number  im  =  parse(source,  startIndex,  endIndex);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  startIndex,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  startIndex,  endIndex);	  Number    im    =    parse(source,    startIndex);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
44	[BUG]  [BUGGY]  Number  im  =  parse(source,  pos.getErrorIndex());  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  pos.getErrorIndex());  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  pos.getErrorIndex());	  Number    im    =    parse(source,    startIndex);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
45	[BUG]  [BUGGY]  if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  if(source.substring(0,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  if(source.substring(0,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  if(source.substring(0,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {	  if(source.substring(0,    n).compareTo(getImaginaryCharacter())!=    0)    {    if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
46	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setIndex(initialIndex);        pos.setIndex(endIndex);    pos.setIndex(initialIndex);  pos.setIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	47	2	add
47	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(endIndex);    pos.setIndex(initialIndex);  pos.setIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	47	2	add
48	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(initialIndex);  pos.setEndIndex(endIndex);  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(initialIndex);  pos.setEndIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(endIndex);    pos.setIndex(initialIndex);  pos.setEndIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
49	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setIndex(initialIndex);        pos.setIndex(endIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	47	2	add
50	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(endIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	47	2	add
51	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(InitialIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(InitialIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(endIndex);    pos.setIndex(InitialIndex);  pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	47	None	add
52	[BUG]  [BUGGY]  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setInitialIndex(initialIndex);  pos.setErrorIndex(endIndex);	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
53	[BUG]  [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
54	[BUG]  [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
55	[BUG]  [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
56	[BUG]  [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  If(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  If(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    If(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
57	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(endIndex);  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(startIndex);  pos.setErrorIndex(endIndex);	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  n).compareTo(getImaginaryCharacter())  ==  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	if(source.substring(0,  n).compareTo(getImaginaryCharacter())  ==  0)  {	  if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	17	2	replace
59	[BUG]  [BUGGY]  if(source.substring(0,  n).compareTo(getImaginaryCharacter())  ==  0)  {  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  n).compareTo(getImaginaryCharacter())  ==  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,  n).compareTo(getImaginaryCharacter())  ==  0)  {	  if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())    ==    0)    {    	compilable	  [FE]  AssertionFailedError  	17	2	replace
60	[BUG]  [BUGGY]  if(source.substring(0,  n),  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {  [CE]  ')'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  n),  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,  n),  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {	  if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())    ==    0)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
61	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
62	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          pos.setIndex(initialIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
63	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
64	[BUG]  [BUGGY]  Number  im  =  source.parse(re);  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(re);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(re);	  Number    im    =    re.parse(source);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
65	[BUG]  [BUGGY]  if(source.substring(startIndex,  endIndex)&&  source.compareTo(getImaginaryCharacter())!=  0)  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(startIndex,  endIndex)&&  source.compareTo(getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(startIndex,  endIndex)&&  source.compareTo(getImaginaryCharacter())!=  0)  {	  if(source.substring(startIndex,    endIndex),    source.compareTo(getImaginaryCharacter())!=    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	1	None	replace
66	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	45	2	add
67	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	45	2	add
68	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setEndIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setEndIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setEndIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
69	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setStartIndex(initialIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setStartIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setStartIndex(initialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
70	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	45	2	add
71	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	45	2	add
72	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	45	2	add
73	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]            StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	45	2	add
74	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	2	add
75	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	2	add
76	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(n);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	2	add
77	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(n);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(n);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	2	add
78	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  pos.setWarningIndex(startIndex);  pos.setWarningIndex(n);  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  pos.setWarningIndex(startIndex);  pos.setWarningIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(n);    pos.setWarningIndex(startIndex);  pos.setWarningIndex(n);	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
79	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setStartIndex(endIndex);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(startIndex);  pos.setStartIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(startIndex);  pos.setStartIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setStartIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
80	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setStartIndex(endIndex);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(initialIndex);  pos.setStartIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(initialIndex);  pos.setStartIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setStartIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
81	[BUG]  [BUGGY]  pos.setIndex(n);  pos.setStartIndex(initialIndex);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(n);  pos.setStartIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(n);  pos.setStartIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setStartIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
82	[BUG]  [BUGGY]  Number  im  =  source.getRealFormat();  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.getRealFormat();  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.getRealFormat();	  Number    im    =    source.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
83	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setWarningIndex(endIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setWarningIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(initialIndex);  pos.setWarningIndex(endIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
84	[BUG]  [BUGGY]  pos.setErrorIndex(n);  pos.setWarningIndex(endIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(n);  pos.setWarningIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(n);  pos.setWarningIndex(endIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
85	[BUG]  [BUGGY]  pos.setErrorIndex(startIndex);  pos.setWarningIndex(endIndex);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(startIndex);  pos.setWarningIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(startIndex);  pos.setWarningIndex(endIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
86	[BUG]  [BUGGY]  pos.setErrorIndex(endIndex);  pos.setWarningIndex(startIndex);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(endIndex);  pos.setWarningIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(endIndex);  pos.setWarningIndex(startIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
87	[BUG]  [BUGGY]  Number  im  =  re.parse(pos,  endIndex);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  re.parse(pos,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  re.parse(pos,  endIndex);	  Number    im    =    source.parse(pos,    startIndex);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
88	[BUG]  [BUGGY]  Number  im  =  source.parse(pos);  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(pos);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(pos);	  Number    im    =    pos.parse(source);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
89	[BUG]  [BUGGY]  Number  im  =  pos.parse(source,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  pos.parse(source,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  pos.parse(source,  DEFAULT_IMAGINARY_CHARACTER);	  Number    im    =    pos.parse(source);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
90	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	37	2	add
91	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	37	2	add
92	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	37	2	add
93	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	37	2	add
94	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	37	2	add
95	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	37	2	add
96	[BUG]  [BUGGY]  Number  im  =  source.parse(n);  [CE]  <identifier>  expected  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(n);	  Number    im    =    source.parse(source);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
97	[BUG]  [BUGGY]  pos.setErrorIndex(endIndex  +  1);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(endIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(endIndex  +  1);	  pos.setErrorIndex(initialIndex    +    1);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
98	[BUG]  [BUGGY]  pos.setErrorIndex(startIndex  +  1);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(startIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(startIndex  +  1);	  pos.setErrorIndex(initialIndex    +    1);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
99	[BUG]  [BUGGY]  pos.setErrorIndex(n  +  1);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(n  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(n  +  1);	  pos.setErrorIndex(initialIndex    +    1);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
100	[BUG]  [BUGGY]  Number  im  =  parse(source,  pos,  endIndex);  [CE]  <identifier>  expected  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  pos,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  pos,  endIndex);	  Number    im    =    parse(source,    pos);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
101	[BUG]  [BUGGY]  Number  im  =  parse(source,  pos,  startIndex);  [CE]  <identifier>  expected  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  pos,  startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  pos,  startIndex);	  Number    im    =    parse(source,    pos);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
102	[BUG]  [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())    ==    0)    {    if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
103	[BUG]  [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())    ==    0)    {    if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
104	[BUG]  [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())    ==    0)    {    if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
105	[BUG]  [BUGGY]  if(n  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  ==  0)  {  pos.setIndex(initialIndex);  return  null;  }	  if(n    ==    0)    {    pos.setErrorIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
106	[BUG]  [BUGGY]  if(n  ==  0)  {  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  ==  0)  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  ==  0)  {  pos.setErrorIndex(startIndex);  return  null;  }	  if(n    ==    0)    {    pos.setErrorIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
107	[BUG]  [BUGGY]  if(source.substring(0,  n),  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  n),  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,  n),  endIndex).compareTo(getImaginaryCharacter())!=  0)  {	  if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
108	[BUG]  [BUGGY]  Number  im  =  re.parse(source,  startIndex,  endIndex);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  re.parse(source,  startIndex,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  re.parse(source,  startIndex,  endIndex);	  Number    im    =    re.parse(source,    startIndex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
109	[BUG]  [BUGGY]  Number  im  =  source.parse(re,  endIndex);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(re,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(re,  endIndex);	  Number    im    =    re.parse(source,    startIndex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
110	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex    +    1);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	52	2	add
111	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex    +    1);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	52	2	add
112	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex  +  1);  [CE]  cannot  find  symbol  InitialIndex  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex    +    1);    pos.setIndex(InitialIndex);  pos.setIndex(initialIndex  +  1);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	52	None	add
113	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setIndex(startIndex);  pos.setIndex(initialIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex    +    1);    pos.setIndex(startIndex);  pos.setIndex(initialIndex  +  1);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	52	2	add
114	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setIndex(startIndex);  pos.setIndex(initialIndex  +  1);  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setIndex(startIndex);  pos.setIndex(initialIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex    +    1);    pos.setIndex(startIndex);  pos.setIndex(initialIndex  +  1);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	52	2	add
115	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex);  pos.setEndIndex(initialIndex  +  1);  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex);  pos.setEndIndex(initialIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex    +    1);    pos.setIndex(initialIndex);  pos.setEndIndex(initialIndex  +  1);	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
116	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	10	2	add
117	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	10	2	add
118	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	10	2	add
119	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	10	2	add
120	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	10	2	add
121	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	10	2	add
122	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
123	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
124	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
125	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
126	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
127	[BUG]  [BUGGY]  pos.setErrorIndex(startIndex);  pos.setErrorIndex(InitialIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(startIndex);  pos.setErrorIndex(InitialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(startIndex);  pos.setErrorIndex(InitialIndex);	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(InitialIndex);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
128	[BUG]  [BUGGY]  pos.setErrorIndex(n);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(n);	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(InitialIndex);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
129	[BUG]  [BUGGY]  n.setErrorIndex(initialIndex);  n.setErrorIndex(InitialIndex);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setErrorIndex(initialIndex);  n.setErrorIndex(InitialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setErrorIndex(initialIndex);  n.setErrorIndex(InitialIndex);	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(InitialIndex);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
130	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(endIndex  +  1);  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(endIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(startIndex);  pos.setIndex(endIndex  +  1);	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
131	[BUG]  [BUGGY]  pos.setIndex(endIndex  +  1);  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(endIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(endIndex  +  1);	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
132	[BUG]  [BUGGY]  pos.setStartIndex(startIndex);  pos.setIndex(endIndex  +  1);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setStartIndex(startIndex);  pos.setIndex(endIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setStartIndex(startIndex);  pos.setIndex(endIndex  +  1);	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
133	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setIndex(initialIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	49	2	add
134	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	49	2	add
135	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setIndex(initialIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	49	2	add
136	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	49	2	add
137	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setEndIndex(endIndex);  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setEndIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setEndIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
138	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setIndex(initialIndex);        pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	49	2	add
139	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	49	2	add
140	[BUG]  [BUGGY]  pos.setErrorIndex(startIndex);  pos.setWarningIndex(initialIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(startIndex);  pos.setWarningIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(startIndex);  pos.setWarningIndex(initialIndex);	          pos.setErrorIndex(initialIndex);    pos.setWarningIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
141	[BUG]  [BUGGY]  pos.setErrorIndex(n);  pos.setWarningIndex(initialIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(n);  pos.setWarningIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(n);  pos.setWarningIndex(initialIndex);	          pos.setErrorIndex(initialIndex);    pos.setWarningIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
142	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
143	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
144	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(n);  [CE]  cannot  find  symbol  InitialIndex  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(InitialIndex);  pos.setErrorIndex(n);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	31	None	add
145	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
146	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
147	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n;  [CE]  ')'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n;  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n;	  	non-compiled	[CE]  ')'  expected	31	None	add
148	[BUG]  [BUGGY]  Number  im  =  parse(source,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  DEFAULT_IMAGINARY_CHARACTER);	  Number    im    =    parse(source,    endIndex);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
149	[BUG]  [BUGGY]  Number  im  =  parse(source,  endIndex,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  endIndex,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  endIndex,  DEFAULT_IMAGINARY_CHARACTER);	  Number    im    =    parse(source,    endIndex);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
150	[BUG]  [BUGGY]  if(startIndex  >=  endIndex)  {  pos.setErrorIndex(initialIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  endIndex)  {  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  endIndex)  {  pos.setErrorIndex(initialIndex);  return  null;  }	  if(startIndex!=    endIndex)    {    pos.setErrorIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
151	[BUG]  [BUGGY]  if(n!=  startIndex)  {  pos.setErrorIndex(initialIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n!=  startIndex)  {  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n!=  startIndex)  {  pos.setErrorIndex(initialIndex);  return  null;  }	  if(startIndex!=    endIndex)    {    pos.setErrorIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
152	[BUG]  [BUGGY]  Number  im  =  pos.getRealFormat();  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  pos.getRealFormat();  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  pos.getRealFormat();	  Number    im    =    pos.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
153	[BUG]  [BUGGY]  Number  im  =  pos.getImmediateParent();  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  pos.getImmediateParent();  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  pos.getImmediateParent();	  Number    im    =    pos.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
154	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	12	2	add
155	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	12	2	add
156	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setWarningIndex(startIndex);  pos.setWarningIndex(endIndex);  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setWarningIndex(startIndex);  pos.setWarningIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(endIndex);    pos.setWarningIndex(startIndex);  pos.setWarningIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
157	[BUG]  [BUGGY]  Number  im  =  source.parse(n,  endIndex);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(n,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(n,  endIndex);	  Number    im    =    source.parse(startIndex,    endIndex);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
158	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setIndex(initialIndex);  pos.setIndex(InitialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
159	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(initialIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setIndex(initialIndex);  pos.setIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
160	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setWarningIndex(initialIndex);  pos.setWarningIndex(n);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setWarningIndex(initialIndex);  pos.setWarningIndex(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    pos.setWarningIndex(initialIndex);  pos.setWarningIndex(n);	  	non-compiled	[CE]  cannot  find  symbol	31	None	add
161	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
162	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
163	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
164	[BUG]  [BUGGY]  if(startIndex!=  endIndex)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex!=  endIndex)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex!=  endIndex)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
165	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
166	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
167	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
168	[BUG]  [BUGGY]  if(endIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
169	[BUG]  [BUGGY]  if(endIndex  >=  0)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  >=  0)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  >=  0)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
170	[BUG]  [BUGGY]  if(endIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
171	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
172	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
173	[BUG]  [BUGGY]  pos.setDelimiterIndex(deFAULT_IMAGINARY_CHARACTER);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setDelimiterIndex(deFAULT_IMAGINARY_CHARACTER);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setDelimiterIndex(deFAULT_IMAGINARY_CHARACTER);	  pos.setEndIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
174	[BUG]  [BUGGY]  pos.setEndIndex(startIndex);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setEndIndex(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setEndIndex(startIndex);	  pos.setEndIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
175	[BUG]  [BUGGY]  if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())!=  0)  {	  if(source.substring(0,    n).compareTo(getImaginaryCharacter())!=    0)    {    if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
176	[BUG]  [BUGGY]  if(source.substring(startIndex),  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(startIndex),  endIndex).compareTo(getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(startIndex),  endIndex).compareTo(getImaginaryCharacter())!=  0)  {	  if(source.substring(0,    n).compareTo(getImaginaryCharacter())!=    0)    {    if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    	non-compiled	[CE]  ')'  expected	58	None	replace
177	[BUG]  [BUGGY]  n.setErrorIndex(initialIndex);  pos.setWarningIndex(initialIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setErrorIndex(initialIndex);  pos.setWarningIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setErrorIndex(initialIndex);  pos.setWarningIndex(initialIndex);	          pos.setErrorIndex(initialIndex);    pos.setWarningIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
178	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setStartIndex(initialIndex);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(startIndex);  pos.setStartIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(startIndex);  pos.setStartIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setStartIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
179	[BUG]  [BUGGY]  Number  im  =  parse(source,  endIndex  +  1);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  endIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  endIndex  +  1);	  Number    im    =    parse(source,    endIndex);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
180	[BUG]  [BUGGY]  Number  im  =  parse(source,  endIndex  -  1);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  endIndex  -  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  endIndex  -  1);	  Number    im    =    parse(source,    endIndex);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
181	[BUG]  [BUGGY]  n  =  source.substring(startIndex,  endIndex);  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n  =  source.substring(startIndex,  endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n  =  source.substring(startIndex,  endIndex);	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
182	[BUG]  [BUGGY]  if(source.substring(0,  n)).compareTo(getImaginaryCharacter())!=  0)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  n)).compareTo(getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,  n)).compareTo(getImaginaryCharacter())!=  0)  {	  if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
183	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n;  [CE]  ')'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n;  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(n);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(n;	  	non-compiled	[CE]  ')'  expected	14	None	add
184	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
185	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  else  {  System.arraycopy(source,  startIndex,  pos.getIndex(),  startIndex,  endIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  else  {  System.arraycopy(source,  startIndex,  pos.getIndex(),  startIndex,  endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  else  {  System.arraycopy(source,  startIndex,  pos.getIndex(),  startIndex,  endIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
186	[BUG]  [BUGGY]  n.setErrorIndex(initialIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setErrorIndex(initialIndex);	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(InitialIndex);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
187	[BUG]  [BUGGY]  n.setErrorIndex(InitialIndex);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setErrorIndex(InitialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setErrorIndex(InitialIndex);	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(InitialIndex);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
188	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setWarningIndex(initialIndex);  pos.setWarningIndex(endIndex);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setWarningIndex(initialIndex);  pos.setWarningIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(startIndex);    pos.setWarningIndex(initialIndex);  pos.setWarningIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	29	None	add
189	[BUG]  [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  If(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  If(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(0,    endIndex).compareTo(    getImaginaryCharacter())    ==    0)    {    If(source.substring(0,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
190	[BUG]  [BUGGY]  Number  im  =  n.getRealFormat();  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  n.getRealFormat();  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  n.getRealFormat();	  Number    im    =    n.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
191	[BUG]  [BUGGY]  if(source.substring(startIndex,  endIndex)).compareTo(  getImaginaryCharacter())!=  0)  {  [CE]  illegal  start  of  expression  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(startIndex,  endIndex)).compareTo(  getImaginaryCharacter())!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(startIndex,  endIndex)).compareTo(  getImaginaryCharacter())!=  0)  {	  if(source.substring(startIndex,    endIndex),    source.compareTo(getRealFormat())!=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
192	[BUG]  [BUGGY]  Number  im  =  parse(source,  startIndex  +  1);  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  startIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  startIndex  +  1);	  Number    im    =    parse(source,    startIndex);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
193	[BUG]  [BUGGY]  if(endIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
194	[BUG]  [BUGGY]  if(endIndex  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
195	[BUG]  [BUGGY]  if(startIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
196	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setEndIndex(endIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setIndex(initialIndex);  pos.setEndIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setIndex(initialIndex);  pos.setEndIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setEndIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
197	[BUG]  [BUGGY]  Number  im  =  re.getRealFormat();  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  re.getRealFormat();  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  re.getRealFormat();	  Number    im    =    re.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
198	[BUG]  [BUGGY]  Number  im  =  re.getImmediateParentPosition();  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  re.getImmediateParentPosition();  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  re.getImmediateParentPosition();	  Number    im    =    re.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
199	[BUG]  [BUGGY]  if(source.substring(startIndex,  endIndex)!=  0)  {  [CE]  incomparable  types:  String  and  int  [FE]        AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(startIndex,  endIndex)!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(startIndex,  endIndex)!=  0)  {	  if(source.substring(0,    n).compareTo(getImaginaryCharacter())!=    0)    {    if(source.substring(0,    n).compareTo(    getImaginaryCharacter())!=    0)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	57	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {	  if(source.substring(0,    n).compareTo(getImaginaryCharacter())!=    0)    {    if(source.substring(0,    n).compareTo(    getImaginaryCharacter())!=    0)    {    	compilable	  [FE]  AssertionFailedError  	57	2	replace
201	[BUG]  [BUGGY]  if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {	  if(source.substring(0,    n).compareTo(getImaginaryCharacter())!=    0)    {    if(source.substring(0,    n).compareTo(    getImaginaryCharacter())!=    0)    {    	compilable	  [FE]  AssertionFailedError  	57	2	replace
202	[BUG]  [BUGGY]  Number  im  =  realFormat.getRealFormat();  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  realFormat.getRealFormat();  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  realFormat.getRealFormat();	  Number    im    =    realFormat.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
203	[BUG]  [BUGGY]  pos.setDelimiterIndex(endIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setDelimiterIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setDelimiterIndex(endIndex);	  pos.setInitialIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
204	[BUG]  [BUGGY]  if(source!=  null)  {  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source!=  null)  {  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source!=  null)  {  pos.setErrorIndex(endIndex);  return  null;  }	  pos.setErrorIndex(endIndex);    return    null;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
205	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setWarningIndex(initialIndex);  pos.setWarningIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setWarningIndex(initialIndex);  pos.setWarningIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(initialIndex);    pos.setWarningIndex(initialIndex);  pos.setWarningIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	26	None	add
206	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(InitialIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(InitialIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(startIndex);    pos.setIndex(InitialIndex);  pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	49	None	add
207	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
208	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  else  {  return  null;  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  else  {  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  else  {  return  null;  }	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
209	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
210	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  return  null;  }	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
211	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())  >=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())  >=  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	8	24	replace
212	[BUG]  [BUGGY]  if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())  >=  0)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())  >=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())  >=  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())    >=    0)    {    	compilable	  [FE]  AssertionFailedError  	8	24	replace
213	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
214	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
215	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
216	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
217	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
218	[BUG]  [BUGGY]  Number  im  =  source.parse(endIndex);  [CE]  <identifier>  expected  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(endIndex);	  Number    im    =    source.parse(source);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
219	[BUG]  [BUGGY]  Number  im  =  source.parse(startIndex);  [CE]  <identifier>  expected  [FE]                            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(startIndex);	  Number    im    =    source.parse(source);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
220	[BUG]  [BUGGY]  Number  im  =  source.parse(n,  startIndex);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(n,  startIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(n,  startIndex);	  Number    im    =    source.parse(pos,    startIndex);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
221	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
222	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
223	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setInitialIndex(initialIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setInitialIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(endIndex);    pos.setInitialIndex(initialIndex);  pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
224	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  else  {  return  null;  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  else  {  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  else  {  return  null;  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
225	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
226	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setWarningIndex(initialIndex);  pos.setWarningIndex(endIndex);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setWarningIndex(initialIndex);  pos.setWarningIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(endIndex);    pos.setWarningIndex(initialIndex);  pos.setWarningIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
227	[BUG]  [BUGGY]  if(n  >=  0)  {  pos.setErrorIndex(initialIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >=  0)  {  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >=  0)  {  pos.setErrorIndex(initialIndex);  return  null;  }	  if(n    ==    0)    {    pos.setErrorIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
228	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	45	None	add
229	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setEndIndex(endIndex);  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setEndIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setEndIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
230	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
231	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
232	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  else  {  pos.setEndIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  else  {  pos.setEndIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex  >=  -1)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  else  {  pos.setEndIndex(endIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
233	[BUG]  [BUGGY]  if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.startsWith(DEFAULT_IMAGINARY_CHARACTER))  {  if(source.substring(startIndex,  endIndex).compareTo(getImaginaryCharacter())  ==  0)  {	  if(source.substring(0,    n).compareTo(getImaginaryCharacter())!=    0)    {    if(source.substring(0,    n).compareTo(    getImaginaryCharacter())    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
234	[BUG]  [BUGGY]  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  return  null;  }	  pos.setErrorIndex(startIndex);    return    null;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
235	[BUG]  [BUGGY]  if(endIndex  >=  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  >=  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  >=  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
236	[BUG]  [BUGGY]  if(endIndex  >=  -1)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  >=  -1)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  >=  -1)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
237	[BUG]  [BUGGY]  if(endIndex  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
238	[BUG]  [BUGGY]  Number  im  =  parse(source,  n);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  n);	  Number    im    =    parse(source,    endIndex);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
239	[BUG]  [BUGGY]  Number  im  =  this.source.getImaginaryCharacter();  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  this.source.getImaginaryCharacter();  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  this.source.getImaginaryCharacter();	  Number    im    =    source.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
240	[BUG]  [BUGGY]  Number  im  =  realFormat.getImaginaryCharacter(n);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  realFormat.getImaginaryCharacter(n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  realFormat.getImaginaryCharacter(n);	  Number    im    =    realFormat.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
241	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setStartIndex(initialIndex);  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setIndex(initialIndex);  pos.setStartIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setIndex(initialIndex);  pos.setStartIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setStartIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
242	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
243	[BUG]  [BUGGY]  if(n  <  =  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  <  =  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  <  =  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
244	[BUG]  [BUGGY]  if(startIndex!=  endIndex)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex!=  endIndex)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex!=  endIndex)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
245	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(n);    if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	2	add
246	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(n);    if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	2	add
247	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(n);    if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	2	add
248	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(n);    if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  else  {  return  null;  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	14	2	add
249	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(startIndex);    pos.setInitialIndex(initialIndex);  pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
250	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setStartIndex(initialIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setStartIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(startIndex);    pos.setStartIndex(initialIndex);  pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
251	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
252	[BUG]  [BUGGY]  if(n  >=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
253	[BUG]  [BUGGY]  if(n  <  =  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  <  =  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  <  =  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
254	[BUG]  [BUGGY]  if(n!=  0)  {  pos.setErrorIndex(initialIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n!=  0)  {  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n!=  0)  {  pos.setErrorIndex(initialIndex);  return  null;  }	  if(n    ==    0)    {    pos.setErrorIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
255	[BUG]  [BUGGY]  if(n  ==  0)  {  pos.setErrorIndex(n);  return  null;  }  [CE]  <identifier>  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  ==  0)  {  pos.setErrorIndex(n);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  ==  0)  {  pos.setErrorIndex(n);  return  null;  }	  pos.setErrorIndex(n);    return    null;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
256	[BUG]  [BUGGY]  if(n!=  0)  {  pos.setErrorIndex(n);  return  null;  }  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n!=  0)  {  pos.setErrorIndex(n);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n!=  0)  {  pos.setErrorIndex(n);  return  null;  }	  pos.setErrorIndex(n);    return    null;    	non-compiled	[CE]  <identifier>  expected	56	None	replace
257	[BUG]  [BUGGY]  pos.setErrorIndex(InitialIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setErrorIndex(InitialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setErrorIndex(InitialIndex);	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(InitialIndex);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
258	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(endIndex);    if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
259	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(endIndex);    if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
260	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setInitialIndex(initialIndex);  pos.setInitialIndex(endIndex);  }  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setInitialIndex(initialIndex);  pos.setInitialIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(endIndex);    if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setInitialIndex(initialIndex);  pos.setInitialIndex(endIndex);  }	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
261	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(endIndex);    if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	non-compiled	[CE]  cannot  find  symbol	33	None	add
262	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
263	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
264	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
265	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
266	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
267	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(endIndex);  if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(endIndex);    if(source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  >=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	if(endIndex  >=  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    	compilable	  [FE]  AssertionFailedError  	7	22	replace
269	[BUG]  [BUGGY]  if(endIndex  >=  0)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  >=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  >=  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    	compilable	  [FE]  AssertionFailedError  	7	22	replace
270	[BUG]  [BUGGY]  if(source.substring(initialIndex,  endIndex)!=  0)  {  [CE]  incomparable  types:  String  and  int  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(initialIndex,  endIndex)!=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(initialIndex,  endIndex)!=  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())!=    0)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	7	None	replace
271	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
272	[BUG]  [BUGGY]  if(n  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
273	[BUG]  [BUGGY]  if(n  <  =  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  <  =  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  <  =  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
274	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(endIndex);    if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	12	2	add
275	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(endIndex);    if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	12	2	add
276	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  if(startIndex  >=  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(endIndex);    if(startIndex  >=  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	12	2	add
277	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  if(startIndex  >=  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  if(startIndex  >=  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(endIndex);    if(startIndex  >=  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	12	2	add
278	[BUG]  [BUGGY]  Number  im  =  re.parse(source,  pos);  [CE]  <identifier>  expected  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  re.parse(source,  pos);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  re.parse(source,  pos);	  Number    im    =    re.parse(source);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
279	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
280	[BUG]  [BUGGY]  if(n  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
281	[BUG]  [BUGGY]  if(n  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
282	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
283	[BUG]  [BUGGY]  if(n  >=  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >=  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >=  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
284	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
285	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  if(source!=  null)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(initialIndex);    if(source!=  null)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	26	2	add
286	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  if(source!=  null)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  if(source!=  null)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(initialIndex);    if(source!=  null)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	26	2	add
287	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
288	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(initialIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(initialIndex  +  1);	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
289	[BUG]  [BUGGY]  Number  im  =  parse(source,  sign);  [CE]  <identifier>  expected  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  parse(source,  sign);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  parse(source,  sign);	  Number    im    =    parse(source,    pos);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
290	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
291	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())!=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
292	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(initialIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    if(initialIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
293	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(initialIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(initialIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    if(initialIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
294	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
295	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
296	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
297	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [FE]  StringIndexOutOfBoundsException  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(n);    if(  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	31	2	add
298	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
299	[BUG]  [BUGGY]  if(n  <  =  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  <  =  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  <  =  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
300	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  if(endIndex  >=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(startIndex);    if(endIndex  >=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	37	2	add
301	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  if(endIndex  >=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  if(endIndex  >=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(startIndex);    if(endIndex  >=  0)  {  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	37	2	add
302	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	37	2	add
303	[BUG]  [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(endIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(endIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	37	2	add
304	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
305	[BUG]  [BUGGY]  if(n  ==  0)  {  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  ==  0)  {  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  ==  0)  {  pos.setErrorIndex(endIndex);  return  null;  }	  pos.setErrorIndex(endIndex);    return    null;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
306	[BUG]  [BUGGY]  if(startIndex!=  endIndex)  {  pos.setErrorIndex(endIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(startIndex!=  endIndex)  {  pos.setErrorIndex(endIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(startIndex!=  endIndex)  {  pos.setErrorIndex(endIndex);  return  null;  }	  pos.setErrorIndex(endIndex);    return    null;    	non-compiled	[CE]  <identifier>  expected	54	None	replace
307	[BUG]  [BUGGY]  if(endIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  <  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
308	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
309	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
310	[BUG]  [BUGGY]  if(endIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex  <  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
311	[BUG]  [BUGGY]  if(n  <  =  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  illegal  start  of  expression  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  <  =  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  <  =  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
312	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())  >=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())  >=  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())    >=    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	8	2	replace
313	[BUG]  [BUGGY]  if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())  >=  0)  {  [FE]  StringIndexOutOfBoundsException  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())  >=  0)  {  [BUGGY]      source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(source.substring(initialIndex,  endIndex).compareTo(getImaginaryCharacter())  >=  0)  {	  if(source.substring(startIndex,    endIndex).compareTo(getImaginaryCharacter())    ==    0)    {    if(source.substring(startIndex,    endIndex).compareTo(    getImaginaryCharacter())    >=    0)    {    	compilable	  [FE]  StringIndexOutOfBoundsException  	8	2	replace
314	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
315	[BUG]  [BUGGY]  if(n  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  ==  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
316	[BUG]  [BUGGY]  if(n  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
317	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  if(initialIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(startIndex);    if(initialIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	2	add
318	[BUG]  [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  if(initialIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  if(initialIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(initialIndex);        pos.setErrorIndex(startIndex);    if(initialIndex!=  endIndex)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	2	add
319	[BUG]  [BUGGY]  Number  im  =  source.parse(pos,  n);  [CE]  <identifier>  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  source.parse(pos,  n);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  source.parse(pos,  n);	  Number    im    =    source.parse(pos,    startIndex);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
320	[BUG]  [BUGGY]  n.setErrorIndex(startIndex);  n.setWarningIndex(endIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setErrorIndex(startIndex);  n.setWarningIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setErrorIndex(startIndex);  n.setWarningIndex(endIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
321	[BUG]  [BUGGY]  n.setErrorIndex(startIndex);  pos.setWarningIndex(endIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setErrorIndex(startIndex);  pos.setWarningIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setErrorIndex(startIndex);  pos.setWarningIndex(endIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
322	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	10	2	add
323	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    if(startIndex!=  endIndex)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	10	2	add
324	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setWarningIndex(startIndex);  pos.setWarningIndex(endIndex);  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setWarningIndex(startIndex);  pos.setWarningIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);  pos.setWarningIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
325	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setInitialIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
326	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setInitialIndex(endIndex);  [CE]  <identifier>  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setIndex(initialIndex);  pos.setInitialIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setIndex(initialIndex);  pos.setInitialIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setInitialIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
327	[BUG]  [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
328	[BUG]  [BUGGY]  if(n  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [CE]  <identifier>  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  >=  0)  {  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  }	          pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
329	[BUG]  [BUGGY]  if(n  ==  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  [CE]  <identifier>  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  ==  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  ==  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
330	[BUG]  [BUGGY]  if(n  <  =  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(n  <  =  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(n  <  =  0)  {  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
331	[BUG]  [BUGGY]  Number  im  =  re.getImmediateParentPointer();  [CE]  <identifier>  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  re.getImmediateParentPointer();  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  re.getImmediateParentPointer();	  Number    im    =    re.getImaginaryCharacter();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
332	[BUG]  [BUGGY]  if(endIndex!=  0)  {  pos.setErrorIndex(initialIndex);  return  null;  }  [CE]  <identifier>  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  if(endIndex!=  0)  {  pos.setErrorIndex(initialIndex);  return  null;  }  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	if(endIndex!=  0)  {  pos.setErrorIndex(initialIndex);  return  null;  }	  if(startIndex!=    endIndex)    {    pos.setErrorIndex(initialIndex);    return    null;    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
333	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setInitialIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setInitialIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex    +    1);    pos.setInitialIndex(initialIndex);  pos.setIndex(initialIndex  +  1);	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
334	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setStartIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex  +  1);  pos.setStartIndex(initialIndex);  pos.setIndex(initialIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex    +    1);    pos.setStartIndex(initialIndex);  pos.setIndex(initialIndex  +  1);	  	non-compiled	[CE]  cannot  find  symbol	52	None	add
335	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setIndex(InitialIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  n.setIndex(initialIndex);  n.setIndex(InitialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	n.setIndex(initialIndex);  n.setIndex(InitialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
336	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setInitialIndex(initialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
337	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setStartIndex(initialIndex);  pos.setEndIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setStartIndex(initialIndex);  pos.setEndIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setStartIndex(initialIndex);  pos.setEndIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	45	None	add
338	[BUG]  [BUGGY]  pos.setWarningIndex(initialIndex);  [CE]  <identifier>  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  pos.setWarningIndex(initialIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	pos.setWarningIndex(initialIndex);	          pos.setErrorIndex(initialIndex);    pos.setWarningIndex(initialIndex);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
339	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setStartIndex(initialIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setStartIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(endIndex);    pos.setStartIndex(initialIndex);  pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol	47	None	add
340	[BUG]  [BUGGY]  Number  im  =  re.parse(source,  startIndex  +  1);  [CE]  <identifier>  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  n  =  getImaginaryCharacter().length();  startIndex  =  pos.getIndex();  int  endIndex  =  startIndex  +  n;      [BUGGY]  Number  im  =  re.parse(source,  startIndex  +  1);  [BUGGY]      if  (    source.substring(startIndex,  endIndex).compareTo(      getImaginaryCharacter())  !=  0)  {  source.substring(startIndex,  endIndex).compareTo(  getImaginaryCharacter())  !=  0)  {    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  pos.setIndex(endIndex);  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2886751345948129	377	379	2	replace	Number  im  =  re.parse(source,  startIndex  +  1);	  Number    im    =    re.parse(source,    startIndex);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
