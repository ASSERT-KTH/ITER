bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setErrorIndex(initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setErrorIndex(initialIndex);	      pos.setErrorIndex(startIndex);    	compilable	  [FE]  AssertionFailedError  	16	14	replace
2	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setErrorIndex(initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(initialIndex);	      pos.setErrorIndex(startIndex);    	compilable	  [FE]  AssertionFailedError  	16	14	replace
3	[BUG]  [BUGGY]  pos.setEndIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setEndIndex(endIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setEndIndex(endIndex);	      pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	16	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	3	14	add
5	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	3	14	add
6	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
7	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	3	None	add
8	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setStartIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setStartIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setStartIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
9	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	17	2	add
10	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	17	2	add
11	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParseAndIgnoreWhitespace(source,  pos);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,    pos);    ParseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
12	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,    pos);    ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	17	None	add
13	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,    pos);    ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  incompatible  types	17	None	add
14	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	9	None	replace
15	[BUG]  [BUGGY]  char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
16	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	22	None	replace
17	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  ';'  expected	22	None	replace
18	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	1	14	add
19	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	1	14	add
20	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(initialIndex);    pos.setInitialIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
21	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]        AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	1	None	add
22	[BUG]  [BUGGY]  pos.setStartIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setStartIndex(endIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setStartIndex(endIndex);	      pos.setIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	13	None	replace
23	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	18	None	replace
24	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  c);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  c);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  c);	  parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	18	None	replace
25	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  startIndex);	  parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	18	None	replace
26	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(startIndex);  pos.setErrorIndex(endIndex);	      pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	5	None	replace
27	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(n);  [CE]  cannot  find  symbol  n  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(n);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(n);	      pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  n	5	None	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setIndex(initialIndex);  pos.setErrorIndex(sign);	      pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	5	14	replace
29	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [FE]  AssertionFailedError  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(sign);	      pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	5	14	replace
30	[BUG]  [BUGGY]  pos.setCharacterIndex(startIndex);  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setCharacterIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(startIndex);	      pos.setCharacterIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
31	[BUG]  [BUGGY]  pos.setCharacterIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setCharacterIndex(endIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(endIndex);	      pos.setCharacterIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	6	None	replace
32	[BUG]  [BUGGY]  pos.setCharacterIndex(source.initialIndex);  [CE]  cannot  find  symbol  initialIndex  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setCharacterIndex(source.initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(source.initialIndex);	      pos.setCharacterIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  initialIndex	6	None	replace
33	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	2	add
34	[BUG]  [BUGGY]      pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	2	add
35	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	        pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	2	add
36	[BUG]  [BUGGY]      pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	15	2	add
37	[BUG]  [BUGGY]      pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	15	None	add
38	[BUG]  [BUGGY]      pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  [CE]  cannot  find  symbol  n  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setErrorIndex(startIndex);  pos.setErrorIndex(n);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);	  	non-compiled	[CE]  cannot  find  symbol  n	15	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(initialIndex  +  1);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setIndex(initialIndex  +  1);	      pos.setIndex(initialIndex);    	compilable	  [FE]  AssertionFailedError  	2	14	replace
40	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(initialIndex  +  1);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex  +  1);	      pos.setIndex(initialIndex);    	compilable	  [FE]  AssertionFailedError  	2	14	replace
41	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	19	None	replace
42	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	19	None	replace
43	[BUG]  [BUGGY]  pos.setIndex(source.initialIndex);  [CE]  cannot  find  symbol  initialIndex  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(source.initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(source.initialIndex);	      pos.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  initialIndex	7	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	        pos.setIndex(startIndex);    pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	12	14	add
45	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(startIndex);    pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	12	14	add
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	        pos.setIndex(startIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	12	14	add
47	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(startIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	12	14	add
48	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(startIndex);    pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	12	None	add
49	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(n);  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(n);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(startIndex);    pos.setIndex(n);	  	non-compiled	[CE]  cannot  find  symbol  n	12	None	add
50	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(id);  [CE]  cannot  find  symbol  id  [FE]            AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(id);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(startIndex);    pos.setIndex(id);	  	non-compiled	[CE]  cannot  find  symbol  id	12	None	add
51	[BUG]  [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	11	None	replace
52	[BUG]  [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(deFAULT_IMAGINARY_CHARACTER);	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	21	None	replace
53	[BUG]  [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	21	None	replace
54	[BUG]  [BUGGY]  if(c  ==  DEFAULT_NAMES)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  DEFAULT_NAMES  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_NAMES)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_NAMES)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NAMES	21	None	replace
55	[BUG]  [BUGGY]  if(c  ==  DEFAULT_NAMES)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  DEFAULT_NAMES  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_NAMES)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_NAMES)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NAMES	21	None	replace
56	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  n.setErrorIndex(startIndex);	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	4	None	replace
57	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  pos.setErrorIndex(endIndex);	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	4	None	replace
58	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	20	None	replace
59	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	20	None	replace
60	[BUG]  [BUGGY]  int  initialIndex  =  source.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  int  initialIndex  =  source.getIndex();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  source.getIndex();	      int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	14	None	replace
61	[BUG]  [BUGGY]  int  initialIndex  =  im.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  int  initialIndex  =  im.getIndex();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  im.getIndex();	      int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	14	None	replace
62	[BUG]  [BUGGY]  int  initialIndex  =  re.getIndex()  -  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  int  initialIndex  =  re.getIndex()  -  1;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  re.getIndex()  -  1;	      int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	14	None	replace
63	[BUG]  [BUGGY]  int  initialIndex  =  re.getIndex()  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  int  initialIndex  =  re.getIndex()  +  1;  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  re.getIndex()  +  1;	      int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	14	None	replace
64	[BUG]  [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	10	None	replace
65	[BUG]  [BUGGY]  pos.setCharacterIndex(sourceIndex);  [CE]  cannot  find  symbol  sourceIndex  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setCharacterIndex(sourceIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(sourceIndex);	      pos.setCharacterIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  sourceIndex	6	None	replace
66	[BUG]  [BUGGY]  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
67	[BUG]  [BUGGY]  pos.setIndex(n);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(n);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(n);	      pos.setIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	13	None	replace
68	[BUG]  [BUGGY]  char  initialIndex  =  re.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  char  initialIndex  =  re.getIndex();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	char  initialIndex  =  re.getIndex();	      int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	14	None	replace
69	[BUG]  [BUGGY]  if(re.getValue()  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(re.getValue()  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(re.getValue()  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	19	None	replace
70	[BUG]  [BUGGY]  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
71	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	9	None	replace
72	[BUG]  [BUGGY]      pos.setErrorIndex(startIndex);  pos.setWarningIndex(startIndex);  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setErrorIndex(startIndex);  pos.setWarningIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
73	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  int  initialIndex  =  re.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  int  initialIndex  =  re.getIndex();  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(initialIndex);    int  initialIndex  =  re.getIndex();	  	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	1	None	add
74	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  sign);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  sign);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  sign);	  parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	18	None	replace
75	[BUG]  [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);	  parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	18	None	replace
76	[BUG]  [BUGGY]  if(c  ==  DEFAULT_INTERFACE)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  DEFAULT_INTERFACE  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_INTERFACE)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_INTERFACE)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_INTERFACE	21	None	replace
77	[BUG]  [BUGGY]  if(c  ==  DEFAULT_NUMBER_INT)  {  break;  }  else  {  pos.setIndex(deFAULT_NUMBER_INT);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  DEFAULT_NUMBER_INT  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_NUMBER_INT)  {  break;  }  else  {  pos.setIndex(deFAULT_NUMBER_INT);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_NUMBER_INT)  {  break;  }  else  {  pos.setIndex(deFAULT_NUMBER_INT);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NUMBER_INT	21	None	replace
78	[BUG]  [BUGGY]  pos.setIndex(definableIndex);  [CE]  cannot  find  symbol  definableIndex  [FE]                StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setIndex(definableIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(definableIndex);	      pos.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  definableIndex	7	None	replace
79	[BUG]  [BUGGY]  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setErrorIndex(endIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(endIndex);	      pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	16	None	replace
80	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	4	None	replace
81	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	4	None	replace
82	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	4	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	        pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	1	14	add
84	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	1	14	add
85	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setEndIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setEndIndex(endIndex);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setEndIndex(endIndex);  }	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	4	None	replace
86	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	4	None	replace
87	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setStartIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setStartIndex(endIndex);  }  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setStartIndex(endIndex);  }	      pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	4	None	replace
88	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	8	None	replace
89	[BUG]  [BUGGY]  pos.setCharacterIndex(deFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  pos.setCharacterIndex(deFAULT_IMAGINARY_CHARACTER);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(deFAULT_IMAGINARY_CHARACTER);	      pos.setCharacterIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	6	None	replace
90	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  sign);	  parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	18	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	17	14	add
92	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	17	14	add
93	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  break;  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  break;  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,    pos);    ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  break;	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	17	None	add
94	[BUG]  [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setWarningIndex(startIndex);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]      pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setWarningIndex(startIndex);  [BUGGY]    break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setWarningIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
95	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	21	None	replace
96	[BUG]  [BUGGY]  if(c  ==  DEFAULT_SIGNATURE_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  DEFAULT_SIGNATURE_CHARACTER  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_SIGNATURE_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_SIGNATURE_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SIGNATURE_CHARACTER	21	None	replace
97	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  nu  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  nu  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  nu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  ';'  expected	21	None	replace
98	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	10	None	replace
99	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	11	None	replace
100	[BUG]  [BUGGY]  if(c  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          StringIndexOutOfBoundsException    [CONTEXT]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;    [BUGGY]  if(c  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]    default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	9	None	replace
