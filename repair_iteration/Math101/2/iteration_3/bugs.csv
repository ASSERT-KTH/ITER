bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  pos.setErrorIndex(endIndex);  pos.setWarningIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(endIndex);  pos.setWarningIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(endIndex);  pos.setWarningIndex(startIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	72	None	replace
2	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setWarningIndex(startIndex);  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setWarningIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(initialIndex);  pos.setWarningIndex(startIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
3	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setWarningIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setWarningIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(initialIndex);  pos.setWarningIndex(endIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	72	None	replace
4	[BUG]  [BUGGY]  int  initialIndex  =  c.charAt(initialIndex);  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  int  initialIndex  =  c.charAt(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  c.charAt(initialIndex);	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    else    {    pos.setEndIndex(endIndex);    }    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	85	None	replace
5	[BUG]  [BUGGY]  pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  endIndex  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  parseAndIgnoreWhitespace(source,  pos);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol  endIndex	84	None	replace
6	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  startIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  startIndex);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	84	None	replace
7	[BUG]  [BUGGY]  n.setIndex(endIndex);  n.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(endIndex);  n.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(endIndex);  n.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    n.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	56	None	replace
8	[BUG]  [BUGGY]  im.setIndex(initialIndex);  im.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  im  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  im.setIndex(initialIndex);  im.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	im.setIndex(initialIndex);  im.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    n.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  im	56	None	replace
9	[BUG]  [BUGGY]  re.setIndex(initialIndex);  re.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  re.setIndex(initialIndex);  re.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	re.setIndex(initialIndex);  re.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    n.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
10	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
11	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
12	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setWarningIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setWarningIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(initialIndex);    pos.setWarningIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex  +  1);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setIndex(initialIndex    +    1);    pos.setIndex(initialIndex  +  1);	  	compilable	  [FE]  AssertionFailedError  	39	14	add
14	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex  +  1);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex    +    1);    pos.setIndex(initialIndex  +  1);	  	compilable	  [FE]  AssertionFailedError  	39	14	add
15	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  int  initialIndex  =  initialIndex  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex  +  1);  int  initialIndex  =  initialIndex  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex    +    1);    int  initialIndex  =  initialIndex  +  1;	  	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	39	None	add
16	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex  +  1));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex  +  1);  pos.setIndex(initialIndex  +  1));  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex    +    1);    pos.setIndex(initialIndex  +  1));	  	non-compiled	[CE]  ';'  expected	39	None	add
17	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    nu    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
18	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    nu    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setIndex(initialIndex);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	83	14	add
20	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	83	14	add
21	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  ParseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  ParseAndIgnoreWhitespace(source,  pos);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  ParseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol	83	None	add
22	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  int  initialIndex  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  int  initialIndex  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        parseAndIgnoreWhitespace(source,    pos);    int  initialIndex  =  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	83	None	add
23	[BUG]  [BUGGY]  int  initialIndex  =  im.getIndex()  -  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  int  initialIndex  =  im.getIndex()  -  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  im.getIndex()  -  1;	  int    initialIndex    =    im.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	61	None	replace
24	[BUG]  [BUGGY]  int  startIndex  =  im.getIndex();  [CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  int  startIndex  =  im.getIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  startIndex  =  im.getIndex();	  int    initialIndex    =    im.getIndex();    	non-compiled	[CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)	61	None	replace
25	[BUG]  [BUGGY]  pos.setStartIndex(endIndex);  pos.setErrorIndex(initialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setStartIndex(endIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setStartIndex(endIndex);  pos.setErrorIndex(initialIndex);	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	36	None	replace
26	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(initialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  pos.setErrorIndex(initialIndex);	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	36	None	replace
27	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	16	None	replace
28	[BUG]  [BUGGY]  Number  im  =  re.getValue();  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Number  im  =  re.getValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Number  im  =  re.getValue();	  Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
29	[BUG]  [BUGGY]  Number  im  =  source.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Number  im  =  source.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Number  im  =  source.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	  Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
30	[BUG]  [BUGGY]  Number  im  =  this.re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  re  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Number  im  =  this.re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Number  im  =  this.re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	  Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  cannot  find  symbol  re	66	None	replace
31	[BUG]  [BUGGY]  pos.setCharacterIndex(source.charAt(initialIndex));  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(source.charAt(initialIndex));  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(source.charAt(initialIndex));	  pos.setCharacterIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
32	[BUG]  [BUGGY]  String  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  String  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	String  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  char    c    =    c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
33	[BUG]  [BUGGY]  char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  ';'  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	char  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  char    c    =    c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
34	[BUG]  [BUGGY]  Number  im  =  source.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Number  im  =  source.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Number  im  =  source.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }	  Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
35	[BUG]  [BUGGY]  pos.setIndex(endIndex);  int  initialIndex  =  re.getIndex();  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  int  initialIndex  =  re.getIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  int  initialIndex  =  re.getIndex();	          pos.setIndex(initialIndex);    int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  cannot  find  symbol  endIndex	73	None	replace
36	[BUG]  [BUGGY]  pos.setIndex(startIndex);  int  initialIndex  =  re.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(startIndex);  int  initialIndex  =  re.getIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(startIndex);  int  initialIndex  =  re.getIndex();	          pos.setIndex(initialIndex);    int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	73	None	replace
37	[BUG]  [BUGGY]  pos.setIndex(source.intValue());  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(source.intValue());  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(source.intValue());	  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
38	[BUG]  [BUGGY]  pos.setStartIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setStartIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setStartIndex(initialIndex);	  pos.setStartIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
39	[BUG]  [BUGGY]  pos.setStartIndex(startIndex);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setStartIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setStartIndex(startIndex);	  pos.setStartIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
40	[BUG]  [BUGGY]  pos.setStartIndex(InitialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setStartIndex(InitialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setStartIndex(InitialIndex);	  pos.setStartIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  InitialIndex	22	None	replace
41	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  pos.setErrorIndex(endIndex);	  pos.setIndex(initialIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  cannot  find  symbol  endIndex	27	None	replace
42	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  pos.setErrorIndex(startIndex);	  pos.setIndex(initialIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  cannot  find  symbol  endIndex	27	None	replace
43	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	45	None	replace
44	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	45	None	replace
45	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  startIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  startIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  startIndex);	  parseAndIgnoreWhitespace(source,    startIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	25	None	replace
46	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex,  pos);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  startIndex,  pos);	  parseAndIgnoreWhitespace(source,    startIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	25	None	replace
47	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  n,  startIndex);  [CE]  cannot  find  symbol  n  [FE]                AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  n,  startIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  n,  startIndex);	  parseAndIgnoreWhitespace(source,    startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	25	None	replace
48	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex,  sign);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex,  sign);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  startIndex,  sign);	  parseAndIgnoreWhitespace(source,    startIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	25	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	44	14	add
50	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	44	14	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	44	14	add
52	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	44	14	add
53	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);  pos.setIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);  pos.setIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(endIndex);  pos.setIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	44	None	add
54	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]          AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	44	None	add
55	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(InitialIndex);  pos.setIndex(startIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]            AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(InitialIndex);  pos.setIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(InitialIndex);  pos.setIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	44	None	add
56	[BUG]  [BUGGY]  pos.setCharacterIndex(desc);  [CE]  cannot  find  symbol  desc  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(desc);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(desc);	  pos.setCharacterIndex(sourceIndex);    	non-compiled	[CE]  cannot  find  symbol  desc	65	None	replace
57	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    nu    	non-compiled	[CE]  incomparable  types:  char  and  String	17	None	replace
58	[BUG]  [BUGGY]  if(c  ==  DEFAULT_NAMES)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  DEFAULT_NAMES  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_NAMES)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_NAMES)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_INTERFACE)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NAMES	76	None	replace
59	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
60	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
61	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
62	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
63	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
64	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	33	2	add
65	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	33	None	add
66	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	33	None	add
67	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  sign);  ParseAndIgnoreWhitespace(source,  pos);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  sign);  ParseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  sign);  ParseAndIgnoreWhitespace(source,  pos);	  parseAndIgnoreWhitespace(source,    pos);    ParseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	11	None	replace
68	[BUG]  [BUGGY]  ParseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  ParseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	ParseAndIgnoreWhitespace(source,  pos);	  parseAndIgnoreWhitespace(source,    pos);    ParseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
69	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  sign,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    sign);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	90	None	replace
70	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  sign);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  sign);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  sign);	  parseAndIgnoreWhitespace(source,    pos,    sign);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	90	None	replace
71	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  sign,  pos);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  sign,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  sign,  pos);	  parseAndIgnoreWhitespace(source,    pos,    sign);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	90	None	replace
72	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex,  pos,  sign);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex,  pos,  sign);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  startIndex,  pos,  sign);	  parseAndIgnoreWhitespace(source,    pos,    sign);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	90	None	replace
73	[BUG]  [BUGGY]  String  initialIndex  =  re.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  String  initialIndex  =  re.getIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	String  initialIndex  =  re.getIndex();	  char    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	68	None	replace
74	[BUG]  [BUGGY]  Number  initialIndex  =  im.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Number  initialIndex  =  im.getIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Number  initialIndex  =  im.getIndex();	  char    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	68	None	replace
75	[BUG]  [BUGGY]  char  initialIndex  =  im.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  char  initialIndex  =  im.getIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	char  initialIndex  =  im.getIndex();	  char    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	68	None	replace
76	[BUG]  [BUGGY]  String  initialIndex  =  im.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  String  initialIndex  =  im.getIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	String  initialIndex  =  im.getIndex();	  char    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	68	None	replace
77	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex);  pos.setIndex(initialIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex);  pos.setIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  startIndex);  pos.setIndex(initialIndex);	  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	92	None	replace
78	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  n);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  n);  pos.setIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  n);  pos.setIndex(initialIndex);	  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  n	92	None	replace
79	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  endIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  endIndex);  pos.setIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  endIndex);  pos.setIndex(initialIndex);	  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	92	None	replace
80	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setWarningIndex(startIndex);  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setWarningIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setWarningIndex(startIndex);	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	94	None	replace
81	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  sign,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  sign,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  sign,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    sign);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	74	None	replace
82	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  n,  sign);  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  n,  sign);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  n,  sign);	  parseAndIgnoreWhitespace(source,    sign);    	non-compiled	[CE]  cannot  find  symbol  n	74	None	replace
83	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  n,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  n,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  n,  pos,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  cannot  find  symbol  n	23	None	replace
84	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  im);  [CE]  cannot  find  symbol  im  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  im);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  im);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  cannot  find  symbol  im	23	None	replace
85	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(im,  source,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  im  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(im,  source,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(im,  source,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  cannot  find  symbol  im	23	None	replace
86	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  sign);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  sign);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  sign);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);	  parseAndIgnoreWhitespace(source,    pos);    ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	12	None	replace
87	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(startIndex);  return  null;  [CE]  cannot  find  symbol  endIndex  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(startIndex);  return  null;  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  pos.setErrorIndex(startIndex);  return  null;	  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    	non-compiled	[CE]  cannot  find  symbol  endIndex	53	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;	  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    	compilable	  [FE]  AssertionFailedError  	53	14	replace
89	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  [FE]  AssertionFailedError  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;	  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    	compilable	  [FE]  AssertionFailedError  	53	14	replace
90	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  [CE]  cannot  find  symbol  n  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;	  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    	non-compiled	[CE]  cannot  find  symbol  n	53	None	replace
91	[BUG]  [BUGGY]  pos.setIndex(endIndex  +  1);  [CE]  cannot  find  symbol  endIndex  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex  +  1);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex  +  1);	  pos.setIndex(initialIndex    +    1);    	non-compiled	[CE]  cannot  find  symbol  endIndex	40	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(startIndex  +  1);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setIndex(startIndex  +  1);	  pos.setIndex(initialIndex    +    1);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
93	[BUG]  [BUGGY]  pos.setIndex(startIndex  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(startIndex  +  1);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(startIndex  +  1);	  pos.setIndex(initialIndex    +    1);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
94	[BUG]  [BUGGY]  int  initialIndex  =  source.getIndex()  -  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  int  initialIndex  =  source.getIndex()  -  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  source.getIndex()  -  1;	  int    initialIndex    =    re.getIndex()    -    1;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	62	None	replace
95	[BUG]  [BUGGY]  Integer  initialIndex  =  re.intValue();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Integer  initialIndex  =  re.intValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Integer  initialIndex  =  re.intValue();	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    else    {    pos.setInitialIndex(initialIndex);    }    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	86	None	replace
96	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    &&    n    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	88	None	replace
97	[BUG]  [BUGGY]  if(n  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  cannot  find  symbol  n  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(n  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(n  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    &&    n    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  cannot  find  symbol  n	88	None	replace
98	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    &&    n    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	88	None	replace
99	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  sign  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  sign  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  sign  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    &&    n    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	88	None	replace
100	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
101	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
102	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
103	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	35	2	add
104	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(endIndex);  pos.setErrorIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	35	None	add
105	[BUG]  [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);  pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setErrorIndex(startIndex);        pos.setErrorIndex(initialIndex);    pos.setErrorIndex(n);  pos.setErrorIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol  n	35	None	add
106	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    >=    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	64	None	replace
107	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(InitialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(InitialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  pos.setIndex(InitialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	21	None	replace
108	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  pos.setIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	21	None	replace
109	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]                AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  pos.setIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  cannot  find  symbol  n	21	None	replace
110	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(sign);  [CE]  cannot  find  symbol  endIndex  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  pos.setErrorIndex(sign);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  pos.setErrorIndex(sign);	  pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    	non-compiled	[CE]  cannot  find  symbol  endIndex	29	None	replace
111	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue()	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
112	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValu  [CE]  ')'  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
113	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue()	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    pos.setIndex(initialIndex);  pos.setErrorIndex(sign);	  	compilable	  [FE]  AssertionFailedError  	28	14	add
115	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    pos.setIndex(initialIndex);  pos.setErrorIndex(sign);	  	compilable	  [FE]  AssertionFailedError  	28	14	add
116	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(sign);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    pos.setInitialIndex(initialIndex);  pos.setErrorIndex(sign);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
117	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_NAMES)    {    break;    }    else    {    pos.setIndex(deFAULT_NAMES_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	55	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	18	14	add
119	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	18	14	add
120	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
121	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setInitialIndex(initialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
122	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]          AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	18	None	add
123	[BUG]  [BUGGY]  pos.setCharacterIndex(source.charAt(endIndex));  [CE]  cannot  find  symbol  endIndex  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(source.charAt(endIndex));  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(source.charAt(endIndex));	  pos.setCharacterIndex(source.initialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	32	None	replace
124	[BUG]  [BUGGY]  pos.setCharacterIndex(source.startIndex);  [CE]  cannot  find  symbol  startIndex  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(source.startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(source.startIndex);	  pos.setCharacterIndex(source.initialIndex);    	non-compiled	[CE]  cannot  find  symbol  startIndex	32	None	replace
125	[BUG]  [BUGGY]  pos.setCharacterIndex(source.index);  [CE]  cannot  find  symbol  index  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(source.index);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(source.index);	  pos.setCharacterIndex(source.initialIndex);    	non-compiled	[CE]  cannot  find  symbol  index	32	None	replace
126	[BUG]  [BUGGY]  if(c  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    <    DEFAULT_IMAGINARY_CHARACTER    ||    c    >    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	100	None	replace
127	[BUG]  [BUGGY]  if(c  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    <    DEFAULT_IMAGINARY_CHARACTER    ||    c    >    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	100	None	replace
128	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    <    DEFAULT_IMAGINARY_CHARACTER    ||    c    >    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	100	None	replace
129	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  n	7	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	7	14	replace
131	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	7	14	replace
132	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  n.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]                AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  n.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  n.setErrorIndex(endIndex);	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  n	7	None	replace
133	[BUG]  [BUGGY]  im.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  im  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  im.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	im.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  im	82	None	replace
134	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  n.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  n.setIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  n	19	None	replace
135	[BUG]  [BUGGY]  if(re.getValue()!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [CE]  orphaned  default  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(re.getValue()!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(re.getValue()!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }	  if(re.getValue()    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  default	69	None	replace
136	[BUG]  [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  break;  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  break;  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  break;	  parseAndIgnoreWhitespace(source,    pos);    ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    break;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	93	None	replace
137	[BUG]  [BUGGY]  pos  =  parseAndIgnoreWhitespace(source,  pos);  break;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos  =  parseAndIgnoreWhitespace(source,  pos);  break;  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos  =  parseAndIgnoreWhitespace(source,  pos);  break;	  parseAndIgnoreWhitespace(source,    pos);    ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    break;    	non-compiled	[CE]  incompatible  types	93	None	replace
138	[BUG]  [BUGGY]  pos.setEndIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setEndIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setEndIndex(initialIndex);	  pos.setEndIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
139	[BUG]  [BUGGY]  pos.setEndIndex(startIndex);  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setEndIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setEndIndex(startIndex);	  pos.setEndIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
140	[BUG]  [BUGGY]  n.setIndex(startIndex);  n.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(startIndex);  n.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(startIndex);  n.setErrorIndex(endIndex);	  pos.setIndex(startIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  n	26	None	replace
141	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	5	None	replace
142	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	5	None	replace
143	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	2	add
144	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	2	add
145	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	2	add
146	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	9	2	add
147	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  0);  parseAndIgnoreWhitespace(source,  pos);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  0);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  0);  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	9	None	add
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	9	14	add
149	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	9	14	add
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	4	14	add
151	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	4	14	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	4	14	add
153	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	4	14	add
154	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	4	None	add
155	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setInitialIndex(initialIndex);  pos.setErrorIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	4	14	add
157	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	4	14	add
158	[BUG]  [BUGGY]  pos.setIndex(InitialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(InitialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(InitialIndex);	  pos.setIndex(definableIndex);    	non-compiled	[CE]  cannot  find  symbol  InitialIndex	78	None	replace
159	[BUG]  [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  c);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  c);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  c);	  ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	75	None	replace
160	[BUG]  [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  sign);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  sign);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  sign);	  ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	75	None	replace
161	[BUG]  [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  n);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  n);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  n);	  ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	75	None	replace
162	[BUG]  [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  startIndex);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  startIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  startIndex);	  ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	75	None	replace
163	[BUG]  [BUGGY]  pos.setCharacterIndex(source.intValue());  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(source.intValue());  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(source.intValue());	  pos.setCharacterIndex(deFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
164	[BUG]  [BUGGY]  pos.setErrorIndex(n);  [CE]  cannot  find  symbol  n  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(n);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(n);	  pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  n	79	None	replace
165	[BUG]  [BUGGY]  pos.setErrorIndex(source.initialIndex);  [CE]  cannot  find  symbol  initialIndex  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(source.initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(source.initialIndex);	  pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  initialIndex	79	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	91	14	add
167	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	91	14	add
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	91	14	add
169	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	91	14	add
170	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  ParseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  ParseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(initialIndex);    ParseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
171	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  pos.setInitialIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  pos.setInitialIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
172	[BUG]  [BUGGY]  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(endIndex);  pos.setErrorIndex(endIndex);	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  cannot  find  symbol  endIndex	38	None	replace
173	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(initialIndex);  pos.setErrorIndex(endIndex);	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	non-compiled	[CE]  cannot  find  symbol  endIndex	38	None	replace
174	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_NUMBER_INT)    {    break;    }    else    {    pos.setIndex(deFAULT_NUMBER_INT);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	77	None	replace
175	[BUG]  [BUGGY]  int  initialIndex  =  source.getIndex()  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  int  initialIndex  =  source.getIndex()  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  source.getIndex()  +  1;	  int    initialIndex    =    source.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	60	None	replace
176	[BUG]  [BUGGY]  int  initialIndex  =  pos.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  int  initialIndex  =  pos.getIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  pos.getIndex();	  int    initialIndex    =    source.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	60	None	replace
177	[BUG]  [BUGGY]  n.setErrorIndex(startIndex);  n.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setErrorIndex(startIndex);  n.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setErrorIndex(startIndex);  n.setErrorIndex(endIndex);	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  n	37	None	replace
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	46	14	add
179	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	46	14	add
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	46	14	add
181	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	46	14	add
182	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(endIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(endIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(endIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	46	None	add
183	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setStartIndex(startIndex);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setStartIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setStartIndex(startIndex);  pos.setIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
184	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue()  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue()	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	42	None	replace
185	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue()  [CE]  ')'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue()  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue()	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	42	None	replace
186	[BUG]  [BUGGY]  n.setIndex(startIndex);  n.setIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(startIndex);  n.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(startIndex);  n.setIndex(initialIndex);	          pos.setIndex(startIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  n	47	None	replace
187	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  endIndex  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(endIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(endIndex);  pos.setInitialIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setInitialIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	20	None	replace
188	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setInitialIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
189	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(c,  pos,  source);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(c,  pos,  source);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(c,  pos,  source);	  parseAndIgnoreWhitespace(source,    pos,    c);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	24	None	replace
190	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign,  c);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign,  c);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  sign,  c);	  parseAndIgnoreWhitespace(source,    pos,    c);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	24	None	replace
191	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  c,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  c,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  c,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    c);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	24	None	replace
192	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(im,  source,  pos,  c);  [CE]  cannot  find  symbol  im  [FE]                AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(im,  source,  pos,  c);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(im,  source,  pos,  c);	  parseAndIgnoreWhitespace(source,    pos,    c);    	non-compiled	[CE]  cannot  find  symbol  im	24	None	replace
193	[BUG]  [BUGGY]  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);	  parseAndIgnoreWhitespace(source,    pos);    ParsePosition    im    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  incompatible  types	13	None	replace
194	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  sign);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  sign);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  sign);	  parseAndIgnoreWhitespace(source,    pos);    ParsePosition    im    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	13	None	replace
195	[BUG]  [BUGGY]  im.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  im  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  im.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	im.setIndex(initialIndex);  pos.setErrorIndex(endIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  im	57	None	replace
196	[BUG]  [BUGGY]  re.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  re.setIndex(initialIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	re.setIndex(initialIndex);  pos.setErrorIndex(endIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
197	[BUG]  [BUGGY]  int  initialIndex  =  im.getIndex()  +  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  int  initialIndex  =  im.getIndex()  +  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  im.getIndex()  +  1;	  int    initialIndex    =    re.getIndex()    +    1;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	63	None	replace
198	[BUG]  [BUGGY]  int  initialIndex  =  im.getIndex()  /  1;  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  int  initialIndex  =  im.getIndex()  /  1;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  initialIndex  =  im.getIndex()  /  1;	  int    initialIndex    =    re.getIndex()    +    1;    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	63	None	replace
199	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	47	None	replace
200	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(endIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	47	None	replace
201	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	47	None	replace
202	[BUG]  [BUGGY]  Number  im  =  this.re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  re  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Number  im  =  this.re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Number  im  =  this.re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }	  Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  cannot  find  symbol  re	70	None	replace
203	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(initialIndex);    ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	91	None	add
204	[BUG]  [BUGGY]  n.setIndex(endIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(endIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(endIndex);  pos.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	82	None	replace
205	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parsePosition(source);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parsePosition(source);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    ParsePosition  pos  =  parsePosition(source);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	9	None	add
206	[BUG]  [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    <    DEFAULT_IMAGINARY_CHARACTER    ||    c    >    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	100	None	replace
207	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);	  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);    	compilable	  [FE]  AssertionFailedError  	92	14	replace
208	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(startIndex);	  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);    	compilable	  [FE]  AssertionFailedError  	92	14	replace
209	[BUG]  [BUGGY]  n.setIndex(startIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(startIndex);  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	45	None	replace
210	[BUG]  [BUGGY]  n.setIndex(endIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(endIndex);  pos.setIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(endIndex);  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	45	None	replace
211	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	45	None	replace
212	[BUG]  [BUGGY]  n.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(endIndex);	  n.setIndex(initialIndex);    n.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  endIndex	56	None	replace
213	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NUMBER_INT);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NUMBER_INT);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NUMBER_INT);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_NUMBER_INT)    {    break;    }    else    {    pos.setIndex(deFAULT_NUMBER_INT);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	77	None	replace
214	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NUMBER_INT);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NUMBER_INT);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NUMBER_INT);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_NUMBER_INT)    {    break;    }    else    {    pos.setIndex(deFAULT_NUMBER_INT);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	77	None	replace
215	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_INT);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_INT);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_INT);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_NUMBER_INT)    {    break;    }    else    {    pos.setIndex(deFAULT_NUMBER_INT);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	77	None	replace
216	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        parseAndIgnoreWhitespace(source,    pos);    ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	83	None	add
217	[BUG]  [BUGGY]  pos.setCharacterIndex(sign);  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(sign);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(sign);	  pos.setCharacterIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
218	[BUG]  [BUGGY]  char  initialIndex  =  source.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  char  initialIndex  =  source.getIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	char  initialIndex  =  source.getIndex();	  char    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	68	None	replace
219	[BUG]  [BUGGY]  pos.setCharacterIndex(source.charAt(startIndex));  [CE]  cannot  find  symbol  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(source.charAt(startIndex));  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(source.charAt(startIndex));	  pos.setCharacterIndex(source.initialIndex);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
220	[BUG]  [BUGGY]  if(c  <  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  <  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  <  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    >=    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	64	None	replace
221	[BUG]  [BUGGY]  n.setIndex(startIndex);  pos.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(startIndex);  pos.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(startIndex);  pos.setErrorIndex(endIndex);	  pos.setIndex(startIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  n	26	None	replace
222	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  startIndex);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);	  parseAndIgnoreWhitespace(source,    pos);    ParsePosition    im    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	13	None	replace
223	[BUG]  [BUGGY]  pos.setCharacterIndex(defulT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(defulT_IMAGINARY_CHARACTER);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(defulT_IMAGINARY_CHARACTER);	  pos.setCharacterIndex(sourceIndex);    	non-compiled	[CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER	65	None	replace
224	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_NAMES)    {    break;    }    else    {    pos.setIndex(deFAULT_NAMES_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	55	None	replace
225	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [CE]  cannot  find  symbol  n  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  pos.setIndex(InitialIndex);	          pos.setIndex(initialIndex);    pos.setIndex(InitialIndex);    	non-compiled	[CE]  cannot  find  symbol  n	21	None	replace
226	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER    &&    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	99	None	replace
227	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER    &&    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	99	None	replace
228	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	5	None	replace
229	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	5	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(source  ==  null)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	if(source  ==  null)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	compilable	  [FE]  AssertionFailedError  	5	14	replace
231	[BUG]  [BUGGY]  if(source  ==  null)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(source  ==  null)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(source  ==  null)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	compilable	  [FE]  AssertionFailedError  	5	14	replace
232	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(InitialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	18	None	add
233	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	19	None	replace
234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(source  ==  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	if(source  ==  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	compilable	  [FE]  AssertionFailedError  	19	14	replace
235	[BUG]  [BUGGY]  if(source  ==  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(source  ==  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(source  ==  null)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	compilable	  [FE]  AssertionFailedError  	19	14	replace
236	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	19	None	replace
237	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  startIndex,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	23	None	replace
238	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  startIndex,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  startIndex,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  startIndex,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	23	None	replace
239	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setInitialIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	6	None	replace
240	[BUG]  [BUGGY]  Integer  initialIndex  =  re.doubleValue();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Integer  initialIndex  =  re.doubleValue();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Integer  initialIndex  =  re.doubleValue();	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    else    {    pos.setEndIndex(endIndex);    }    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	85	None	replace
241	[BUG]  [BUGGY]  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(Re.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(Re.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(Re.doubleValue(),  0.0);  }	  Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(sign);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setErrorIndex(sign);	  pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	79	14	replace
243	[BUG]  [BUGGY]  pos.setErrorIndex(sign);  [FE]  AssertionFailedError  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(sign);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(sign);	  pos.setErrorIndex(endIndex);    	compilable	  [FE]  AssertionFailedError  	79	14	replace
244	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    nu    	non-compiled	[CE]  ';'  expected	17	None	replace
245	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [CE]  ';'  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  nu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    nu    	non-compiled	[CE]  ';'  expected	17	None	replace
246	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  n,  c);  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  n,  c);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  n,  c);	  parseAndIgnoreWhitespace(source,    pos,    c);    	non-compiled	[CE]  cannot  find  symbol  n	24	None	replace
247	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  c,  sign);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  c,  sign);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  c,  sign);	  parseAndIgnoreWhitespace(source,    pos,    c);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	24	None	replace
248	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	81	None	replace
249	[BUG]  [BUGGY]  pos.setStartIndex(source.startIndex);  [CE]  cannot  find  symbol  startIndex  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setStartIndex(source.startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setStartIndex(source.startIndex);	  pos.setStartIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  startIndex	22	None	replace
250	[BUG]  [BUGGY]  pos.setErrorIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setWarningIndex(startIndex);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setWarningIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setWarningIndex(startIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	72	None	replace
251	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex);  ParseAndIgnoreWhitespace(source,  pos);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  startIndex);  ParseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  startIndex);  ParseAndIgnoreWhitespace(source,  pos);	  parseAndIgnoreWhitespace(source,    pos);    ParseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	11	None	replace
252	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  nu  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  nu  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  nu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    nu    	non-compiled	[CE]  ';'  expected	97	None	replace
253	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  nu  [CE]  ';'  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  nu  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  nu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    nu    	non-compiled	[CE]  ';'  expected	97	None	replace
254	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  orphaned  default  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  orphaned  default	80	None	replace
255	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValu  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValu  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	42	None	replace
256	[BUG]  [BUGGY]  pos.setIndex(defULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  defULT_IMAGINARY_CHARACTER  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(defULT_IMAGINARY_CHARACTER);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(defULT_IMAGINARY_CHARACTER);	  pos.setIndex(source.initialIndex);    	non-compiled	[CE]  cannot  find  symbol  defULT_IMAGINARY_CHARACTER	43	None	replace
257	[BUG]  [BUGGY]  pos.setCharacterIndex(source);  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(source);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(source);	  pos.setCharacterIndex(deFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
258	[BUG]  [BUGGY]  if(c  ==  DEFAULT_NULL)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  DEFAULT_NULL  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_NULL)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_NULL)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_INTERFACE)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NULL	76	None	replace
259	[BUG]  [BUGGY]  if(c  ==  DEFAULT_NUMBER_INT)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  DEFAULT_NUMBER_INT  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_NUMBER_INT)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_NUMBER_INT)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_INTERFACE)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NUMBER_INT	76	None	replace
260	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(initialIndex);    pos.setIndex(startIndex);  pos.setInitialIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
261	[BUG]  [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    >=    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	51	None	replace
262	[BUG]  [BUGGY]  Integer  initialIndex  =  re.getIndex();  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Integer  initialIndex  =  re.getIndex();  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Integer  initialIndex  =  re.getIndex();	          pos.setIndex(initialIndex);    int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	73	None	replace
263	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	36	None	replace
264	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	36	None	replace
265	[BUG]  [BUGGY]  n.setStartIndex(startIndex);  n.setErrorIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setStartIndex(startIndex);  n.setErrorIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setStartIndex(startIndex);  n.setErrorIndex(initialIndex);	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  cannot  find  symbol  n	36	None	replace
266	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	36	None	replace
267	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }	  pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    	non-compiled	[CE]  incomparable  types:  char  and  String	29	None	replace
268	[BUG]  [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(sign);  [CE]  cannot  find  symbol  n  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  pos.setErrorIndex(sign);	  pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    	non-compiled	[CE]  cannot  find  symbol  n	29	None	replace
269	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }  else  {  pos.setIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }  else  {  pos.setIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }  else  {  pos.setIndex(endIndex);  }	  pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    	non-compiled	[CE]  incomparable  types:  char  and  String	29	None	replace
270	[BUG]  [BUGGY]  Integer  initialIndex  =  re.getIndex(initialIndex);  [CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Integer  initialIndex  =  re.getIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Integer  initialIndex  =  re.getIndex(initialIndex);	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    else    {    pos.setStartIndex(endIndex);    }    	non-compiled	[CE]  variable  initialIndex  is  already  defined  in  method  parse(String,ParsePosition)	87	None	replace
271	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setStartIndex(initialIndex);  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setStartIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  pos.setStartIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setStartIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	8	None	replace
272	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    else    {    pos.setInitialIndex(initialIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	86	None	replace
273	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setInitialIndex(startIndex);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setInitialIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setInitialIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol	44	None	add
274	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign,  defult_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  defult_IMAGINARY_CHARACTER  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign,  defult_IMAGINARY_CHARACTER);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  sign,  defult_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    sign);    	non-compiled	[CE]  cannot  find  symbol  defult_IMAGINARY_CHARACTER	90	None	replace
275	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign,  realFormat);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign,  realFormat);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  sign,  realFormat);	  parseAndIgnoreWhitespace(source,    pos,    sign);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	90	None	replace
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  AssertionFailedError  	84	14	replace
277	[BUG]  [BUGGY]  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(startIndex);  parseAndIgnoreWhitespace(source,  pos);	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  AssertionFailedError  	84	14	replace
278	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_NAMES);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_NAMES)    {    break;    }    else    {    pos.setIndex(deFAULT_NAMES);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	54	None	replace
279	[BUG]  [BUGGY]  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos  =  parseAndIgnoreWhitespace(source,  pos);	  parseAndIgnoreWhitespace(source,    pos);    ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  incompatible  types	12	None	replace
280	[BUG]  [BUGGY]  char  c  =  source  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  char  c  =  source  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	char  c  =  source  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  char    c    =    c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
281	[BUG]  [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  initialIndex);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  initialIndex);	  ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	75	None	replace
282	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	34	None	replace
283	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	34	None	replace
284	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	34	None	replace
285	[BUG]  [BUGGY]  pos.setCharacterIndex(diff);  [CE]  cannot  find  symbol  diff  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(diff);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(diff);	  pos.setCharacterIndex(sourceIndex);    	non-compiled	[CE]  cannot  find  symbol  diff	65	None	replace
286	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }  else  {  pos.setEndIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }  else  {  pos.setEndIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(initialIndex);  }  else  {  pos.setEndIndex(endIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	36	None	replace
287	[BUG]  [BUGGY]  pos.setErrorIndex(deFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(deFAULT_IMAGINARY_CHARACTER);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(deFAULT_IMAGINARY_CHARACTER);	  pos.setErrorIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	79	None	replace
288	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(endIndex);  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(endIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  n.setErrorIndex(endIndex);	  n.setIndex(initialIndex);    n.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	56	None	replace
289	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c  <  =  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c  <  =  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c  <  =  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER    &&    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
290	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex;  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex;	  	non-compiled	[CE]  ')'  expected	18	None	add
291	[BUG]  [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    >=    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	51	None	replace
292	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	34	None	replace
293	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setErrorIndex(startIndex);  pos.setErrorIndex(startIndex);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	34	None	replace
294	[BUG]  [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  >  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    >=    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	64	None	replace
295	[BUG]  [BUGGY]  char  c  =  c  <  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  >  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  char  c  =  c  <  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	char  c  =  c  <  <  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  char    c    =    c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  >  expected	15	None	replace
296	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setErrorIndex(endIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(endIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	7	None	replace
297	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	47	None	replace
298	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setErrorIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setErrorIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setErrorIndex(initialIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	47	None	replace
299	[BUG]  [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  n.setWarningIndex(startIndex);  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  n.setWarningIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setIndex(initialIndex);  n.setErrorIndex(startIndex);  n.setWarningIndex(startIndex);	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	94	None	replace
300	[BUG]  [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  DEFAULT_IMAGINARY_CHARACTER);	  ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	75	None	replace
301	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	16	None	replace
302	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  break;  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,  pos);  break;	  parseAndIgnoreWhitespace(source,    pos);    ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    break;    	compilable	  [FE]  StringIndexOutOfBoundsException  	93	2	replace
303	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  break;  [FE]  StringIndexOutOfBoundsException  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  break;  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos);  break;	  parseAndIgnoreWhitespace(source,    pos);    ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    break;    	compilable	  [FE]  StringIndexOutOfBoundsException  	93	2	replace
304	[BUG]  [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  <  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  <  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  <  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    <    DEFAULT_IMAGINARY_CHARACTER    ||    c    >    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	100	None	replace
305	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  c);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  c);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  c);	  parseAndIgnoreWhitespace(source,    pos,    c);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	24	None	replace
306	[BUG]  [BUGGY]  Number  im  =  n.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [CE]  cannot  find  symbol  n  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  Number  im  =  n.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	Number  im  =  n.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0);  }	  Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  cannot  find  symbol  n	70	None	replace
307	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    return    nu    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	9	14	add
309	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	9	14	add
310	[BUG]  [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(initialIndex);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(initialIndex);	          pos.setIndex(startIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	48	None	replace
311	[BUG]  [BUGGY]  pos.setCharacterIndex(DEFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(DEFAULT_IMAGINARY_CHARACTER);	  pos.setCharacterIndex(source.initialIndex);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
312	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  parseAndIgnoreWhitespace(source,  pos);  }	          pos.setIndex(initialIndex);    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  incomparable  types:  char  and  String	84	None	replace
313	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [CE]  incomparable  types:  char  and  String  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  n  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    &&    n    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    	non-compiled	[CE]  incomparable  types:  char  and  String	88	None	replace
314	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  indent);  [CE]  cannot  find  symbol  indent  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  indent);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  indent);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  cannot  find  symbol  indent	23	None	replace
315	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(sign);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  pos.setIndex(initialIndex);    pos.setErrorIndex(sign);    	non-compiled	[CE]  incomparable  types:  char  and  String	29	None	replace
316	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(InitialIndex);  [CE]  cannot  find  symbol  InitialIndex  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(InitialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(initialIndex);    pos.setErrorIndex(InitialIndex);	  	non-compiled	[CE]  cannot  find  symbol  InitialIndex	1	None	add
317	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	45	None	replace
318	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(endIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	45	None	replace
319	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	45	None	replace
320	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(initialIndex);  }	  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	92	None	replace
321	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  ';'  expected	95	None	replace
322	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(im.doubleValue(),  0.0	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(im.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	42	None	replace
323	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    break;    }    else    {    pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    nu    	non-compiled	[CE]  ';'  expected	97	None	replace
324	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  startIndex,  sign);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  startIndex,  sign);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  startIndex,  sign);	  parseAndIgnoreWhitespace(source,    pos,    sign);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	90	None	replace
325	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign,  defulT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  sign,  defulT_IMAGINARY_CHARACTER);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  pos,  sign,  defulT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    sign);    	non-compiled	[CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER	90	None	replace
326	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setInitialIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	5	None	replace
327	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);  ParsePosition  im  =  parseAndIgnoreWhitespace(source,  pos);	  parseAndIgnoreWhitespace(source,    pos);    ParsePosition    im    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  incompatible  types	13	None	replace
328	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [CE]  incomparable  types:  char  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }	  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  incomparable  types:  char  and  String	10	None	replace
329	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [CE]  incomparable  types:  char  and  String  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }	  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  incomparable  types:  char  and  String	10	None	replace
330	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }	  parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  incomparable  types:  char  and  String	10	None	replace
331	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	19	None	replace
332	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setErrorIndex(startIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]      AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setErrorIndex(startIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	19	None	replace
333	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  }  else  {  pos.setInitialIndex(initialIndex);  }	          pos.setIndex(initialIndex);    pos.setIndex(initialIndex);    	non-compiled	[CE]  incomparable  types:  char  and  String	19	None	replace
334	[BUG]  [BUGGY]  n.setErrorIndex(startIndex);  n.setWarningIndex(startIndex);  [CE]  cannot  find  symbol  n  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  n.setErrorIndex(startIndex);  n.setWarningIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	n.setErrorIndex(startIndex);  n.setWarningIndex(startIndex);	          pos.setErrorIndex(startIndex);    pos.setWarningIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol  n	72	None	replace
335	[BUG]  [BUGGY]  pos.setCharacterIndex(source.charAt(i));  [CE]  cannot  find  symbol  i  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(source.charAt(i));  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(source.charAt(i));	  pos.setCharacterIndex(deFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  cannot  find  symbol  i	89	None	replace
336	[BUG]  [BUGGY]  pos.setCharacterIndex(source.charAt(0));  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setCharacterIndex(source.charAt(0));  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setCharacterIndex(source.charAt(0));	  pos.setCharacterIndex(deFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
337	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setStartIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setStartIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setStartIndex(endIndex);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    else    {    pos.setStartIndex(endIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	87	None	replace
338	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setStartIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(initialIndex);  pos.setStartIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(initialIndex);  pos.setStartIndex(initialIndex);	          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setStartIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
339	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }	  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);    pos.setErrorIndex(startIndex);    return    null;    	non-compiled	[CE]  incomparable  types:  char  and  String	53	None	replace
340	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  nf,  sign);  [CE]  cannot  find  symbol  nf  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  nf,  sign);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  nf,  sign);	  parseAndIgnoreWhitespace(source,    sign);    	non-compiled	[CE]  cannot  find  symbol  nf	74	None	replace
341	[BUG]  [BUGGY]  int  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  int  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	int  c  =  c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    	non-compiled	[CE]  ';'  expected	81	None	replace
342	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setIn  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setIn  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setIn	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    else    {    pos.setInitialIndex(initialIndex);    }    	non-compiled	[CE]  not  a  statement	86	None	replace
343	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setEndIndex(endIndex);  }  [CE]  incomparable  types:  char  and  String  [FE]        AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setEndIndex(endIndex);  }  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  }  else  {  pos.setEndIndex(endIndex);  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    }    else    {    pos.setEndIndex(endIndex);    }    	non-compiled	[CE]  incomparable  types:  char  and  String	85	None	replace
344	[BUG]  [BUGGY]  re.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  re.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	re.setIndex(initialIndex);  pos.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
345	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  initialIndex);  pos.setErrorIndex(startIndex);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,  initialIndex);  pos.setErrorIndex(startIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,  initialIndex);  pos.setErrorIndex(startIndex);	  n.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	82	None	replace
346	[BUG]  [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]          pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setInitialIndex(initialIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	                pos.setIndex(initialIndex);        pos.setErrorIndex(startIndex);        pos.setIndex(initialIndex);    pos.setErrorIndex(startIndex);    pos.setIndex(initialIndex);  pos.setErrorIndex(initialIndex);  pos.setInitialIndex(initialIndex);	  	non-compiled	[CE]  cannot  find  symbol	4	None	add
347	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	91	14	add
348	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(initialIndex);    pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	91	14	add
349	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTS)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [CE]  cannot  find  symbol  DEFAULT_IMPLEMENTS  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTS)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }  [BUGGY]      default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMPLEMENTS)  {  break;  }  else  {  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setErrorIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_NUMBER_INT)    {    break;    }    else    {    pos.setIndex(deFAULT_NUMBER_INT);    pos.setErrorIndex(startIndex);    return    null;    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_IMPLEMENTS	77	None	replace
350	[BUG]  [BUGGY]  pos.setIndex(DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(DEFAULT_IMAGINARY_CHARACTER);	  pos.setIndex(source.initialIndex);    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	43	None	replace
351	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0  [CE]  ')'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  re.getValue();  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    re.getValue();    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	59	None	replace
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	add	pos.setErrorIndex(initialIndex);  pos.setErrorIndex(sign);	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	compilable	  [FE]  AssertionFailedError  	38	14	replace
353	[BUG]  [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(sign);  [FE]  AssertionFailedError  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setErrorIndex(initialIndex);  pos.setErrorIndex(sign);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setErrorIndex(initialIndex);  pos.setErrorIndex(sign);	          pos.setErrorIndex(startIndex);    pos.setErrorIndex(n);    	compilable	  [FE]  AssertionFailedError  	38	14	replace
354	[BUG]  [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(defultIndex);  [CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER  [FE]                AssertionFailedError      [CONTEXT]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;      [BUGGY]  pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(defultIndex);  [BUGGY]      break;  default  :    pos.setIndex(initialIndex);  pos.setErrorIndex(startIndex);  return  null;  }    [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.3779644730092272	350	350	2	replace	pos.setIndex(deFAULT_IMAGINARY_CHARACTER);  pos.setIndex(defultIndex);	          pos.setIndex(startIndex);    pos.setIndex(id);    	non-compiled	[CE]  cannot  find  symbol  deFAULT_IMAGINARY_CHARACTER	50	None	replace
