bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    &&    c!=    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
2	[BUG]  [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    &&    c!=    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	50	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	35	24	add
4	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	35	24	add
5	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]      AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);  pos.setIndex(endIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(endIndex);  pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	35	None	add
6	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	35	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	35	26	add
8	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);	  	compilable	  [FE]  AssertionFailedError  	35	26	add
9	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);  pos.setIndex(startIndex);  [CE]  cannot  find  symbol  endIndex  [FE]            AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(endIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(endIndex);  pos.setIndex(startIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	35	None	add
10	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  [CE]  orphaned  case  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	42	None	replace
11	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	42	None	replace
12	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  startIndex  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  startIndex  =  parseNextCharacter(source,  pos);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	42	None	replace
13	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	42	None	replace
14	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex,  sign);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex,  sign);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  startIndex,  sign);	  Number    im    =    parseNextCharacter(source,    pos,    sign);    	non-compiled	[CE]  orphaned  case	3	None	replace
15	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  sign,  startIndex);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  sign,  startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  sign,  startIndex);	  Number    im    =    parseNextCharacter(source,    pos,    sign);    	non-compiled	[CE]  orphaned  case	3	None	replace
16	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  int  startIndex  =  parseNextCharacter(source,  pos);	          pos.setIndex(startIndex);    int    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	43	None	replace
17	[BUG]  [BUGGY]  pos.setIndex(endIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(endIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex);  int  startIndex  =  parseNextCharacter(source,  pos);	          pos.setIndex(startIndex);    int    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	43	None	replace
18	[BUG]  [BUGGY]  int  startIndex  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  startIndex  =  parseNextCharacter(source,  pos);	          pos.setIndex(startIndex);    int    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	43	None	replace
19	[BUG]  [BUGGY]  pos.setIndex(startIndex,  Integer.toHexString(c));  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(startIndex,  Integer.toHexString(c));  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(startIndex,  Integer.toHexString(c));	  pos.setIndex(Integer.toHexString(c));    	non-compiled	[CE]  orphaned  case	67	None	replace
20	[BUG]  [BUGGY]  pos.setIndex(startIndex  +  Integer.toHexString(c));  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(startIndex  +  Integer.toHexString(c));  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(startIndex  +  Integer.toHexString(c));	  pos.setIndex(Integer.toHexString(c));    	non-compiled	[CE]  orphaned  case	67	None	replace
21	[BUG]  [BUGGY]  pos.setIndex(Integer.toHexString(startIndex));  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(Integer.toHexString(startIndex));  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(Integer.toHexString(startIndex));	  pos.setIndex(Integer.toHexString(c));    	non-compiled	[CE]  orphaned  case	67	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();	  	compilable	  [FE]  AssertionFailedError  	38	24	add
23	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();	  	compilable	  [FE]  AssertionFailedError  	38	24	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	38	24	add
25	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	38	24	add
26	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [CE]  cannot  find  symbol  endIndex  [FE]        AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();	  	non-compiled	[CE]  cannot  find  symbol  endIndex	38	None	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();	  	compilable	  [FE]  AssertionFailedError  	38	24	add
28	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();	  	compilable	  [FE]  AssertionFailedError  	38	24	add
29	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(endIndex);  startIndex  =  pos.getIndex();  [CE]  cannot  find  symbol  endIndex  [FE]            AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(endIndex);  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);  pos.setIndex(endIndex);  startIndex  =  pos.getIndex();	  	non-compiled	[CE]  cannot  find  symbol  endIndex	38	None	add
30	[BUG]  [BUGGY]  pos.setStartIndex(startIndex);  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setStartIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setStartIndex(startIndex);	  pos.setIndex(endIndex);    	non-compiled	[CE]  orphaned  case	5	None	replace
31	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	39	None	replace
32	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	39	None	replace
33	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	39	None	replace
34	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	39	None	replace
35	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  startIndex  +  1);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  startIndex  +  1);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  startIndex  +  1);	  Number    im    =    parseNextCharacter(source,    pos,    startIndex);    	non-compiled	[CE]  orphaned  case	1	None	replace
36	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  startIndex,  c);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  startIndex,  c);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  startIndex,  c);	  Number    im    =    parseNextCharacter(source,    pos,    startIndex);    	non-compiled	[CE]  orphaned  case	1	None	replace
37	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  startIndex,  sign);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  startIndex,  sign);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  startIndex,  sign);	  Number    im    =    parseNextCharacter(source,    pos,    startIndex);    	non-compiled	[CE]  orphaned  case	1	None	replace
38	[BUG]  [BUGGY]  switch(re.parseNextCharacter(c,  pos))  {  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(re.parseNextCharacter(c,  pos))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseNextCharacter(c,  pos))  {	  switch(source.parseNextCharacter(c,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
39	[BUG]  [BUGGY]  switch(im.parseNextCharacter(c,  pos))  {  [CE]  cannot  find  symbol  im  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(im.parseNextCharacter(c,  pos))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(im.parseNextCharacter(c,  pos))  {	  switch(source.parseNextCharacter(c,    pos))    {    	non-compiled	[CE]  cannot  find  symbol  im	15	None	replace
40	[BUG]  [BUGGY]  switch(source.parseNextCharacter(c,  startIndex))  {  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(source.parseNextCharacter(c,  startIndex))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source.parseNextCharacter(c,  startIndex))  {	  switch(source.parseNextCharacter(c,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
41	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  }	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	37	None	replace
42	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	37	None	replace
43	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        parseNextCharacter(source,    pos);    pos.setIndex(startIndex);  parseNextCharacter(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	2	add
44	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        parseNextCharacter(source,    pos);    pos.setIndex(startIndex);  parseNextCharacter(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	59	2	add
45	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setIndex(endIndex);  parseNextCharacter(source,  pos);  [CE]  cannot  find  symbol  endIndex  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setIndex(endIndex);  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        parseNextCharacter(source,    pos);    pos.setIndex(endIndex);  parseNextCharacter(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	59	None	add
46	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setStartIndex(startIndex);  parseNextCharacter(source,  pos);  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setStartIndex(startIndex);  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        parseNextCharacter(source,    pos);    pos.setStartIndex(startIndex);  parseNextCharacter(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol	59	None	add
47	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setIndex(n);  parseNextCharacter(source,  pos);  [CE]  cannot  find  symbol  n  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setIndex(n);  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        parseNextCharacter(source,    pos);    pos.setIndex(n);  parseNextCharacter(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  n	59	None	add
48	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(startIndex);  pos.setIndex(initialIndex);	          pos.setIndex(startIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  orphaned  case	40	None	replace
49	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex);  pos.setIndex(endIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  orphaned  case	40	None	replace
50	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  symbol,  startIndex);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  symbol,  startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  symbol,  startIndex);	  Number    im    =    parseNextCharacter(source,    pos,    symbol);    	non-compiled	[CE]  orphaned  case	4	None	replace
51	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex,  symbol);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex,  symbol);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  startIndex,  symbol);	  Number    im    =    parseNextCharacter(source,    pos,    symbol);    	non-compiled	[CE]  orphaned  case	4	None	replace
52	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  startIndex,  DEFAULT_IMAGINARY_CHARACTER);	  Number    im    =    parseNextCharacter(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  orphaned  case	62	None	replace
53	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  1);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  1);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  1);	  Number    im    =    parseNextCharacter(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  orphaned  case	62	None	replace
54	[BUG]  [BUGGY]  Null  im  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Null  im  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Null  im  =  parseNextCharacter(source,  pos);	  Null    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	72	None	replace
55	[BUG]  [BUGGY]  char  c  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  c  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  c  =  parseNextCharacter(source,  pos);	  Null    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	72	None	replace
56	[BUG]  [BUGGY]  im.setIndex(endIndex);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  im.setIndex(endIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	im.setIndex(endIndex);	  im.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	21	None	replace
57	[BUG]  [BUGGY]  im.setIndex(startIndex  +  1);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  im.setIndex(startIndex  +  1);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	im.setIndex(startIndex  +  1);	  im.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	21	None	replace
58	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  startIndex);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  startIndex);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  startIndex);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	51	None	replace
59	[BUG]  [BUGGY]  int  initialIndex  =  source.getIndex();  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  initialIndex  =  source.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  initialIndex  =  source.getIndex();	  int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  orphaned  case	65	None	replace
60	[BUG]  [BUGGY]  int  initialIndex  =  pos.getIndex();  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  initialIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  initialIndex  =  pos.getIndex();	  int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  orphaned  case	65	None	replace
61	[BUG]  [BUGGY]  int  initialIndex  =  im.getIndex();  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  initialIndex  =  im.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  initialIndex  =  im.getIndex();	  int    initialIndex    =    re.getIndex();    	non-compiled	[CE]  orphaned  case	65	None	replace
62	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(startIndex);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
63	[BUG]  [BUGGY]  switch(re.parseCharacter(c,  startIndex))  {  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(re.parseCharacter(c,  startIndex))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseCharacter(c,  startIndex))  {	  switch(re.parseCharacter(c))    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
64	[BUG]  [BUGGY]  switch(re.parseCharacter(c,  pos))  {  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(re.parseCharacter(c,  pos))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseCharacter(c,  pos))  {	  switch(re.parseCharacter(c))    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
65	[BUG]  [BUGGY]  switch(re.parseCharacter(c),  startIndex)  {  [CE]  ')'  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(re.parseCharacter(c),  startIndex)  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseCharacter(c),  startIndex)  {	  switch(re.parseCharacter(c))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
66	[BUG]  [BUGGY]  char  im  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  im  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  im  =  parseNextCharacter(source,  pos);	  char    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	30	None	replace
67	[BUG]  [BUGGY]  String  im  =  parseNextCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  String  im  =  parseNextCharacter(source,  pos);  return  null;  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	String  im  =  parseNextCharacter(source,  pos);  return  null;	  char    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	30	None	replace
68	[BUG]  [BUGGY]  char  im  =  parseNextCharacter(source,  pos);  return  this;  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  im  =  parseNextCharacter(source,  pos);  return  this;  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  im  =  parseNextCharacter(source,  pos);  return  this;	  char    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	30	None	replace
69	[BUG]  [BUGGY]  int  n  =  parseNextCharacter(source,  pos,  startIndex  +  1);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  n  =  parseNextCharacter(source,  pos,  startIndex  +  1);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  n  =  parseNextCharacter(source,  pos,  startIndex  +  1);	  int    n    =    parseNextCharacter(source,    pos,    startIndex);    	non-compiled	[CE]  orphaned  case	10	None	replace
70	[BUG]  [BUGGY]  char  n  =  parseNextCharacter(source,  pos,  startIndex);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  n  =  parseNextCharacter(source,  pos,  startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  n  =  parseNextCharacter(source,  pos,  startIndex);	  int    n    =    parseNextCharacter(source,    pos,    startIndex);    	non-compiled	[CE]  orphaned  case	10	None	replace
71	[BUG]  [BUGGY]  int  n  =  parseNextCharacter(source,  startIndex,  pos);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  n  =  parseNextCharacter(source,  startIndex,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  n  =  parseNextCharacter(source,  startIndex,  pos);	  int    n    =    parseNextCharacter(source,    pos,    startIndex);    	non-compiled	[CE]  orphaned  case	10	None	replace
72	[BUG]  [BUGGY]  switch(source.parseNextCharacter(re,  pos))  {  [CE]  cannot  find  symbol  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(source.parseNextCharacter(re,  pos))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source.parseNextCharacter(re,  pos))  {	  switch(re.parseNextCharacter(source,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
73	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex);  if(im!=  null)  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  startIndex);  if(im!=  null)  {  return  null;  }	  Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
74	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos);  if(c!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos);  if(c!=  null)  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos);  if(c!=  null)  {  return  null;  }	  Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
75	[BUG]  [BUGGY]  char  c  =  parseNextCharacter(source,  pos);  return  this;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  c  =  parseNextCharacter(source,  pos);  return  this;  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  c  =  parseNextCharacter(source,  pos);  return  this;	  char    c    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	29	None	replace
76	[BUG]  [BUGGY]  char  c  =  parsePreviousCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  c  =  parsePreviousCharacter(source,  pos);  return  null;  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  c  =  parsePreviousCharacter(source,  pos);  return  null;	  char    c    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	29	None	replace
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	41	24	add
78	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	41	24	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	41	26	add
80	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(startIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	41	26	add
81	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [CE]  cannot  find  symbol  endIndex  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(endIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	41	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	41	24	add
83	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	41	24	add
84	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(endIndex);  pos.setIndex(endIndex);  startIndex  =  parseNextCharacter(source,  pos);  [CE]  cannot  find  symbol  endIndex  [FE]            StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(endIndex);  pos.setIndex(endIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(endIndex);  pos.setIndex(endIndex);  startIndex  =  parseNextCharacter(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	41	None	add
85	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos);  return  this;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos);  return  this;  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos);  return  this;	  Number    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	28	None	replace
86	[BUG]  [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos);  return  null;  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parsePreviousCharacter(source,  pos);  return  null;	  Number    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	28	None	replace
87	[BUG]  [BUGGY]  Integer  im  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Integer  im  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Integer  im  =  parseNextCharacter(source,  pos);	  Integer    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	31	None	replace
88	[BUG]  [BUGGY]  Integer  im  =  parseNextCharacter(source,  pos);  return  this;  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Integer  im  =  parseNextCharacter(source,  pos);  return  this;  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Integer  im  =  parseNextCharacter(source,  pos);  return  this;	  Integer    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	31	None	replace
89	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex,  c);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex,  c);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  startIndex,  c);	  Number    im    =    parseNextCharacter(source,    pos,    c);    	non-compiled	[CE]  orphaned  case	61	None	replace
90	[BUG]  [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos,  c);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos,  c);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parsePreviousCharacter(source,  pos,  c);	  Number    im    =    parseNextCharacter(source,    pos,    c);    	non-compiled	[CE]  orphaned  case	61	None	replace
91	[BUG]  [BUGGY]  char  n  =  parseNextCharacter(source,  startIndex);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  n  =  parseNextCharacter(source,  startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  n  =  parseNextCharacter(source,  startIndex);	  char    n    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
92	[BUG]  [BUGGY]  char  n  =  parsePreviousCharacter(source,  pos);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  n  =  parsePreviousCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  n  =  parsePreviousCharacter(source,  pos);	  char    n    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
93	[BUG]  [BUGGY]  char  n  =  parseDecimalCharacter(source,  pos);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  n  =  parseDecimalCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  n  =  parseDecimalCharacter(source,  pos);	  char    n    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
94	[BUG]  [BUGGY]  Switch(re.parseCharacter(c,  startIndex))  {  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Switch(re.parseCharacter(c,  startIndex))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Switch(re.parseCharacter(c,  startIndex))  {	  Switch(re.parseCharacter(c))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
95	[BUG]  [BUGGY]  Switch(im.parseCharacter(c))  {  [CE]  ';'  expected  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Switch(im.parseCharacter(c))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Switch(im.parseCharacter(c))  {	  Switch(re.parseCharacter(c))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
96	[BUG]  [BUGGY]  Switch(re.parseCharacter(c),  startIndex)  {  [CE]  ';'  expected  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Switch(re.parseCharacter(c),  startIndex)  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Switch(re.parseCharacter(c),  startIndex)  {	  Switch(re.parseCharacter(c))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
97	[BUG]  [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parsePreviousCharacter(source,  pos);	  Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	52	None	replace
98	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  startIndex);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  startIndex);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  startIndex);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    im.parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	23	None	replace
99	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }	  pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  orphaned  case	12	None	replace
100	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  sign  =  [CE]  illegal  start  of  expression  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  sign  =  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  sign  =	  pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
101	[BUG]  [BUGGY]  switch(source.parseNextCharacter(pos,  c))  {  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(source.parseNextCharacter(pos,  c))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source.parseNextCharacter(pos,  c))  {	  switch(source.parseNextCharacter(pos,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
102	[BUG]  [BUGGY]  switch(re.parseNextCharacter(pos,  source))  {  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(re.parseNextCharacter(pos,  source))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseNextCharacter(pos,  source))  {	  switch(source.parseNextCharacter(pos,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
103	[BUG]  [BUGGY]  switch(im.parseNextCharacter(pos,  source))  {  [CE]  cannot  find  symbol  im  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(im.parseNextCharacter(pos,  source))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(im.parseNextCharacter(pos,  source))  {	  switch(source.parseNextCharacter(pos,    pos))    {    	non-compiled	[CE]  cannot  find  symbol  im	13	None	replace
104	[BUG]  [BUGGY]  switch(im.parseCharacter(source))  {  [CE]  cannot  find  symbol  im  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(im.parseCharacter(source))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(im.parseCharacter(source))  {	  switch(source.parseCharacter(c))    {    	non-compiled	[CE]  cannot  find  symbol  im	32	None	replace
105	[BUG]  [BUGGY]  switch(c.parseCharacter(source))  {  [CE]  char  cannot  be  dereferenced  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(c.parseCharacter(source))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(c.parseCharacter(source))  {	  switch(source.parseCharacter(c))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	32	None	replace
106	[BUG]  [BUGGY]  RelativeFormat.instance.setIndex(endIndex);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  RelativeFormat.instance.setIndex(endIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	RelativeFormat.instance.setIndex(endIndex);	  RelativeFormat.instance.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	54	None	replace
107	[BUG]  [BUGGY]  RelativeFormat.instance.setIndex(startIndex  +  1);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  RelativeFormat.instance.setIndex(startIndex  +  1);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	RelativeFormat.instance.setIndex(startIndex  +  1);	  RelativeFormat.instance.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	54	None	replace
108	[BUG]  [BUGGY]  RelativeFormat.instance.setIndex(startIndex  -  1);  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  RelativeFormat.instance.setIndex(startIndex  -  1);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	RelativeFormat.instance.setIndex(startIndex  -  1);	  RelativeFormat.instance.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	54	None	replace
109	[BUG]  [BUGGY]  RelativeFormat.instance.setIndex(initialIndex);  [CE]  orphaned  case  [FE]                          StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  RelativeFormat.instance.setIndex(initialIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	RelativeFormat.instance.setIndex(initialIndex);	  RelativeFormat.instance.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	54	None	replace
110	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;	          pos.setIndex(startIndex);    int    startIndex    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	44	None	replace
111	[BUG]  [BUGGY]  pos.setIndex(endIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(endIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;	          pos.setIndex(startIndex);    int    startIndex    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	44	None	replace
112	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;  }	          pos.setIndex(startIndex);    int    startIndex    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	44	None	replace
113	[BUG]  [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(endIndex);  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(endIndex);  pos.setIndex(endIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex);  pos.setIndex(endIndex);	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	36	None	replace
114	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(endIndex);  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(endIndex);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(endIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	36	None	replace
115	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(initialIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	36	None	replace
116	[BUG]  [BUGGY]  pos.setIndex(endIndex);  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(endIndex);  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex);  parseNextCharacter(source,  pos);	          pos.setIndex(startIndex);    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	60	None	replace
117	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex);  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  parseNextCharacter(source,  pos);	          pos.setIndex(startIndex);    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	60	None	replace
118	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  }  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  }	          pos.setIndex(startIndex);    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	60	None	replace
119	[BUG]  [BUGGY]  pos.setIndex(startIndex);  parseNextCharacter(source,  c);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(startIndex);  parseNextCharacter(source,  c);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(startIndex);  parseNextCharacter(source,  c);	          pos.setIndex(startIndex);    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	60	None	replace
120	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex,  pos);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  startIndex,  pos);	  Number    im    =    parseNextCharacter(source,    startIndex);    	non-compiled	[CE]  orphaned  case	2	None	replace
121	[BUG]  [BUGGY]  Number  im  =  parseLastCharacter(source,  pos);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseLastCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseLastCharacter(source,  pos);	  Number    im    =    parseNextCharacter(source,    startIndex);    	non-compiled	[CE]  orphaned  case	2	None	replace
122	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	  if(c    ==    DEFAULT_IMPLEMENTS)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	24	None	replace
123	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleVal  [CE]  ')'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleVal  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleVal	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValu    	non-compiled	[CE]  ')'  expected	56	None	replace
124	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValu  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValu  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValu    	non-compiled	[CE]  ')'  expected	56	None	replace
125	[BUG]  [BUGGY]  switch(source.parseNextCharacter(pos,  startIndex))  {  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(source.parseNextCharacter(pos,  startIndex))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source.parseNextCharacter(pos,  startIndex))  {	  switch(source.parseNextCharacter(pos,    source))    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
126	[BUG]  [BUGGY]  int  n  =  parsePreviousCharacter(source,  pos);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  n  =  parsePreviousCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  n  =  parsePreviousCharacter(source,  pos);	  int    n    =    parseNextCharacter(source,    startIndex);    	non-compiled	[CE]  orphaned  case	8	None	replace
127	[BUG]  [BUGGY]  switch(re.parseDecimalCharacter(c))  {  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(re.parseDecimalCharacter(c))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseDecimalCharacter(c))  {	  switch(defulT_IMAGINARY_CHARACTER.parseCharacter(c))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
128	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Switch(source.parseCharacter(c))  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Switch(source.parseCharacter(c))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Switch(source.parseCharacter(c))  {	  Switch(source.parseCharacter(c))    {    	non-compiled	[CE]  ';'  expected	48	None	replace
129	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  switch(source.parseCharacter(c))  {  [CE]  illegal  start  of  expression  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  switch(source.parseCharacter(c))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  switch(source.parseCharacter(c))  {	  Switch(source.parseCharacter(c))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
130	[BUG]  [BUGGY]  im.setStartIndex(startIndex);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  im.setStartIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	im.setStartIndex(startIndex);	  im.setIndex(initialIndex);    	non-compiled	[CE]  orphaned  case	27	None	replace
131	[BUG]  [BUGGY]  pos.setIndex(endIndex);  int  startIndex  =  pos.getIndex(startIndex);  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(endIndex);  int  startIndex  =  pos.getIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex);  int  startIndex  =  pos.getIndex(startIndex);	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex(startIndex);    	non-compiled	[CE]  orphaned  case	58	None	replace
132	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  int  startIndex  =  pos.getIndex(startIndex);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex);  int  startIndex  =  pos.getIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  int  startIndex  =  pos.getIndex(startIndex);	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex(startIndex);    	non-compiled	[CE]  orphaned  case	58	None	replace
133	[BUG]  [BUGGY]  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex(endIndex);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex(endIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex(endIndex);	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex(startIndex);    	non-compiled	[CE]  orphaned  case	58	None	replace
134	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  int  startIndex  =  pos.getIndex(initialIndex);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex);  int  startIndex  =  pos.getIndex(initialIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  int  startIndex  =  pos.getIndex(initialIndex);	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex(startIndex);    	non-compiled	[CE]  orphaned  case	58	None	replace
135	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTS  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTS  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMPLEMENTS  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c    ==    DEFAULT_IMPLEMENTS)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	17	None	replace
136	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [timeout]  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[timeout]	46	None	replace
137	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	46	None	replace
138	[BUG]  [BUGGY]  int  n  =  parseNextCharacter(source,  startIndex,  sign);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  n  =  parseNextCharacter(source,  startIndex,  sign);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  n  =  parseNextCharacter(source,  startIndex,  sign);	  int    n    =    parseNextCharacter(source,    pos,    sign);    	non-compiled	[CE]  orphaned  case	66	None	replace
139	[BUG]  [BUGGY]  char  n  =  parseNextCharacter(source,  pos,  sign);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  n  =  parseNextCharacter(source,  pos,  sign);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  n  =  parseNextCharacter(source,  pos,  sign);	  int    n    =    parseNextCharacter(source,    pos,    sign);    	non-compiled	[CE]  orphaned  case	66	None	replace
140	[BUG]  [BUGGY]  int  n  =  parsePreviousCharacter(source,  pos,  sign);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  n  =  parsePreviousCharacter(source,  pos,  sign);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  n  =  parsePreviousCharacter(source,  pos,  sign);	  int    n    =    parseNextCharacter(source,    pos,    sign);    	non-compiled	[CE]  orphaned  case	66	None	replace
141	[BUG]  [BUGGY]  pos.setIndex(endIndex  +  1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(endIndex  +  1);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex  +  1);	  pos.setIndex(startIndex    +    1);    	non-compiled	[CE]  orphaned  case	7	None	replace
142	[BUG]  [BUGGY]  pos.setIndex(initialIndex  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex  +  1);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex  +  1);	  pos.setIndex(startIndex    +    1);    	non-compiled	[CE]  orphaned  case	7	None	replace
143	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  int  startIndex  =  pos.getIndex();  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(initialIndex);  int  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  int  startIndex  =  pos.getIndex();	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	57	None	replace
144	[BUG]  [BUGGY]  pos.setIndex(endIndex);  int  startIndex  =  pos.getIndex();  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(endIndex);  int  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex);  int  startIndex  =  pos.getIndex();	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	57	None	replace
145	[BUG]  [BUGGY]  int  startIndex  =  pos.getIndex();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  startIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  startIndex  =  pos.getIndex();	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	57	None	replace
146	[BUG]  [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c!=    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
147	[BUG]  [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos,  sign);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos,  sign);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parsePreviousCharacter(source,  pos,  sign);	  Number    im    =    parseNextCharacter(source,    pos,    sign);    	non-compiled	[CE]  orphaned  case	3	None	replace
148	[BUG]  [BUGGY]  Switch(source.parseNextCharacter(pos,  pos))  {  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Switch(source.parseNextCharacter(pos,  pos))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Switch(source.parseNextCharacter(pos,  pos))  {	  switch(pos.parseNextCharacter(source,    pos))    {    	non-compiled	[CE]  ';'  expected	68	None	replace
149	[BUG]  [BUGGY]  switch(source,  parseNextCharacter(pos,  pos))  {  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(source,  parseNextCharacter(pos,  pos))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source,  parseNextCharacter(pos,  pos))  {	  switch(pos.parseNextCharacter(source,    pos))    {    	non-compiled	[CE]  ')'  expected	68	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	35	24	add
151	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	35	24	add
152	[BUG]  [BUGGY]  pos.setIndex(startIndex  +  sign);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(startIndex  +  sign);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(startIndex  +  sign);	  pos.setIndex(startIndex    +    1);    	non-compiled	[CE]  orphaned  case	7	None	replace
153	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  }  else  {  sign  =  0;  }  [CE]  orphaned  case  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  }  else  {  sign  =  0;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  }  else  {  sign  =  0;  }	          pos.setIndex(startIndex);    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	60	None	replace
154	[BUG]  [BUGGY]  switch(source.parseNextCharacter(source,  pos))  {  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(source.parseNextCharacter(source,  pos))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source.parseNextCharacter(source,  pos))  {	  switch(source.parseNextCharacter(pos,    source))    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
155	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  else  {  sign  =  0;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  else  {  sign  =  0;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  else  {  sign  =  0;  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	39	None	replace
156	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	39	None	replace
157	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(startIndex);    return    null;    }    	non-compiled	[CE]  orphaned  case	64	None	replace
158	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(startIndex);    return    null;    }    	non-compiled	[CE]  orphaned  case	64	None	replace
159	[BUG]  [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parsePreviousCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	  Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
160	[BUG]  [BUGGY]  Node  im  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Node  im  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Node  im  =  parseNextCharacter(source,  pos);	  Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	52	None	replace
161	[BUG]  [BUGGY]  Number  im  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseAndIgnoreWhitespace(source,  pos);	  Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	52	None	replace
162	[BUG]  [BUGGY]  char  n  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  n  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  n  =  parseAndIgnoreWhitespace(source,  pos);	  char    n    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
163	[BUG]  [BUGGY]  char  n  =  parseLastCharacter(source,  pos);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  n  =  parseLastCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  n  =  parseLastCharacter(source,  pos);	  char    n    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
164	[BUG]  [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parsePreviousCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parsePreviousCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);	  Number    im    =    parseNextCharacter(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  orphaned  case	62	None	replace
165	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()	  if(c    ==    DEFAULT_IMPLEMENTAL_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	18	None	replace
166	[BUG]  [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c    >=    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
167	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	36	None	replace
168	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  return  null;  }  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  return  null;  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	36	None	replace
169	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  sign  =  0;  }  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  sign  =  0;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  sign  =  0;  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	36	None	replace
170	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex  +  1);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex  +  1);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  startIndex  +  1);	  Number    im    =    parseNextCharacter(source,    startIndex);    	non-compiled	[CE]  orphaned  case	2	None	replace
171	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()	  if(c!=    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	51	None	replace
172	[BUG]  [BUGGY]  Null  re  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Null  re  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Null  re  =  parseNextCharacter(source,  pos);	  Null    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	72	None	replace
173	[BUG]  [BUGGY]  Switch(im.parseCharacter(source))  {  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Switch(im.parseCharacter(source))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Switch(im.parseCharacter(source))  {	  Switch(source.parseCharacter(c))    {    	non-compiled	[CE]  ';'  expected	48	None	replace
174	[BUG]  [BUGGY]  char  im  =  parsePreviousCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  im  =  parsePreviousCharacter(source,  pos);  return  null;  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  im  =  parsePreviousCharacter(source,  pos);  return  null;	  char    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	30	None	replace
175	[BUG]  [BUGGY]  pos.setIndex(startIndex);  int  endIndex  =  pos.getIndex();  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(startIndex);  int  endIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(startIndex);  int  endIndex  =  pos.getIndex();	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	57	None	replace
176	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(startIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }	  pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  orphaned  case	12	None	replace
177	[BUG]  [BUGGY]  if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(startIndex  >=  -1)  {  pos.setIndex(initialIndex);  return  null;  }	  pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  orphaned  case	12	None	replace
178	[BUG]  [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(startIndex);  return  null;  }  [CE]  orphaned  case  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(startIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(startIndex);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(startIndex  <  0)  {  pos.setIndex(initialIndex);  return  null;  }  else  {  pos.setIndex(startIndex);  return  null;  }	  pos.setIndex(initialIndex);    return    null;    	non-compiled	[CE]  orphaned  case	12	None	replace
179	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  int  startIndex  =  pos.getIndex();  parseNextCharacter(source,  pos);  [CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  int  startIndex  =  pos.getIndex();  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        parseNextCharacter(source,    pos);    int  startIndex  =  pos.getIndex();  parseNextCharacter(source,  pos);	  	non-compiled	[CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)	59	None	add
180	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()	  if(c    ==    DEFAULT_IMPLEMENTS)    {    Number    im    =    im.parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	22	None	replace
181	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [CE]  ')'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue()	  if(c!=    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    im.parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	23	None	replace
182	[BUG]  [BUGGY]  ImmutableFormat  re  =  new  ImmutableFormat(deFAULT_IMAGINARY_CHARACTER,  c);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  ImmutableFormat  re  =  new  ImmutableFormat(deFAULT_IMAGINARY_CHARACTER,  c);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	ImmutableFormat  re  =  new  ImmutableFormat(deFAULT_IMAGINARY_CHARACTER,  c);	  im.setIndex(initialIndex);    	non-compiled	[CE]  orphaned  case	27	None	replace
183	[BUG]  [BUGGY]  pos.setEndIndex(startIndex);  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setEndIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setEndIndex(startIndex);	  pos.setIndex(initialIndex);    	non-compiled	[CE]  orphaned  case	6	None	replace
184	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  endIndex  =  pos.getIndex();  [CE]  cannot  find  symbol  endIndex  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  endIndex  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);  pos.setIndex(startIndex);  endIndex  =  pos.getIndex();	  	non-compiled	[CE]  cannot  find  symbol  endIndex	38	None	add
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  sign  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);  pos.setIndex(startIndex);  sign  =  pos.getIndex();	  	compilable	  [FE]  AssertionFailedError  	38	24	add
186	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  sign  =  pos.getIndex();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  pos.setIndex(startIndex);  sign  =  pos.getIndex();  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);  pos.setIndex(startIndex);  sign  =  pos.getIndex();	  	compilable	  [FE]  AssertionFailedError  	38	24	add
187	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  else  {  sign  =  0;  }  [CE]  orphaned  case  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  else  {  sign  =  0;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  else  {  sign  =  0;  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	42	None	replace
188	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  [CE]  orphaned  case  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	42	None	replace
189	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	42	None	replace
190	[BUG]  [BUGGY]  Switch(re.parseNextCharacter(source,  pos))  {  [CE]  ';'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Switch(re.parseNextCharacter(source,  pos))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Switch(re.parseNextCharacter(source,  pos))  {	  Switch(re.parseCharacter(c))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
191	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(sign);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(sign);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(startIndex);  pos.setIndex(sign);	          pos.setIndex(startIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  orphaned  case	40	None	replace
192	[BUG]  [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(c);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(startIndex);  pos.setIndex(c);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(startIndex);  pos.setIndex(c);	          pos.setIndex(startIndex);    pos.setIndex(endIndex);    	non-compiled	[CE]  orphaned  case	40	None	replace
193	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValu  [CE]  ')'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValu  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValu	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValu    	non-compiled	[CE]  ')'  expected	56	None	replace
194	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValu    	non-compiled	[CE]  ')'  expected	56	None	replace
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  sign  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  sign  =  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	41	24	add
196	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  sign  =  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  pos.setIndex(startIndex);  sign  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(startIndex);  pos.setIndex(startIndex);  sign  =  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	41	24	add
197	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c!=    DEFAULT_IMAGINARY_CHARACTER    &&    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	55	None	replace
198	[BUG]  [BUGGY]  switch(source.parseNextCharacter(startIndex,  pos))  {  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(source.parseNextCharacter(startIndex,  pos))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source.parseNextCharacter(startIndex,  pos))  {	  switch(source.parseNextCharacter(pos,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
199	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  }  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  }	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex();    pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	37	None	replace
200	[BUG]  [BUGGY]  Number  im  =  parseAndIgnoreWhitespace(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseAndIgnoreWhitespace(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseAndIgnoreWhitespace(source,  pos);  if(im!=  null)  {  return  null;  }	  Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	25	None	replace
201	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  c);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  c);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  c);	  Number    im    =    parseNextCharacter(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  orphaned  case	62	None	replace
202	[BUG]  [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  ParsePosition  pos  =  parseNextPosition(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    parseNextCharacter(source,  pos);  pos.setIndex(startIndex);  ParsePosition  pos  =  parseNextPosition(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        parseNextCharacter(source,    pos);    pos.setIndex(startIndex);  ParsePosition  pos  =  parseNextPosition(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parse(String,ParsePosition)	59	None	add
203	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMPLEMENTAL_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMPLEMENTAL_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMPLEMENTAL_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c    ==    DEFAULT_IMPLEMENTAL_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	18	None	replace
204	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  }  else  {  pos.setIndex(initialIndex);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	36	None	replace
205	[BUG]  [BUGGY]  RelativeFormat.instance  =  realFormat.createFormat(DEFAULT_IMAGINARY_CHARACTER,  c);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  RelativeFormat.instance  =  realFormat.createFormat(DEFAULT_IMAGINARY_CHARACTER,  c);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	RelativeFormat.instance  =  realFormat.createFormat(DEFAULT_IMAGINARY_CHARACTER,  c);	  RelativeFormat.instance.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	54	None	replace
206	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(initialIndex);  return  null;  }	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    pos.setIndex(startIndex);    return    null;    }    	non-compiled	[CE]  orphaned  case	63	None	replace
207	[BUG]  [BUGGY]  im.setEndIndex(startIndex);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  im.setEndIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	im.setEndIndex(startIndex);	  im.setIndex(initialIndex);    	non-compiled	[CE]  orphaned  case	27	None	replace
208	[BUG]  [BUGGY]  char  c  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  c  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  c  =  parseAndIgnoreWhitespace(source,  pos);	  char    c    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	29	None	replace
209	[BUG]  [BUGGY]  int  n  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  n  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  n  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);	  int    n    =    parseNextCharacter(source,    pos,    sign);    	non-compiled	[CE]  orphaned  case	66	None	replace
210	[BUG]  [BUGGY]  int  n  =  parseNextCharacter(source,  pos,  sign,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  n  =  parseNextCharacter(source,  pos,  sign,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  n  =  parseNextCharacter(source,  pos,  sign,  DEFAULT_IMAGINARY_CHARACTER);	  int    n    =    parseNextCharacter(source,    pos,    sign);    	non-compiled	[CE]  orphaned  case	66	None	replace
211	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  }  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  }	          pos.setIndex(startIndex);    int    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	43	None	replace
212	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  else  {  return  null;  }  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  else  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  }  else  {  return  null;  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    pos.getIndex();    	non-compiled	[CE]  orphaned  case	39	None	replace
213	[BUG]  [BUGGY]  int  startIndex  =  pos.getIndex(startIndex);  [CE]  orphaned  case  [FE]          AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  int  startIndex  =  pos.getIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  startIndex  =  pos.getIndex(startIndex);	          pos.setIndex(startIndex);    int    startIndex    =    pos.getIndex(startIndex);    	non-compiled	[CE]  orphaned  case	58	None	replace
214	[BUG]  [BUGGY]  Integer  im  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  orphaned  case  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Integer  im  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Integer  im  =  parseAndIgnoreWhitespace(source,  pos);	  Integer    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	31	None	replace
215	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(Re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(Re.doubleValue(),  0.0);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(Re.doubleValue(),  0.0);  }	  Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	52	None	replace
216	[BUG]  [BUGGY]  switch(re.parseFormatter(c))  {  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(re.parseFormatter(c))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseFormatter(c))  {	  switch(defulT_IMAGINARY_CHARACTER.parseCharacter(c))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
217	[BUG]  [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c    ==    DEFAULT_IMPLEMENTS)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	17	None	replace
218	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c    ==    DEFAULT_IMPLEMENTS)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	17	None	replace
219	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  symbol,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  symbol,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  symbol,  DEFAULT_IMAGINARY_CHARACTER);	  Number    im    =    parseNextCharacter(source,    pos,    symbol);    	non-compiled	[CE]  orphaned  case	4	None	replace
220	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  sign,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  sign,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  sign,  DEFAULT_IMAGINARY_CHARACTER);	  Number    im    =    parseNextCharacter(source,    pos,    sign);    	non-compiled	[CE]  orphaned  case	3	None	replace
221	[BUG]  [BUGGY]  if(c  >  0)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  >  0)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  >  0)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	  if(c    >=    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	70	None	replace
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	41	26	add
223	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(initialIndex);  pos.setIndex(startIndex);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(initialIndex);  pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	41	26	add
224	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  startIndex  =  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	41	24	add
225	[BUG]  [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  startIndex  =  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]          pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	                pos.setIndex(startIndex);        pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    pos.setIndex(initialIndex);  pos.setIndex(initialIndex);  startIndex  =  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	41	24	add
226	[BUG]  [BUGGY]  char  im  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  im  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  im  =  parseAndIgnoreWhitespace(source,  pos);	  char    im    =    parseNextCharacter(source,    pos);    return    null;    	non-compiled	[CE]  orphaned  case	30	None	replace
227	[BUG]  [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	  if(c    ==    DEFAULT_IMPLEMENTS)    {    Number    im    =    im.parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	22	None	replace
228	[BUG]  [BUGGY]  switch(re.parseCharacter(c),  pos)  {  [CE]  ')'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(re.parseCharacter(c),  pos)  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseCharacter(c),  pos)  {	  switch(re.parseCharacter(c))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
229	[BUG]  [BUGGY]  pos.setIndex(Integer.toString(c));  [CE]  orphaned  case  [FE]        AssertionFailedError      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  pos.setIndex(Integer.toString(c));  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(Integer.toString(c));	  pos.setIndex(Integer.toHexString(c));    	non-compiled	[CE]  orphaned  case	67	None	replace
230	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(Re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(Re.doubleValue(),  0.0);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(Re.doubleValue(),  0.0);  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	51	None	replace
231	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	  if(c!=    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	45	None	replace
232	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  [CE]  orphaned  case  [FE]    StringIndexOutOfBoundsException    [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  }	          pos.setIndex(startIndex);    pos.setIndex(startIndex);    startIndex    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	42	None	replace
233	[BUG]  [BUGGY]  char  re  =  source.parseCharacter(c);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  char  re  =  source.parseCharacter(c);  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  re  =  source.parseCharacter(c);	  Switch(source.parseCharacter(c))    {    	non-compiled	[CE]  orphaned  case	48	None	replace
234	[BUG]  [BUGGY]  Character.isDigit(c)||!Character.isDigit(c)||!Character.isDigit(c)||!Character.isUpperCase(c))  {  [CE]  not  a  statement  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Character.isDigit(c)||!Character.isDigit(c)||!Character.isDigit(c)||!Character.isUpperCase(c))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Character.isDigit(c)||!Character.isDigit(c)||!Character.isDigit(c)||!Character.isUpperCase(c))  {	  Switch(source.parseCharacter(c))    {    	non-compiled	[CE]  not  a  statement	48	None	replace
235	[BUG]  [BUGGY]  switch(re.parseNextCharacter(pos,  pos))  {  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  switch(re.parseNextCharacter(pos,  pos))  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseNextCharacter(pos,  pos))  {	  switch(source.parseNextCharacter(pos,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
236	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(endIndex);  return  null;  }  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(endIndex);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(endIndex);  return  null;  }	  pos.setIndex(endIndex);    return    null;    	non-compiled	[CE]  orphaned  case	11	None	replace
237	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(endIndex);  return  null;  }  [CE]  orphaned  case  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(endIndex);  return  null;  }  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(endIndex);  return  null;  }	  pos.setIndex(endIndex);    return    null;    	non-compiled	[CE]  orphaned  case	11	None	replace
238	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  c,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  c,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  c,  DEFAULT_IMAGINARY_CHARACTER);	  Number    im    =    parseNextCharacter(source,    pos,    c);    	non-compiled	[CE]  orphaned  case	61	None	replace
239	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  c,  sign);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  c,  sign);  [BUGGY]      switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  c,  sign);	  Number    im    =    parseNextCharacter(source,    pos,    c);    	non-compiled	[CE]  orphaned  case	61	None	replace
240	[BUG]  [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  <  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException      [CONTEXT]        pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;      [BUGGY]  if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  <  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]      case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  >  DEFAULT_IMAGINARY_CHARACTER  ||  c  <  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c    >=    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
