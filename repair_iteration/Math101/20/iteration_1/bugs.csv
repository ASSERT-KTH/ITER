bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    pos.setIndex(startIndex);  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	    pos.setIndex(startIndex);		compilable	  [FE]  AssertionFailedError  	40	24	add
2	[BUG]  [BUGGY]    pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    pos.setIndex(startIndex);  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	    pos.setIndex(startIndex);		compilable	  [FE]  AssertionFailedError  	40	24	add
3	[BUG]  [BUGGY]    int  n  =  parseNextCharacter(source,  pos);  [CE]  variable  n  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    int  n  =  parseNextCharacter(source,  pos);  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	    int  n  =  parseNextCharacter(source,  pos);		non-compiled	[CE]  variable  n  is  already  defined  in  method  parse(String,ParsePosition)	40	None	add
4	[BUG]  [BUGGY]    re.setIndex(startIndex);  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    re.setIndex(startIndex);  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	    re.setIndex(startIndex);		non-compiled	[CE]  cannot  find  symbol	40	None	add
5	[BUG]  [BUGGY]    pos.setIndex(startIndex);  return  null;  [CE]  unreachable  statement  [FE]          StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    pos.setIndex(startIndex);  return  null;  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	    pos.setIndex(startIndex);  return  null;		non-compiled	[CE]  unreachable  statement	40	None	add
6	[BUG]  [BUGGY]    re.setIndex(initialIndex);  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    re.setIndex(initialIndex);  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	    re.setIndex(initialIndex);		non-compiled	[CE]  cannot  find  symbol	40	None	add
7	[BUG]  [BUGGY]  switch(im.parseNextCharacter(source,  pos))  {  [CE]  cannot  find  symbol  im  [FE]    StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]  switch(im.parseNextCharacter(source,  pos))  {  [BUGGY]  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(im.parseNextCharacter(source,  pos))  {	switch  (c)  {  	non-compiled	[CE]  cannot  find  symbol  im	39	None	replace
8	[BUG]  [BUGGY]  switch(im.parseCharacter(c))  {  [CE]  cannot  find  symbol  im  [FE]      StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]  switch(im.parseCharacter(c))  {  [BUGGY]  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(im.parseCharacter(c))  {	switch  (c)  {  	non-compiled	[CE]  cannot  find  symbol  im	39	None	replace
9	[BUG]  [BUGGY]    Number  im  =  parseNextCharacter(source,  pos);  [CE]  incompatible  types  [FE]    StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    Number  im  =  parseNextCharacter(source,  pos);  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	    Number  im  =  parseNextCharacter(source,  pos);		non-compiled	[CE]  incompatible  types	40	None	add
10	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]    StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {	switch  (c)  {  	non-compiled	[CE]  orphaned  case	39	None	replace
11	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]      StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {	switch  (c)  {  	non-compiled	[CE]  orphaned  case	39	None	replace
12	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c!=  DEFAULT_IMAGINARY_CHARACTER)  {	switch  (c)  {  	non-compiled	[CE]  orphaned  case	39	None	replace
13	[BUG]  [BUGGY]    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  illegal  start  of  expression  [FE]    StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }		non-compiled	[CE]  illegal  start  of  expression	40	None	add
14	[BUG]  [BUGGY]    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  illegal  start  of  expression  [FE]      StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }		non-compiled	[CE]  illegal  start  of  expression	40	None	add
15	[BUG]  [BUGGY]    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  return  null;  }  [CE]  incomparable  types:  char  and  String  [FE]        StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  return  null;  }  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  return  null;  }		non-compiled	[CE]  incomparable  types:  char  and  String	40	None	add
16	[BUG]  [BUGGY]    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  illegal  start  of  expression  [FE]          StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]  switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	    if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }		non-compiled	[CE]  illegal  start  of  expression	40	None	add
17	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]    StringIndexOutOfBoundsException  [CONTEXT]    pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {	switch  (c)  {  	non-compiled	[CE]  orphaned  case	39	None	replace
