bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  startIndex);  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  startIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  startIndex);	      Number    im    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
2	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Number  im  =  parseNextCharacter(source,  startIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  startIndex);	      Number    im    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
3	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  sign);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  sign);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  sign);	      Number    im    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
4	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  symbol);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  symbol);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  symbol);	      Number    im    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
5	[BUG]  [BUGGY]  pos.setIndex(endIndex);  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  pos.setIndex(endIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex);	      pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	2	None	replace
6	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  [CE]  orphaned  case  [FE]      AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  pos.setIndex(initialIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);	      pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	2	None	replace
7	[BUG]  [BUGGY]  pos.setIndex(startIndex  +  1);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  pos.setIndex(startIndex  +  1);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(startIndex  +  1);	      pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	2	None	replace
8	[BUG]  [BUGGY]  int  n  =  parseNextCharacter(source,  startIndex);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  int  n  =  parseNextCharacter(source,  startIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  n  =  parseNextCharacter(source,  startIndex);	      int    n    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	3	None	replace
9	[BUG]  [BUGGY]  char  n  =  parseNextCharacter(source,  pos);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  char  n  =  parseNextCharacter(source,  pos);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  n  =  parseNextCharacter(source,  pos);	      int    n    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	3	None	replace
10	[BUG]  [BUGGY]  int  n  =  parseNextCharacter(source,  pos,  startIndex);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  int  n  =  parseNextCharacter(source,  pos,  startIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  n  =  parseNextCharacter(source,  pos,  startIndex);	      int    n    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	3	None	replace
11	[BUG]  [BUGGY]  pos.setIndex(endIndex);  return  null;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  pos.setIndex(endIndex);  return  null;  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(endIndex);  return  null;	      pos.setIndex(startIndex);    return    null;    	non-compiled	[CE]  orphaned  case	5	None	replace
12	[BUG]  [BUGGY]  pos.setIndex(initialIndex);  return  null;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  pos.setIndex(initialIndex);  return  null;  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(initialIndex);  return  null;	      pos.setIndex(startIndex);    return    null;    	non-compiled	[CE]  orphaned  case	5	None	replace
13	[BUG]  [BUGGY]  switch(source.parseNextCharacter(pos,  pos))  {  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  switch(source.parseNextCharacter(pos,  pos))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source.parseNextCharacter(pos,  pos))  {	  switch(im.parseNextCharacter(source,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
14	[BUG]  [BUGGY]  switch(c.parseNextCharacter(source,  pos))  {  [CE]  char  cannot  be  dereferenced  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  switch(c.parseNextCharacter(source,  pos))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(c.parseNextCharacter(source,  pos))  {	  switch(im.parseNextCharacter(source,    pos))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	7	None	replace
15	[BUG]  [BUGGY]  switch(source.parseNextCharacter(c,  pos))  {  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  switch(source.parseNextCharacter(c,  pos))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source.parseNextCharacter(c,  pos))  {	  switch(im.parseNextCharacter(source,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
16	[BUG]  [BUGGY]  switch(re.parseNextCharacter(source,  pos))  {  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  switch(re.parseNextCharacter(source,  pos))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseNextCharacter(source,  pos))  {	  switch(im.parseNextCharacter(source,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
17	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	13	None	replace
18	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTAL_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTAL_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMPLEMENTAL_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	13	None	replace
19	[BUG]  [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  >=  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c!=    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
20	[BUG]  [BUGGY]  re.setIndex(endIndex);  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  re.setIndex(endIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	re.setIndex(endIndex);	      re.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	4	None	replace
21	[BUG]  [BUGGY]  im.setIndex(startIndex);  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  im.setIndex(startIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	im.setIndex(startIndex);	      re.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	4	None	replace
22	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    im.parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	14	None	replace
23	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    im.parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	14	None	replace
24	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMPLEMENTS)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
25	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
26	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	11	None	replace
27	[BUG]  [BUGGY]  im.setIndex(initialIndex);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  im.setIndex(initialIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	im.setIndex(initialIndex);	      re.setIndex(initialIndex);    	non-compiled	[CE]  orphaned  case	6	None	replace
28	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Number  im  =  parseNextCharacter(source,  pos);  return  null;  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos);  return  null;	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    return    null;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
29	[BUG]  [BUGGY]  char  c  =  parseNextCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  char  c  =  parseNextCharacter(source,  pos);  return  null;  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  c  =  parseNextCharacter(source,  pos);  return  null;	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    return    null;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
30	[BUG]  [BUGGY]  char  im  =  parseNextCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  char  im  =  parseNextCharacter(source,  pos);  return  null;  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	char  im  =  parseNextCharacter(source,  pos);  return  null;	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    return    null;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
31	[BUG]  [BUGGY]  Integer  im  =  parseNextCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]                  StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Integer  im  =  parseNextCharacter(source,  pos);  return  null;  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Integer  im  =  parseNextCharacter(source,  pos);  return  null;	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    return    null;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
32	[BUG]  [BUGGY]  switch(source.parseCharacter(c))  {  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  switch(source.parseCharacter(c))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source.parseCharacter(c))  {	  switch(im.parseCharacter(c))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
33	[BUG]  [BUGGY]  switch(re.parseCharacter(c))  {  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  switch(re.parseCharacter(c))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(re.parseCharacter(c))  {	  switch(im.parseCharacter(c))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
34	[BUG]  [BUGGY]  switch(c.parseCharacter(c))  {  [CE]  char  cannot  be  dereferenced  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  switch(c.parseCharacter(c))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(c.parseCharacter(c))  {	  switch(im.parseCharacter(c))    {    	non-compiled	[CE]  char  cannot  be  dereferenced	8	None	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	        pos.setIndex(startIndex);    pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	1	24	add
36	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	        pos.setIndex(startIndex);    pos.setIndex(startIndex);	  	compilable	  [FE]  AssertionFailedError  	1	24	add
37	[BUG]  [BUGGY]      pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  [CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	        pos.setIndex(startIndex);    int  startIndex  =  pos.getIndex();  pos.setIndex(startIndex);	  	non-compiled	[CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)	1	None	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	        pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();	  	compilable	  [FE]  AssertionFailedError  	1	24	add
39	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  pos.getIndex();  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	        pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  pos.getIndex();	  	compilable	  [FE]  AssertionFailedError  	1	24	add
40	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(endIndex);  [CE]  cannot  find  symbol  endIndex  [FE]          AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(endIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	        pos.setIndex(startIndex);    pos.setIndex(endIndex);	  	non-compiled	[CE]  cannot  find  symbol  endIndex	1	None	add
41	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	        pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
42	[BUG]  [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [FE]  StringIndexOutOfBoundsException  [FE]            AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	        pos.setIndex(startIndex);    pos.setIndex(startIndex);  startIndex  =  parseNextCharacter(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
43	[BUG]  [BUGGY]      pos.setIndex(startIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  [CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	        pos.setIndex(startIndex);    int  startIndex  =  parseNextCharacter(source,  pos);	  	non-compiled	[CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)	1	None	add
44	[BUG]  [BUGGY]      pos.setIndex(startIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;  [CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  int  startIndex  =  parseNextCharacter(source,  pos);  return  null;  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	        pos.setIndex(startIndex);    int  startIndex  =  parseNextCharacter(source,  pos);  return  null;	  	non-compiled	[CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)	1	None	add
45	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
46	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
47	[BUG]  [BUGGY]  switch(source.parseNextCharacter(pos,  source))  {  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  switch(source.parseNextCharacter(pos,  source))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(source.parseNextCharacter(pos,  source))  {	  switch(im.parseNextCharacter(source,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
48	[BUG]  [BUGGY]  Switch(source.parseCharacter(c))  {  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Switch(source.parseCharacter(c))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Switch(source.parseCharacter(c))  {	  switch(im.parseCharacter(c))    {    	non-compiled	[CE]  ';'  expected	8	None	replace
49	[BUG]  [BUGGY]  Switch(re.parseCharacter(c))  {  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Switch(re.parseCharacter(c))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Switch(re.parseCharacter(c))  {	  switch(im.parseCharacter(c))    {    	non-compiled	[CE]  ';'  expected	8	None	replace
50	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c!=  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c!=    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	12	None	replace
51	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	13	None	replace
52	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	13	None	replace
53	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c    ==    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
54	[BUG]  [BUGGY]  RelativeFormat.instance.setIndex(startIndex);  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  RelativeFormat.instance.setIndex(startIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	RelativeFormat.instance.setIndex(startIndex);	      re.setIndex(initialIndex);    	non-compiled	[CE]  orphaned  case	6	None	replace
55	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMAGINARY_CHARACTER  &&  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {	  if(c!=    DEFAULT_IMAGINARY_CHARACTER    ||    c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    	non-compiled	[CE]  orphaned  case	17	None	replace
56	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValu  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValu  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValu	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  ')'  expected	13	None	replace
57	[BUG]  [BUGGY]      pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  [CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]    AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex();  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	        pos.setIndex(startIndex);    int  startIndex  =  pos.getIndex();	  	non-compiled	[CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)	1	None	add
58	[BUG]  [BUGGY]      pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex(startIndex);  [CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  int  startIndex  =  pos.getIndex(startIndex);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	        pos.setIndex(startIndex);    int  startIndex  =  pos.getIndex(startIndex);	  	non-compiled	[CE]  variable  startIndex  is  already  defined  in  method  parse(String,ParsePosition)	1	None	add
59	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	add	        pos.setIndex(startIndex);    parseNextCharacter(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
60	[BUG]  [BUGGY]      pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]      pos.setIndex(startIndex);  parseNextCharacter(source,  pos);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	        pos.setIndex(startIndex);    parseNextCharacter(source,  pos);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	1	2	add
61	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  c);  [CE]  orphaned  case  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  c);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  c);	      Number    im    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
62	[BUG]  [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Number  im  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Number  im  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);	      Number    im    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	9	None	replace
63	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }	      pos.setIndex(startIndex);    return    null;    	non-compiled	[CE]  orphaned  case	5	None	replace
64	[BUG]  [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  ==  DEFAULT_IMAGINARY_CHARACTER  ||  c  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(startIndex);  return  null;  }	      pos.setIndex(startIndex);    return    null;    	non-compiled	[CE]  orphaned  case	5	None	replace
65	[BUG]  [BUGGY]  int  initialIndex  =  re.getIndex();  [CE]  orphaned  case  [FE]                StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  int  initialIndex  =  re.getIndex();  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  initialIndex  =  re.getIndex();	      re.setIndex(initialIndex);    	non-compiled	[CE]  orphaned  case	6	None	replace
66	[BUG]  [BUGGY]  int  n  =  parseNextCharacter(source,  pos,  sign);  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  int  n  =  parseNextCharacter(source,  pos,  sign);  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	int  n  =  parseNextCharacter(source,  pos,  sign);	      int    n    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  orphaned  case	3	None	replace
67	[BUG]  [BUGGY]  pos.setIndex(Integer.toHexString(c));  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  pos.setIndex(Integer.toHexString(c));  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	pos.setIndex(Integer.toHexString(c));	      pos.setIndex(startIndex);    	non-compiled	[CE]  orphaned  case	2	None	replace
68	[BUG]  [BUGGY]  switch(pos.parseNextCharacter(source,  pos))  {  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  switch(pos.parseNextCharacter(source,  pos))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(pos.parseNextCharacter(source,  pos))  {	  switch(im.parseNextCharacter(source,    pos))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
69	[BUG]  [BUGGY]  if(c!=  DEFAULT_IMPLEMENTS)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [CE]  orphaned  case  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c!=  DEFAULT_IMPLEMENTS)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c!=  DEFAULT_IMPLEMENTS)  {  Number  im  =  im.parseNextCharacter(source,  pos);  if(im!=  null)  {  return  new  Complex(re.doubleValue(),  0.0);  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    im.parseNextCharacter(source,    pos);    if(im!=    null)    {    return    new    Complex(re.doubleValue(),    0.0);    }    	non-compiled	[CE]  orphaned  case	14	None	replace
70	[BUG]  [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [CE]  orphaned  case  [FE]              StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	if(c  >=  DEFAULT_IMAGINARY_CHARACTER)  {  Number  im  =  parseNextCharacter(source,  pos);  if(im!=  null)  {  return  null;  }	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    if(im!=    null)    {    return    null;    }    	non-compiled	[CE]  orphaned  case	16	None	replace
71	[BUG]  [BUGGY]  switch(defulT_IMAGINARY_CHARACTER.parseCharacter(c))  {  [CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  switch(defulT_IMAGINARY_CHARACTER.parseCharacter(c))  {  [BUGGY]    case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	switch(defulT_IMAGINARY_CHARACTER.parseCharacter(c))  {	  switch(im.parseCharacter(c))    {    	non-compiled	[CE]  cannot  find  symbol  defulT_IMAGINARY_CHARACTER	8	None	replace
72	[BUG]  [BUGGY]  Null  im  =  parseNextCharacter(source,  pos);  return  null;  [CE]  orphaned  case  [FE]            StringIndexOutOfBoundsException    [CONTEXT]      pos.setIndex(initialIndex);  return  null;  }  int  startIndex  =  pos.getIndex();  char  c  =  parseNextCharacter(source,  pos);  int  sign  =  0;    [BUGGY]  Null  im  =  parseNextCharacter(source,  pos);  return  null;  [BUGGY]    switch  (c)  {  case  0  :    return  new  Complex(re.doubleValue(),  0.0);  case  '-'  :  sign  =  -1;  break;  case  '+'  :  sign  =  1;  break;  [CLASS]  ComplexFormat  [METHOD]  parse  [RETURN_TYPE]  Complex  String  source  ParsePosition  pos  [VARIABLES]  boolean  Number  im  re  char  c  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  long  serialVersionUID  int  endIndex  initialIndex  n  sign  startIndex  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	340	340	2	replace	Null  im  =  parseNextCharacter(source,  pos);  return  null;	      if(c    ==    DEFAULT_IMAGINARY_CHARACTER)    {    Number    im    =    parseNextCharacter(source,    pos);    return    null;    }    	non-compiled	[CE]  orphaned  case	15	None	replace
