bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	60	26	add
2	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	60	26	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	60	26	add
4	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	60	26	add
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  AssertionFailedError  	60	26	add
6	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  pos.setIndex(pos.getIndex()  -  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  AssertionFailedError  	60	26	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }	  	compilable	  [FE]  AssertionFailedError  	60	26	add
8	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }	  	compilable	  [FE]  AssertionFailedError  	60	26	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	60	26	add
10	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	60	26	add
11	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	10	None	replace
12	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  imaginaryCharacter);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  imaginaryCharacter);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  imaginaryCharacter);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	10	None	replace
13	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  realFormat);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  realFormat);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  realFormat);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	10	None	replace
14	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  true);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  true);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  true);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	10	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  parseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()        +        1);        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  +  1);  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	39	26	add
16	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  parseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  +  1);  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	39	26	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()        +        1);        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  +  1);	  	compilable	  [FE]  AssertionFailedError  	39	26	add
18	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  +  1);	  	compilable	  [FE]  AssertionFailedError  	39	26	add
19	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  byseNextCharacter(source,  pos);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  byseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  +  1);  byseNextCharacter(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol	39	None	add
20	[BUG]  [BUGGY]  PoddedFormat  format  =  new  PoddedFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedInteger(  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  PoddedFormat  format  =  new  PoddedFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedInteger(  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	PoddedFormat  format  =  new  PoddedFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedInteger(	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.writePaddedInteger(    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
21	[BUG]  [BUGGY]  pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedIn  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedIn  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedIn	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.writePaddedInteger(    	non-compiled	[CE]  not  a  statement	52	None	replace
22	[BUG]  [BUGGY]  pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePadded  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePadded  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePadded	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.writePaddedInteger(    	non-compiled	[CE]  not  a  statement	52	None	replace
23	[BUG]  [BUGGY]  pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedInt  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedInt  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedInt	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.writePaddedInteger(    	non-compiled	[CE]  not  a  statement	52	None	replace
24	[BUG]  [BUGGY]  parseWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);	  parseWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
25	[BUG]  [BUGGY]  parseWhitespace(source,  pos.getIndex());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseWhitespace(source,  pos.getIndex());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseWhitespace(source,  pos.getIndex());	  parseWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
26	[BUG]  [BUGGY]  parseWhitespace(source,  pos  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseWhitespace(source,  pos  +  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseWhitespace(source,  pos  +  1);	  parseWhitespace(source,    pos);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	9	None	replace
27	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos)/  1;  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos)/  1;  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos)/  1;	  ParsePosition    pos    =    parseNextCharacter(source,    pos)+    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	36	None	replace
28	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos)+  2;  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos)+  2;  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos)+  2;	  ParsePosition    pos    =    parseNextCharacter(source,    pos)+    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	36	None	replace
29	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos)-  1;  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos)-  1;  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos)-  1;	  ParsePosition    pos    =    parseNextCharacter(source,    pos)+    1;    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	36	None	replace
30	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());	          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  StackOverflowError  	20	26	replace
31	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());	          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  StackOverflowError  	20	26	replace
32	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  realFormat);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  realFormat);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  realFormat);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    imaginaryCharacter);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	53	None	replace
33	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  imaginaryCharacter,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  imaginaryCharacter,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  imaginaryCharacter,  DEFAULT_IMAGINARY_CHARACTER);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    imaginaryCharacter);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	53	None	replace
34	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  this.imaginaryFormat);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  this.imaginaryFormat);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  this.imaginaryFormat);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    imaginaryCharacter);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	53	None	replace
35	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextPosition(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextPosition(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextPosition(source,  pos);	          parseNextCharacter(source,    pos);    ParsePosition    pos    =    parseNextPosition(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	34	None	replace
36	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseNextPosition(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseNextPosition(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseNextPosition(source,  pos);	          parseNextCharacter(source,    pos);    ParsePosition    pos    =    parseNextPosition(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	34	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	33	26	replace
38	[BUG]  [BUGGY]  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	33	26	replace
39	[BUG]  [BUGGY]  parsePreviousCharacter(source,  pos);  pos.setIndex(pos.getIndex());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parsePreviousCharacter(source,  pos);  pos.setIndex(pos.getIndex());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parsePreviousCharacter(source,  pos);  pos.setIndex(pos.getIndex());	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
40	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex());        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex());  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	49	26	add
41	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  parseAndIgnoreWhitespace(source,  pos);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex());  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	49	26	add
42	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex());        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex());	  	compilable	  [FE]  StackOverflowError  	49	26	add
43	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex());	  	compilable	  [FE]  StackOverflowError  	49	26	add
44	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  ParseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex());  ParseAndIgnoreWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex());  ParseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol	49	None	add
45	[BUG]  [BUGGY]  pos.setIndex(this.realFormat.getIndex(),  pos);  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(this.realFormat.getIndex(),  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(this.realFormat.getIndex(),  pos);	  pos.setIndex(this.realFormat.getIndex());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
46	[BUG]  [BUGGY]  pos.setIndex(this.realFormat,  pos.getIndex());  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(this.realFormat,  pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(this.realFormat,  pos.getIndex());	  pos.setIndex(this.realFormat.getIndex());    	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	43	None	replace
47	[BUG]  [BUGGY]  pos.setIndex(this.realFormat.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(this.realFormat.getIndex()  -  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(this.realFormat.getIndex()  -  1);	  pos.setIndex(this.realFormat.getIndex());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
48	[BUG]  [BUGGY]  parseIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);	  parseIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
49	[BUG]  [BUGGY]  parseIgnoreWhitespace(source,  pos.getIndex());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseIgnoreWhitespace(source,  pos.getIndex());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseIgnoreWhitespace(source,  pos.getIndex());	  parseIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
50	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]        StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source);	          parseAndIgnoreWhitespace(source,    pos);    ParsePosition    pos    =    parseNextCharacter(source);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	35	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  parseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex());        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex());  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	6	26	add
52	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  parseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex());  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	6	26	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex());        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex());	  	compilable	  [FE]  AssertionFailedError  	6	26	add
54	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex());	  	compilable	  [FE]  AssertionFailedError  	6	26	add
55	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  parseNextCharacter(position,  pos);  [CE]  cannot  find  symbol  position  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  parseNextCharacter(position,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex());  parseNextCharacter(position,  pos);	  	non-compiled	[CE]  cannot  find  symbol  position	6	None	add
56	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	61	26	replace
57	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	61	26	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	61	26	replace
59	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionFailedError  	61	26	replace
60	[BUG]  [BUGGY]  parseNextCharacter(source,  pos);  pos.setIndex(position.getIndex()  -  1);  [CE]  cannot  find  symbol  position  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextCharacter(source,  pos);  pos.setIndex(position.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextCharacter(source,  pos);  pos.setIndex(position.getIndex()  -  1);	          parseNextCharacter(source,    pos);    pos.setIndex(source.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol  position	46	None	replace
61	[BUG]  [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]          StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);	          parseAndIgnoreWhitespace(source,    pos);    ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	17	None	replace
62	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  StackOverflowError  	19	26	add
63	[BUG]  [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  StackOverflowError  	19	26	add
64	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  StackOverflowError  	19	26	add
65	[BUG]  [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  pos.setIndex(pos.getIndex()  -  1);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  StackOverflowError  	19	26	add
66	[BUG]  [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  ParsePosition  pos  =  parseNextCharacter(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]        StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  ParsePosition  pos  =  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    ParsePosition  pos  =  parseNextCharacter(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	19	None	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()        +        1);        pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);	  	compilable	  [FE]  AssertionFailedError  	24	26	add
68	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);	  	compilable	  [FE]  AssertionFailedError  	24	26	add
69	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(position.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  [CE]  cannot  find  symbol  position  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(position.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(position.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);	  	non-compiled	[CE]  cannot  find  symbol  position	24	None	add
70	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1,  pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  [CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1,  pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1,  pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);	  	non-compiled	[CE]  method  setIndex  in  class  ParsePosition  cannot  be  applied  to  given  types;	24	None	add
71	[BUG]  [BUGGY]  NumberFormat  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  [CE]  NumberFormat  is  abstract;  cannot  be  instantiated  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  NumberFormat  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	NumberFormat  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);	          if(pos.getIndex()    ==    -1)    {    NumberFormat    nf    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER,    DEFAULT_IMAGINARY_CHARACTER);    nf.setIndex(pos.getIndex()    +    1);    }    	non-compiled	[CE]  NumberFormat  is  abstract;  cannot  be  instantiated	66	None	replace
72	[BUG]  [BUGGY]  Format  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  [CE]  NumberFormat  is  abstract;  cannot  be  instantiated  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  Format  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	Format  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);	          if(pos.getIndex()    ==    -1)    {    NumberFormat    nf    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER,    DEFAULT_IMAGINARY_CHARACTER);    nf.setIndex(pos.getIndex()    +    1);    }    	non-compiled	[CE]  NumberFormat  is  abstract;  cannot  be  instantiated	66	None	replace
73	[BUG]  [BUGGY]  NumberFormat  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  NumberFormat  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	NumberFormat  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  }	          if(pos.getIndex()    ==    -1)    {    NumberFormat    nf    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER,    DEFAULT_IMAGINARY_CHARACTER);    nf.setIndex(pos.getIndex()    +    1);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
74	[BUG]  [BUGGY]  Format  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  }  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  Format  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	Format  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  }	          if(pos.getIndex()    ==    -1)    {    NumberFormat    nf    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER,    DEFAULT_IMAGINARY_CHARACTER);    nf.setIndex(pos.getIndex()    +    1);    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	66	None	replace
75	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	15	26	add
76	[BUG]  [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	15	26	add
77	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	15	26	add
78	[BUG]  [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	15	26	add
79	[BUG]  [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseNextCharacter(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]        StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  ParsePosition  pos  =  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    ParsePosition  pos  =  parseNextCharacter(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	15	None	add
80	[BUG]  [BUGGY]  pos.setIndex(source.getIndex());  parseNextCharacter(source,  pos);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(source.getIndex());  parseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(source.getIndex());  parseNextCharacter(source,  pos);	  pos.setIndex(pos.getIndex());    parseNextCharacter(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);	  pos.setIndex(pos.getIndex());    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	7	26	replace
82	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);	  pos.setIndex(pos.getIndex());    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	7	26	replace
83	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  position,  false);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  position,  false);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  position,  false);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    false);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	14	None	replace
84	[BUG]  [BUGGY]  pos.setIndex(source.getIndex()  *  2);  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(source.getIndex()  *  2);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(source.getIndex()  *  2);	  pos.setIndex(source.getIndex()    *    1);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  AssertionFailedError  	32	4	add
86	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  AssertionFailedError  	32	4	add
87	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  ParsePosition  pos  =  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  ParsePosition  pos  =  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    ParsePosition  pos  =  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	32	None	add
88	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	32	26	add
89	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  pos.setIndex(pos.getIndex()  -  1);  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  StringIndexOutOfBoundsException  	32	26	add
90	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  ParseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  ParseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    ParseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	32	None	add
91	[BUG]  [BUGGY]  pos.setIndex(source.getIndex());  pos.setIndex(pos.getIndex());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(source.getIndex());  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(source.getIndex());  pos.setIndex(pos.getIndex());	  pos.setIndex(pos.getIndex());    pos.setIndex(position.getIndex());    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
92	[BUG]  [BUGGY]  parseNextPosition(source);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextPosition(source);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextPosition(source);	          parseNextPosition(pos);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
93	[BUG]  [BUGGY]  parseNextPosition(pos,  pos);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextPosition(pos,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextPosition(pos,  pos);	          parseNextPosition(pos);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
94	[BUG]  [BUGGY]  parseNextPosition(pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextPosition(pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextPosition(pos,  DEFAULT_IMAGINARY_CHARACTER);	          parseNextPosition(pos);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
95	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  true,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  true,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  true,  DEFAULT_IMAGINARY_CHARACTER);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    true);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	13	None	replace
96	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  position,  true);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  position,  true);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  position,  true);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    true);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	13	None	replace
97	[BUG]  [BUGGY]  parseNextPosition(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextPosition(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextPosition(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);	  parseNextPosition(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
98	[BUG]  [BUGGY]  parseNextPosition(source,  pos  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextPosition(source,  pos  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextPosition(source,  pos  +  1);	  parseNextPosition(source,    pos);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	42	None	replace
99	[BUG]  [BUGGY]  parseIndexOutOfBoundsException  pos  =  parseNextCharacter(source,  pos);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseIndexOutOfBoundsException  pos  =  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseIndexOutOfBoundsException  pos  =  parseNextCharacter(source,  pos);	          parseNextCharacter(source,    pos);    ParseIndexOutOfBoundsException    pos    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
100	[BUG]  [BUGGY]  ParseIndexOutOfBoundsException  pos  =  parseNextCharacter(source,  pos);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParseIndexOutOfBoundsException  pos  =  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParseIndexOutOfBoundsException  pos  =  parseNextCharacter(source,  pos);	          parseNextCharacter(source,    pos);    ParseIndexOutOfBoundsException    pos    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
101	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos.getIndex()  -  1);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos.getIndex()  -  1);	  ParsePosition    pos    =    parseNextCharacter(source,    pos.getIndex());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	38	None	replace
102	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos.getIndex()  +  1);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos.getIndex()  +  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos.getIndex()  +  1);	  ParsePosition    pos    =    parseNextCharacter(source,    pos.getIndex());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	38	None	replace
103	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos.getIndex()  -  2);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                      StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos.getIndex()  -  2);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos.getIndex()  -  2);	  ParsePosition    pos    =    parseNextCharacter(source,    pos.getIndex());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	38	None	replace
104	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos.getStartIndex());  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                        StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos.getStartIndex());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos.getStartIndex());	  ParsePosition    pos    =    parseNextCharacter(source,    pos.getIndex());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	38	None	replace
105	[BUG]  [BUGGY]  nf.setIndex(pos.getIndex());  nf.setIndex(pos.getIndex());  [CE]  cannot  find  symbol  nf  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  nf.setIndex(pos.getIndex());  nf.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	nf.setIndex(pos.getIndex());  nf.setIndex(pos.getIndex());	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    }    	non-compiled	[CE]  cannot  find  symbol  nf	8	None	replace
106	[BUG]  [BUGGY]  pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPaddedIn  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPaddedIn  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPaddedIn	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.appendPaddedInteger(    	non-compiled	[CE]  not  a  statement	51	None	replace
107	[BUG]  [BUGGY]  pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPadded  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPadded  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()!=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPadded	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.appendPaddedInteger(    	non-compiled	[CE]  not  a  statement	51	None	replace
108	[BUG]  [BUGGY]  pos.getIndex()  >=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPaddedIn  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()  >=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPaddedIn  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()  >=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPaddedIn	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.appendPaddedInteger(    	non-compiled	[CE]  not  a  statement	51	None	replace
109	[BUG]  [BUGGY]  pos.getIndex()  >=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPadded  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()  >=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPadded  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()  >=  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPadded	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.appendPaddedInteger(    	non-compiled	[CE]  not  a  statement	51	None	replace
110	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	12	None	replace
111	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  true);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  true);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  true);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	12	None	replace
112	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  realFormat);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  realFormat);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  realFormat);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	12	None	replace
113	[BUG]  [BUGGY]  ParsePosition  pos  =  getPosition()  -  1;  parseNextCharacter(pos,  source);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  getPosition()  -  1;  parseNextCharacter(pos,  source);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  getPosition()  -  1;  parseNextCharacter(pos,  source);	          ParsePosition    pos    =    getPosition();    parseNextCharacter(pos,    source);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	23	None	replace
114	[BUG]  [BUGGY]  ParsePosition  pos  =  getPosition()  +  1;  parseNextCharacter(pos,  source);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  getPosition()  +  1;  parseNextCharacter(pos,  source);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  getPosition()  +  1;  parseNextCharacter(pos,  source);	          ParsePosition    pos    =    getPosition();    parseNextCharacter(pos,    source);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	23	None	replace
115	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos  +  1,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos  +  1,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos  +  1,  DEFAULT_IMAGINARY_CHARACTER);	  ParsePosition    pos    =    parseNextCharacter(source,    pos    +    1);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	37	None	replace
116	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos  +  2);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos  +  2);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos  +  2);	  ParsePosition    pos    =    parseNextCharacter(source,    pos    +    1);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	37	None	replace
117	[BUG]  [BUGGY]  ParsePosition  pos  =  parsePreviousCharacter(source,  pos  +  1);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                    StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parsePreviousCharacter(source,  pos  +  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parsePreviousCharacter(source,  pos  +  1);	  ParsePosition    pos    =    parseNextCharacter(source,    pos    +    1);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	37	None	replace
118	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);	  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  StackOverflowError  	50	26	replace
119	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);	  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  StackOverflowError  	50	26	replace
120	[BUG]  [BUGGY]  ParsePosition  pos  =  getPosition()  -  1;  parseNextCharacter(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  getPosition()  -  1;  parseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  getPosition()  -  1;  parseNextCharacter(source,  pos);	          ParsePosition    pos    =    getPosition();    parseNextCharacter(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	22	None	replace
121	[BUG]  [BUGGY]  ParsePosition  pos  =  getPosition()  +  1;  parseNextCharacter(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  getPosition()  +  1;  parseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  getPosition()  +  1;  parseNextCharacter(source,  pos);	          ParsePosition    pos    =    getPosition();    parseNextCharacter(source,    pos);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	22	None	replace
122	[BUG]  [BUGGY]  pos.setIndex(source.getIndex(),  DEFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(source.getIndex(),  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(source.getIndex(),  DEFAULT_IMAGINARY_CHARACTER);	  pos.setIndex(source.getIndex(),    pos);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
123	[BUG]  [BUGGY]  pos.setIndex(source.getIndex(),  pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(source.getIndex(),  pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(source.getIndex(),  pos,  DEFAULT_IMAGINARY_CHARACTER);	  pos.setIndex(source.getIndex(),    pos);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
124	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  2);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()    +    2);    pos.setIndex(pos.getIndex()  +  2);	  	compilable	  [FE]  AssertionFailedError  	64	26	add
125	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  2);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()    +    2);    pos.setIndex(pos.getIndex()  +  2);	  	compilable	  [FE]  AssertionFailedError  	64	26	add
126	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(position.getIndex()  +  2);  [CE]  cannot  find  symbol  position  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(position.getIndex()  +  2);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()    +    2);    pos.setIndex(position.getIndex()  +  2);	  	non-compiled	[CE]  cannot  find  symbol  position	64	None	add
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()    +    2);    pos.setIndex(pos.getIndex()  +  1);	  	compilable	  [FE]  AssertionFailedError  	64	26	add
128	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()    +    2);    pos.setIndex(pos.getIndex()  +  1);	  	compilable	  [FE]  AssertionFailedError  	64	26	add
129	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  2);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  2);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()    +    2);    pos.setIndex(pos.getIndex()  +  2);  }	  	non-compiled	[CE]  <identifier>  expected	64	None	add
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    	compilable	  [FE]  AssertionFailedError  	25	26	replace
131	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    	compilable	  [FE]  AssertionFailedError  	25	26	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()!=  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()!=  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    	compilable	  [FE]  AssertionFailedError  	25	26	replace
133	[BUG]  [BUGGY]  if(pos.getIndex()!=  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()!=  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()!=  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    	compilable	  [FE]  AssertionFailedError  	25	26	replace
134	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    	compilable	  [FE]  IllegalArgumentException  	25	26	replace
135	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    	compilable	  [FE]  IllegalArgumentException  	25	26	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  AssertionFailedError  	62	26	add
137	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  pos.setIndex(pos.getIndex()  -  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  AssertionFailedError  	62	26	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	62	26	add
139	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	62	26	add
140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	62	26	add
141	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	62	26	add
142	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	62	26	add
143	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	62	26	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }	  	compilable	  [FE]  AssertionFailedError  	62	26	add
145	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }	  	compilable	  [FE]  AssertionFailedError  	62	26	add
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    	compilable	  [FE]  AssertionFailedError  	63	26	replace
147	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    	compilable	  [FE]  AssertionFailedError  	63	26	replace
148	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()        +        1);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  +  1);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	56	26	add
149	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  parseAndIgnoreWhitespace(source,  pos);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  +  1);  parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	56	26	add
150	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()        +        1);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  +  1);	  	compilable	  [FE]  StackOverflowError  	56	26	add
151	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  +  1);	  	compilable	  [FE]  StackOverflowError  	56	26	add
152	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  byseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  byseAndIgnoreWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  +  1);  byseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
153	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	2	add
154	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  [FE]  StringIndexOutOfBoundsException  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	2	add
155	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(position.getIndex());  pos.setIndex(pos.getIndex());  [CE]  cannot  find  symbol  position  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(position.getIndex());  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setIndex(position.getIndex());  pos.setIndex(pos.getIndex());	  	non-compiled	[CE]  cannot  find  symbol  position	3	None	add
156	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndent());  pos.setIndex(pos.getIndex());  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndent());  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndent());  pos.setIndex(pos.getIndex());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
157	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setStartIndex(pos.getEndIndex());  pos.setIndex(pos.getIndex());  [CE]  cannot  find  symbol  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setStartIndex(pos.getEndIndex());  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setStartIndex(pos.getEndIndex());  pos.setIndex(pos.getIndex());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
158	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex()  -  1);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos.getIndex()  -  1);	  parseAndIgnoreWhitespace(source,    pos.getIndex());    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	11	None	replace
159	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex()  -  1,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex()  -  1,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos.getIndex()  -  1,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos.getIndex());    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	11	None	replace
160	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex()  -  2);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex()  -  2);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos.getIndex()  -  2);	  parseAndIgnoreWhitespace(source,    pos.getIndex());    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	11	None	replace
161	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex()  +  1);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]                StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex()  +  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos.getIndex()  +  1);	  parseAndIgnoreWhitespace(source,    pos.getIndex());    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	11	None	replace
162	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	58	26	add
163	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	58	26	add
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  AssertionFailedError  	58	26	add
165	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  pos.setIndex(pos.getIndex()  -  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  AssertionFailedError  	58	26	add
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	58	26	add
167	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	58	26	add
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	58	26	add
169	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	58	26	add
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	58	26	add
171	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	58	26	add
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	29	26	add
173	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	29	26	add
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  AssertionFailedError  	29	26	add
175	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);	  	compilable	  [FE]  AssertionFailedError  	29	26	add
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	29	26	add
177	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);	  	compilable	  [FE]  AssertionFailedError  	29	26	add
178	[BUG]  [BUGGY]  parseNextWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER);	  parseNextWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
179	[BUG]  [BUGGY]  parseNextWhitespace(source,  pos  +  1);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextWhitespace(source,  pos  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextWhitespace(source,  pos  +  1);	  parseNextWhitespace(source,    pos);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	41	None	replace
180	[BUG]  [BUGGY]  parseWhitespace(source,  pos.getIndex(),  pos);  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseWhitespace(source,  pos.getIndex(),  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseWhitespace(source,  pos.getIndex(),  pos);	  pos.setIndex(source.getIndex(),    pos);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
181	[BUG]  [BUGGY]  NegativeFormat  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  NegativeFormat  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	NegativeFormat  nf  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER,  DEFAULT_IMAGINARY_CHARACTER);  nf.setIndex(pos.getIndex()  +  1);	          if(pos.getIndex()    ==    -1)    {    NumberFormat    nf    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER,    DEFAULT_IMAGINARY_CHARACTER);    nf.setIndex(pos.getIndex()    +    1);    }    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
182	[BUG]  [BUGGY]  nf.setIndex(pos.getIndex()  +  1);  [CE]  cannot  find  symbol  nf  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  nf.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	nf.setIndex(pos.getIndex()  +  1);	          if(pos.getIndex()    ==    -1)    {    NumberFormat    nf    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER,    DEFAULT_IMAGINARY_CHARACTER);    nf.setIndex(pos.getIndex()    +    1);    }    	non-compiled	[CE]  cannot  find  symbol  nf	66	None	replace
183	[BUG]  [BUGGY]  pos.setIndex(p.getIndex());  [CE]  cannot  find  symbol  p  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(p.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(p.getIndex());	  pos.setIndex(pos.getIndex()    +    2);    	non-compiled	[CE]  cannot  find  symbol  p	65	None	replace
184	[BUG]  [BUGGY]  pos  =  parseNextCharacter(source,  pos);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos  =  parseNextCharacter(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos  =  parseNextCharacter(source,  pos);	          parseNextCharacter(source,    pos);    ParsePosition    pos    =    parseNextCharacter(source,    pos);    	non-compiled	[CE]  incompatible  types	31	None	replace
185	[BUG]  [BUGGY]  pos  =  parseNextCharacter(source);  [CE]  method  parseNextCharacter  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos  =  parseNextCharacter(source);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos  =  parseNextCharacter(source);	          parseAndIgnoreWhitespace(source,    pos);    ParsePosition    pos    =    parseNextCharacter(source);    	non-compiled	[CE]  method  parseNextCharacter  in  class  ComplexFormat  cannot  be  applied  to  given  types;	35	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    }    	compilable	  [FE]  AssertionFailedError  	8	26	replace
187	[BUG]  [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    }    	compilable	  [FE]  AssertionFailedError  	8	26	replace
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source  ==  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source  ==  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    }    	compilable	  [FE]  AssertionFailedError  	8	26	replace
189	[BUG]  [BUGGY]  if(source  ==  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source  ==  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source  ==  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    }    	compilable	  [FE]  AssertionFailedError  	8	26	replace
190	[BUG]  [BUGGY]  if(source!=  null)  {  pos.setIndex(position.getIndex());  pos.setIndex(pos.getIndex());  }  [CE]  cannot  find  symbol  position  [FE]                  AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(position.getIndex());  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  pos.setIndex(position.getIndex());  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    }    	non-compiled	[CE]  cannot  find  symbol  position	8	None	replace
191	[BUG]  [BUGGY]  pos.setIndex(this.realFormat.getIndex()  +  1);  [CE]  cannot  find  symbol  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(this.realFormat.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(this.realFormat.getIndex()  +  1);	  pos.setIndex(this.realFormat.getIndex());    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
192	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  ParsePosition  pos.setIndex(pos.getIndex()  +  1);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  +  1);  ParsePosition  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  +  1);  ParsePosition  pos.setIndex(pos.getIndex()  +  1);	  	non-compiled	[CE]  ';'  expected	39	None	add
193	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(position.getIndex()  +  1);  parseNextCharacter(source,  pos);  [CE]  cannot  find  symbol  position  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,  pos);  pos.setIndex(position.getIndex()  +  1);  parseNextCharacter(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        parseNextCharacter(source,    pos);    pos.setIndex(position.getIndex()  +  1);  parseNextCharacter(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  position	39	None	add
194	[BUG]  [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  ParseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  ParseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseAndIgnoreWhitespace(source,        pos);        parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,  pos);  ParseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
195	[BUG]  [BUGGY]  pos.setIndex(source.getIndex());  parseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(source.getIndex());  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(source.getIndex());  parseAndIgnoreWhitespace(source,  pos);	  pos.setIndex(pos.getIndex());    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
196	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  ParsePosition  pos  =  new  ParsePosition(pos.getIndex());  pos.setIndex(pos.getIndex()  +  1);  }  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  ParsePosition  pos  =  new  ParsePosition(pos.getIndex());  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  ParsePosition  pos  =  new  ParsePosition(pos.getIndex());  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	25	None	replace
197	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  ParsePosition  pos  =  new  ParsePosition(source,  pos.getIndex());  pos.setIndex(pos.getIndex()  +  1);  }  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  ParsePosition  pos  =  new  ParsePosition(source,  pos.getIndex());  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  ParsePosition  pos  =  new  ParsePosition(source,  pos.getIndex());  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	25	None	replace
198	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  imaginaryFormat);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  imaginaryFormat);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  imaginaryFormat);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    imaginaryCharacter);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	53	None	replace
199	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  imaginaryCharacter);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  imaginaryCharacter);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  imaginaryCharacter);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	12	None	replace
200	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source!=  null)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	30	24	replace
201	[BUG]  [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	30	24	replace
202	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source!=  null)  {  parseNextCharacter(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	30	26	replace
203	[BUG]  [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  parseNextCharacter(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	30	26	replace
204	[BUG]  [BUGGY]  nf.parseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  nf  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  nf.parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	nf.parseAndIgnoreWhitespace(source,  pos);	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	non-compiled	[CE]  cannot  find  symbol  nf	30	None	replace
205	[BUG]  [BUGGY]  pos.setIndex(SourceUtil.getIndex(source),  pos.getIndex());  [CE]  cannot  find  symbol  SourceUtil  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(SourceUtil.getIndex(source),  pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(SourceUtil.getIndex(source),  pos.getIndex());	  pos.setIndex(pos.getIndex());    pos.setIndex(p.getIndex());    	non-compiled	[CE]  cannot  find  symbol  SourceUtil	48	None	replace
206	[BUG]  [BUGGY]  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  incompatible  types  [FE]          StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos  =  parseAndIgnoreWhitespace(source,  pos);	          parseAndIgnoreWhitespace(source,    pos);    ParsePosition    pos    =    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  incompatible  types	17	None	replace
207	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndent(pos.getIndex());  pos.setIndex(pos.getIndex());  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndent(pos.getIndex());  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setIndent(pos.getIndex());  pos.setIndex(pos.getIndex());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
208	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	2	add
209	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  [FE]  StringIndexOutOfBoundsException  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());	  	compilable	  [FE]  StringIndexOutOfBoundsException  	3	2	add
210	[BUG]  [BUGGY]  pos.getIndex()!=  -1)  {  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()!=  -1)  {  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()!=  -1)  {	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.appendPaddedInteger(    	non-compiled	[CE]  not  a  statement	51	None	replace
211	[BUG]  [BUGGY]  pos.getIndex()  ==  -1)  {  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()  ==  -1)  {  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()  ==  -1)  {	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.appendPaddedInteger(    	non-compiled	[CE]  not  a  statement	51	None	replace
212	[BUG]  [BUGGY]  pos.getIndex()  >>  -1)  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()  >>  -1)  {  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()  >>  -1)  {	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.appendPaddedInteger(    	non-compiled	[CE]  not  a  statement	51	None	replace
213	[BUG]  [BUGGY]  ParseNextWhitespace(source,  pos);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParseNextWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParseNextWhitespace(source,  pos);	  parseNextWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
214	[BUG]  [BUGGY]  parseNextWhitespace(source,  pos));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextWhitespace(source,  pos));  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextWhitespace(source,  pos));	  parseNextWhitespace(source,    pos);    	non-compiled	[CE]  ';'  expected	41	None	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source!=  null)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	33	26	replace
216	[BUG]  [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	33	26	replace
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source  ==  null)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source  ==  null)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	33	26	replace
218	[BUG]  [BUGGY]  if(source  ==  null)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source  ==  null)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source  ==  null)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	33	26	replace
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source!=  null)  {  pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    }    	compilable	  [FE]  AssertionFailedError  	27	26	replace
220	[BUG]  [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    }    	compilable	  [FE]  AssertionFailedError  	27	26	replace
221	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source!=  null)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    }    	compilable	  [FE]  AssertionFailedError  	27	26	replace
222	[BUG]  [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    }    	compilable	  [FE]  AssertionFailedError  	27	26	replace
223	[BUG]  [BUGGY]  parseNextPosition(source,  pos));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextPosition(source,  pos));  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextPosition(source,  pos));	  parseNextPosition(source,    pos);    	non-compiled	[CE]  ';'  expected	42	None	replace
224	[BUG]  [BUGGY]  pos  =  parseNextPosition(source,  pos);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos  =  parseNextPosition(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos  =  parseNextPosition(source,  pos);	          parseNextCharacter(source,    pos);    ParsePosition    pos    =    parseNextPosition(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
225	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    ParsePosition  pos  =  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	29	None	add
226	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(position.getIndex()  +  1);  [CE]  cannot  find  symbol  position  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(position.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(position.getIndex()  +  1);	  	non-compiled	[CE]  cannot  find  symbol  position	24	None	add
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    	compilable	  [FE]  AssertionFailedError  	4	26	replace
228	[BUG]  [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    	compilable	  [FE]  AssertionFailedError  	4	26	replace
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  else  {  parseNextCharacter(source,  pos);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  else  {  parseNextCharacter(source,  pos);  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    	compilable	  [FE]  AssertionFailedError  	4	26	replace
230	[BUG]  [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  else  {  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  else  {  parseNextCharacter(source,  pos);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  else  {  parseNextCharacter(source,  pos);  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    	compilable	  [FE]  AssertionFailedError  	4	26	replace
231	[BUG]  [BUGGY]  FormatUtils.writePaddedInteger(  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  FormatUtils.writePaddedInteger(  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	FormatUtils.writePaddedInteger(	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.writePaddedInteger(    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
232	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  imaginaryCharacter,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  imaginaryCharacter,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos,  imaginaryCharacter,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	10	None	replace
233	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  realFormat,  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  realFormat,  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos,  realFormat,  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	10	None	replace
234	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  ParsePosition  pos  =  parsePosition(source);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  ParsePosition  pos  =  parsePosition(source);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    ParsePosition  pos  =  parsePosition(source);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	58	None	add
235	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	58	26	add
236	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  parseAndIgnoreWhitespace(source,  pos);  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	58	26	add
237	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  ParsePosition  pos  =  parsePosition(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  ParsePosition  pos  =  parsePosition(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    ParsePosition  pos  =  parsePosition(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	58	None	add
238	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	62	26	add
239	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseAndIgnoreWhitespace(source,  pos);  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	62	26	add
240	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  ParsePosition  pos  =  parsePosition(source);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  ParsePosition  pos  =  parsePosition(source);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    ParsePosition  pos  =  parsePosition(source);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	62	None	add
241	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  pos.setIndex(source.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  pos.setIndex(source.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    pos.setIndex(source.getIndex()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	62	None	add
242	[BUG]  [BUGGY]  if(source!=  null)  {  parseWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  parseWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }	          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
243	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source!=  null)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }	          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  StackOverflowError  	16	26	replace
244	[BUG]  [BUGGY]  if(source!=  null)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  parseAndIgnoreWhitespace(source,  pos);  parseAndIgnoreWhitespace(source,  pos);  }	          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  StackOverflowError  	16	26	replace
245	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(source!=  null)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  StackOverflowError  	20	26	replace
246	[BUG]  [BUGGY]  if(source!=  null)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  StackOverflowError  	20	26	replace
247	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  null);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  null);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  null);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    true);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	13	None	replace
248	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos  +  1,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos  +  1,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos  +  1,  pos);	  ParsePosition    pos    =    parseNextCharacter(source,    pos    +    1);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	37	None	replace
249	[BUG]  [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  ParseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  ParseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    ParseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
250	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	19	26	add
251	[BUG]  [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	19	26	add
252	[BUG]  [BUGGY]  pos.setIndex(SourceUtilities.getIndex(pos.getIndex()  -  1));  [CE]  cannot  find  symbol  SourceUtilities  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(SourceUtilities.getIndex(pos.getIndex()  -  1));  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(SourceUtilities.getIndex(pos.getIndex()  -  1));	  pos.setIndex(position.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol  SourceUtilities	2	None	replace
253	[BUG]  [BUGGY]  pos.setIndex(SourceUtilities.getIndex(source),  pos.getIndex()  -  1);  [CE]  cannot  find  symbol  SourceUtilities  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(SourceUtilities.getIndex(source),  pos.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(SourceUtilities.getIndex(source),  pos.getIndex()  -  1);	  pos.setIndex(position.getIndex()    -    1);    	non-compiled	[CE]  cannot  find  symbol  SourceUtilities	2	None	replace
254	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  ParsePosition  pos  =  parsePosition(source);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  ParsePosition  pos  =  parsePosition(source);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    ParsePosition  pos  =  parsePosition(source);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	60	None	add
255	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	60	26	add
256	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseAndIgnoreWhitespace(source,  pos);  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    parseAndIgnoreWhitespace(source,  pos);	  	compilable	  [FE]  StackOverflowError  	60	26	add
257	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  ParsePosition  pos  =  parsePosition(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  ParsePosition  pos  =  parsePosition(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    ParsePosition  pos  =  parsePosition(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	60	None	add
258	[BUG]  [BUGGY]  ParseWhitespace  pos  =  parseWhitespace(source,  pos);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParseWhitespace  pos  =  parseWhitespace(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParseWhitespace  pos  =  parseWhitespace(source,  pos);	  parseWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
259	[BUG]  [BUGGY]  parseWhitespace(source,  pos.getPosition());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseWhitespace(source,  pos.getPosition());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseWhitespace(source,  pos.getPosition());	  parseWhitespace(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  3);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()    +    2);    pos.setIndex(pos.getIndex()  +  3);	  	compilable	  [FE]  AssertionFailedError  	64	24	add
261	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  3);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  3);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()    +    2);    pos.setIndex(pos.getIndex()  +  3);	  	compilable	  [FE]  AssertionFailedError  	64	24	add
262	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(-1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(-1);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    	compilable	  [FE]  AssertionFailedError  	63	26	replace
263	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(-1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(-1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(-1);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    	compilable	  [FE]  AssertionFailedError  	63	26	replace
264	[BUG]  [BUGGY]  pos.setIndex(SourceUtil.getIndex(source));  [CE]  cannot  find  symbol  SourceUtil  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(SourceUtil.getIndex(source));  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(SourceUtil.getIndex(source));	  pos.setIndex(pos.getIndex());    pos.setIndex(position.getIndex());    	non-compiled	[CE]  cannot  find  symbol  SourceUtil	5	None	replace
265	[BUG]  [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
266	[BUG]  [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(source!=  null)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(source!=  null)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
267	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  ParsePosition  pos  =  parseNextPosition(source,  pos);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  ParsePosition  pos  =  parseNextPosition(source,  pos);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    ParsePosition  pos  =  parseNextPosition(source,  pos);	  	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	32	None	add
268	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(position.getIndex()  +  1);  parseAndIgnoreWhitespace(source,  pos);  [CE]  cannot  find  symbol  position  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(position.getIndex()  +  1);  parseAndIgnoreWhitespace(source,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(position.getIndex()  +  1);  parseAndIgnoreWhitespace(source,  pos);	  	non-compiled	[CE]  cannot  find  symbol  position	56	None	add
269	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos  +  1,  pos.getIndex());  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos  +  1,  pos.getIndex());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos  +  1,  pos.getIndex());	  ParsePosition    pos    =    parseNextCharacter(source,    pos    +    1);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	37	None	replace
270	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  realCharacter);  [CE]  cannot  find  symbol  realCharacter  [FE]        StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  realCharacter);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos,  DEFAULT_IMAGINARY_CHARACTER,  realCharacter);	  parseAndIgnoreWhitespace(source,    pos,    DEFAULT_IMAGINARY_CHARACTER);    	non-compiled	[CE]  cannot  find  symbol  realCharacter	10	None	replace
271	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  <  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  <  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	59	2	replace
272	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  StringIndexOutOfBoundsException  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  <  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  <  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    	compilable	  [FE]  StringIndexOutOfBoundsException  	59	2	replace
273	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >=  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  >=  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    	compilable	  [FE]  AssertionFailedError  	59	26	replace
274	[BUG]  [BUGGY]  if(pos.getIndex()  >=  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >=  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  >=  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    	compilable	  [FE]  AssertionFailedError  	59	26	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	33	26	replace
276	[BUG]  [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	33	26	replace
277	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()!=  -1)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()!=  -1)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	33	26	replace
278	[BUG]  [BUGGY]  if(pos.getIndex()!=  -1)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()!=  -1)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()!=  -1)  {  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	33	26	replace
279	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setPosition(pos.getPosition());  pos.setIndex(pos.getIndex());  [CE]  cannot  find  symbol  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setPosition(pos.getPosition());  pos.setIndex(pos.getIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setPosition(pos.getPosition());  pos.setIndex(pos.getIndex());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
280	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  pos.setPosition(pos.getPosition());  [CE]  cannot  find  symbol  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  pos.setPosition(pos.getPosition());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setPosition(pos.getPosition());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
281	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setStartIndex(pos.getStartIndex());  pos.setEndIndex(pos.getEndIndex());  [CE]  cannot  find  symbol  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());  pos.setStartIndex(pos.getStartIndex());  pos.setEndIndex(pos.getEndIndex());  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        pos.setIndex(pos.getIndex());    pos.setStartIndex(pos.getStartIndex());  pos.setEndIndex(pos.getEndIndex());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
282	[BUG]  [BUGGY]  if(pos.getIndex()  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [CE]  incomparable  types:  int  and  String  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    	non-compiled	[CE]  incomparable  types:  int  and  String	4	None	replace
283	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()!=  -1)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()!=  -1)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    	compilable	  [FE]  AssertionFailedError  	4	26	replace
284	[BUG]  [BUGGY]  if(pos.getIndex()!=  -1)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()!=  -1)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()!=  -1)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    	compilable	  [FE]  AssertionFailedError  	4	26	replace
285	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()!=  0)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()!=  0)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    	compilable	  [FE]  AssertionFailedError  	4	26	replace
286	[BUG]  [BUGGY]  if(pos.getIndex()!=  0)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [FE]  AssertionFailedError  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()!=  0)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()!=  0)  {  pos.setIndex(pos.getIndex());  }  else  {  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    	compilable	  [FE]  AssertionFailedError  	4	26	replace
287	[BUG]  [BUGGY]  if(pos.getIndex()  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(pos.getIndex());  }  [CE]  incomparable  types:  int  and  String  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    }    	non-compiled	[CE]  incomparable  types:  int  and  String	8	None	replace
288	[BUG]  [BUGGY]  if(pos.getIndex()!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  [CE]  incomparable  types:  int  and  String  [FE]                AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()!=  DEFAULT_IMAGINARY_CHARACTER)  {  pos.setIndex(pos.getIndex());  pos.setIndex(pos.getIndex());  }	  pos.setIndex(pos.getIndex());    pos.setIndex(pos.getIndex());    }    	non-compiled	[CE]  incomparable  types:  int  and  String	8	None	replace
289	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  setIndex(pos.getIndex()  +  1);  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
290	[BUG]  [BUGGY]  parseNextPosition(source,  pos,  imaginaryCharacter);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseNextPosition(source,  pos,  imaginaryCharacter);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseNextPosition(source,  pos,  imaginaryCharacter);	  parseNextPosition(source,    pos);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
291	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  -1)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	20	26	replace
292	[BUG]  [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  -1)  {  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()    -    1);    	compilable	  [FE]  AssertionFailedError  	20	26	replace
293	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);  pos.setIndex(position.getIndex()  -  1);  [CE]  cannot  find  symbol  position  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);  pos.setIndex(position.getIndex()  -  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    parseNextCharacter(source,  pos);  pos.setIndex(position.getIndex()  -  1);	  	non-compiled	[CE]  cannot  find  symbol  position	32	None	add
294	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	  	non-compiled	[CE]  <identifier>  expected	32	None	add
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    	compilable	  [FE]  AssertionFailedError  	63	26	replace
296	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    	compilable	  [FE]  AssertionFailedError  	63	26	replace
297	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex());    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  parseNextCharacter(nf,  pos);  [CE]  cannot  find  symbol  nf  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex());    parseNextCharacter(source,  pos);  pos.setIndex(pos.getIndex());  parseNextCharacter(nf,  pos);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex());        parseNextCharacter(source,    pos);    pos.setIndex(pos.getIndex());  parseNextCharacter(nf,  pos);	  	non-compiled	[CE]  cannot  find  symbol  nf	6	None	add
298	[BUG]  [BUGGY]  pos.setIndex(source.getIndex()  /  1);  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(source.getIndex()  /  1);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(source.getIndex()  /  1);	  pos.setIndex(source.getIndex()    *    1);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  -1)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    }    	compilable	  [FE]  AssertionFailedError  	27	26	replace
300	[BUG]  [BUGGY]  if(pos.getIndex()  ==  -1)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  -1)  {  pos.setIndex(pos.getIndex()  +  1);  }  else  {  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    }    	compilable	  [FE]  AssertionFailedError  	27	26	replace
301	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    }    	compilable	  [FE]  AssertionFailedError  	27	26	replace
302	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  }	  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()    +    1);    }    	compilable	  [FE]  AssertionFailedError  	27	26	replace
303	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
304	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	62	None	add
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	62	26	add
306	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(0);    }    if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	  	compilable	  [FE]  AssertionFailedError  	62	26	add
307	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	pos.setIndex(pos.getIndex()        +        1);        pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  1);	  	compilable	  [FE]  AssertionFailedError  	24	24	add
308	[BUG]  [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  1);  pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  1);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(pos.getIndex()        +        1);        pos.setIndex(pos.getIndex()    +    1);    pos.setIndex(pos.getIndex()  +  2);  pos.setIndex(pos.getIndex()  +  1);	  	compilable	  [FE]  AssertionFailedError  	24	24	add
309	[BUG]  [BUGGY]  pos.setIndex(source.getIndex(),  this.imaginaryCharacter);  [CE]  cannot  find  symbol  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.setIndex(source.getIndex(),  this.imaginaryCharacter);  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.setIndex(source.getIndex(),  this.imaginaryCharacter);	  pos.setIndex(source.getIndex(),    pos);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
310	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  <  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  <  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	61	26	replace
311	[BUG]  [BUGGY]  if(pos.getIndex()  <  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  <  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  <  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          parseNextCharacter(source,    pos);    if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	61	26	replace
312	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos.getColumnIndex());  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]                  StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos.getColumnIndex());  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos.getColumnIndex());	  ParsePosition    pos    =    parseNextCharacter(source,    pos.getIndex());    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	38	None	replace
313	[BUG]  [BUGGY]  pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPaddedIn  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPaddedIn  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPaddedIn	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.appendPaddedInteger(    	non-compiled	[CE]  not  a  statement	51	None	replace
314	[BUG]  [BUGGY]  pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPadded  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPadded  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.appendPadded	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.appendPaddedInteger(    	non-compiled	[CE]  not  a  statement	51	None	replace
315	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
316	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
317	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	60	26	add
319	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	60	26	add
320	[BUG]  [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [CE]  <identifier>  expected  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseAndIgnoreWhitespace(source,    pos);    pos.setIndex(pos.getIndex()  -  1);  parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseAndIgnoreWhitespace(source,        pos);        pos.setIndex(pos.getIndex()    -    1);    parseAndIgnoreWhitespace(source,  pos);  pos.setIndex(pos.getIndex()  -  1);  }	  	non-compiled	[CE]  <identifier>  expected	19	None	add
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	30	26	replace
322	[BUG]  [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	30	26	replace
323	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	compilable	  [FE]  IllegalArgumentException  	30	26	replace
324	[BUG]  [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	compilable	  [FE]  IllegalArgumentException  	30	26	replace
325	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	30	26	replace
326	[BUG]  [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  }	          parseNextCharacter(source,    pos);    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	30	26	replace
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  parseNextCharacter(source,  pos);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  parseNextCharacter(source,  pos);  }	  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	40	26	replace
328	[BUG]  [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  parseNextCharacter(source,  pos);  }  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  0)  {  pos.setIndex(pos.getIndex()  +  1);  parseNextCharacter(source,  pos);  }	  pos.setIndex(pos.getIndex()    +    1);    parseNextCharacter(source,    pos);    	compilable	  [FE]  AssertionFailedError  	40	26	replace
329	[BUG]  [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  imaginaryCharacter,  realFormat);  [CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  ParsePosition  pos  =  parseNextCharacter(source,  pos,  imaginaryCharacter,  realFormat);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	ParsePosition  pos  =  parseNextCharacter(source,  pos,  imaginaryCharacter,  realFormat);	  ParsePosition    pos    =    parseNextCharacter(source,    pos,    imaginaryCharacter);    	non-compiled	[CE]  variable  pos  is  already  defined  in  method  parseAndIgnoreWhitespace(String,ParsePosition)	53	None	replace
330	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseAndIgnoreWhitespace(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  >  0)  {  parseAndIgnoreWhitespace(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }	          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  StackOverflowError  	16	26	replace
331	[BUG]  [BUGGY]  if(pos.getIndex()  >  0)  {  parseAndIgnoreWhitespace(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  >  0)  {  parseAndIgnoreWhitespace(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  >  0)  {  parseAndIgnoreWhitespace(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }	          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  StackOverflowError  	16	26	replace
332	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseAndIgnoreWhitespace(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	if(pos.getIndex()  ==  -1)  {  parseAndIgnoreWhitespace(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }	          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  AssertionFailedError  	16	26	replace
333	[BUG]  [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseAndIgnoreWhitespace(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]      StackOverflowError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  if(pos.getIndex()  ==  -1)  {  parseAndIgnoreWhitespace(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	if(pos.getIndex()  ==  -1)  {  parseAndIgnoreWhitespace(source,  pos);  }  else  {  parseNextCharacter(source,  pos);  }	          parseAndIgnoreWhitespace(source,    pos);    parseAndIgnoreWhitespace(source,    pos);    	compilable	  [FE]  AssertionFailedError  	16	26	replace
334	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
335	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
336	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(pos.getIndex()  -  1);  }  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        if(pos.getIndex()    >    0)    {    parseNextCharacter(source,    pos);    }    else    {    pos.setIndex(pos.getIndex()    -    1);    }    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  pos.setIndex(pos.getIndex()  -  1);  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
337	[BUG]  [BUGGY]  pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedIn  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedIn  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedIn	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.writePaddedInteger(    	non-compiled	[CE]  not  a  statement	52	None	replace
338	[BUG]  [BUGGY]  pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedInt  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedInt  [BUGGY]      }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	pos.getIndex()  ==  -1)  {  NumberFormat  format  =  new  NumberFormat(DEFAULT_IMAGINARY_CHARACTER);  for(int  i  =  0,  len  =  format.length();  i  <  len;  ++i)  {  FormatUtils.writePaddedInt	  if(pos.getIndex()!=    -1)    {    NumberFormat    format    =    new    NumberFormat(DEFAULT_IMAGINARY_CHARACTER);    for(int    i    =    0,    len    =    format.length();    i    <    len;    ++i)    {    FormatUtils.writePaddedInteger(    	non-compiled	[CE]  not  a  statement	52	None	replace
339	[BUG]  [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex(),  DEFAULT_IMAGINARY_CHARACTER);  [CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]  parseAndIgnoreWhitespace(source,  pos.getIndex(),  DEFAULT_IMAGINARY_CHARACTER);  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	parseAndIgnoreWhitespace(source,  pos.getIndex(),  DEFAULT_IMAGINARY_CHARACTER);	  parseAndIgnoreWhitespace(source,    pos.getIndex());    	non-compiled	[CE]  method  parseAndIgnoreWhitespace  in  class  ComplexFormat  cannot  be  applied  to  given  types;	11	None	replace
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }	  	compilable	  [FE]  AssertionFailedError  	29	26	add
341	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }	  	compilable	  [FE]  AssertionFailedError  	29	26	add
342	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }	  	compilable	  [FE]  AssertionFailedError  	29	26	add
343	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    if(pos.getIndex()  >  0)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }	  	compilable	  [FE]  AssertionFailedError  	29	26	add
344	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	add	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	26	add
345	[BUG]  [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError    [CONTEXT]      private  void  parseAndIgnoreWhitespace(String  source,  ParsePosition  pos)  {  parseNextCharacter(source,  pos);      [BUGGY]          parseNextCharacter(source,    pos);    parseNextCharacter(source,  pos);  if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }  [BUGGY]      pos.setIndex(pos.getIndex()  -  1);  }  [CLASS]  ComplexFormat  [METHOD]  parseAndIgnoreWhitespace  [RETURN_TYPE]  void  String  source  ParsePosition  pos  [VARIABLES]  String  DEFAULT_IMAGINARY_CHARACTER  imaginaryCharacter  source  boolean  long  serialVersionUID  NumberFormat  f  format  imaginaryFormat  nf  realFormat  ParsePosition  pos  	projects/Math101/src/java/org/apache/commons/math/complex/ComplexFormat.java	0.2773500981126146	400	400	2	replace	                parseNextCharacter(source,        pos);        parseNextCharacter(source,    pos);    if(pos.getIndex()  ==  -1)  {  parseNextCharacter(source,  pos);  parseNextCharacter(source,  pos);  }  else  {  pos.setIndex(0);  }	  	compilable	  [FE]  StringIndexOutOfBoundsException  	29	26	add
