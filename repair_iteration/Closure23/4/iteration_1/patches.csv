bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(intIndex  >  0)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  >  0)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  0)  {	  if    (intIndex    >=    0)    {    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  >  right.getLastChild())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0  ||  intIndex  >  right.getLastChild())  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  >  right.getLastChild())  {	  if    (intIndex    >=    0)    {    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  if(intIndex!=  intIndex)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex!=  intIndex)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  intIndex)  {	  if    (index!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  if  (index  >=  intIndex)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if  (index  >=  intIndex)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  (index  >=  intIndex)  {	  if    (index!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  >  left.getLastChild())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0  ||  intIndex  >  left.getLastChild())  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  >  left.getLastChild())  {	  if    (intIndex    <    0)    {    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  int  parentIndex  =  right.getParent();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  int  parentIndex  =  right.getParent();  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  right.getParent();	      	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  int  parentIndex  =  n.getParent();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  int  parentIndex  =  n.getParent();  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  n.getParent();	      	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  int  parentIndex  =  left.getParent();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  int  parentIndex  =  left.getParent();  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  left.getParent();	      	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  int  parent  =  left.getParent();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  int  parent  =  left.getParent();  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parent  =  left.getParent();	      	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  int  index  =  right.getIndex();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  int  index  =  right.getIndex();  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  index  =  right.getIndex();	      	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  int  parentIndex  =(int)n.getParent();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  int  parentIndex  =(int)n.getParent();  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)n.getParent();	      	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  int  parentIndex  =(int)n;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  int  parentIndex  =(int)n;  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)n;	      	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  if  (index  ==  intIndex)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if  (index  ==  intIndex)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  (index  ==  intIndex)  {	  if    (intIndex    ==    index)    {    	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  >=  left.getLastChild())  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0  ||  intIndex  >=  left.getLastChild())  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  >=  left.getLastChild())  {	  if    (intIndex    ==    0)    {    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >  right.getLastChild())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0  ||  index  >  right.getLastChild())  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >  right.getLastChild())  {	  if    (intIndex    <    0)    {    	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >  left.getLastChild())  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0  ||  index  >  left.getLastChild())  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >  left.getLastChild())  {	  if    (intIndex    <    0)    {    	non-compiled	[CE]  	8	None	replace
17	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >=  left.getLastChild())  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0  ||  index  >=  left.getLastChild())  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >=  left.getLastChild())  {	  if    (intIndex    <    0)    {    	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  if  ((  intIndex  >=  0)||(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if  ((  intIndex  >=  0)||(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  >=  0)||(index!=  INVALID_GETELEM_INDEX_ERROR))  {	  if    (index!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  if  ((  intIndex  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if  ((  intIndex  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {	  if    (index!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  if  ((  intIndex  >=  0)&&(intIndex!=  left.getLastChild()))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if  ((  intIndex  >=  0)&&(intIndex!=  left.getLastChild()))  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  >=  0)&&(intIndex!=  left.getLastChild()))  {	  if    (index!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  if  ((  intIndex  >=  0)&&(index!=  left.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if  ((  intIndex  >=  0)&&(index!=  left.getLastChild()))  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  >=  0)&&(index!=  left.getLastChild()))  {	  if    (index!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  if  ((  intIndex  >=  0)&&(index!=  right.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if  ((  intIndex  >=  0)&&(index!=  right.getLastChild()))  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  >=  0)&&(index!=  right.getLastChild()))  {	  if    (index!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  if  (intIndex  >  index)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if  (intIndex  >  index)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  (intIndex  >  index)  {	  if    (intIndex    >=    index)    {    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  if(intIndex  >=  -1)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  >=  -1)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  -1)  {	  if    (intIndex    ==    0)    {    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }	      	non-compiled	[CE]  	5	None	replace
26	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }	      	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	5	None	replace
28	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_RANGE,  left);  return  n;  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_RANGE,  left);  return  n;  }  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INDEX_OUT_OF_RANGE,  left);  return  n;  }	      	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  if(intIndex  <=  0)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <=  0)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <=  0)  {	  if    (intIndex    ==    0)    {    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >  right.getLength())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0  ||  index  >  right.getLength())  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >  right.getLength())  {	  if    (intIndex    >=    0)    {    	non-compiled	[CE]  	2	None	replace
34	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR)  {	  if    (index!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index!=  intIndex)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index!=  intIndex)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index!=  intIndex)  {	  if    (index!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
36	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  intIndex)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  intIndex)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  intIndex)  {	  if    (index!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
37	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }	      	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }	      	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  if(intIndex  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;    [BUGGY]  if(intIndex  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]    error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  MAX_FOLD_NUMBER_ERROR)  {	  if    (intIndex    <    0)    {    	non-compiled	[CE]  	8	None	replace
