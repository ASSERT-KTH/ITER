bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  parentIndex  =  right.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  right.getNext();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  right.getNext();	  int    parentIndex    =    n.getParent();    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  int  parentIndex  =  left.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  left.getNext();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  left.getNext();	  int    parentIndex    =    n.getParent();    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  int  parentIndex  =  current.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  current.getParent();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  current.getParent();	  int    parentIndex    =    n.getParent();    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  if((  intIndex  >>  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >>  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >>  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {	  if    ((    intIndex    >=    0)||(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	18	None	replace
5	[BUG]  [BUGGY]  if((  index  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  index  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  index  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {	  if    ((    intIndex    >=    0)||(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	18	None	replace
6	[BUG]  [BUGGY]  if((  index  >=  0)||(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  index  >=  0)||(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  index  >=  0)||(index!=  INVALID_GETELEM_INDEX_ERROR))  {	  if    ((    intIndex    >=    0)||(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	18	None	replace
7	[BUG]  [BUGGY]  if((  intIndex  >=  0)||(index  ==  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)||(index  ==  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)||(index  ==  INVALID_GETELEM_INDEX_ERROR))  {	  if    ((    intIndex    >=    0)||(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	18	None	replace
8	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  >=  left.getFirstChild())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  >=  left.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getLastChild())    {    	non-compiled	[CE]  	14	None	replace
9	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  >=  right.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  >=  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  >=  right.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getLastChild())    {    	non-compiled	[CE]  	14	None	replace
10	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  left.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0  ||  intIndex  >=  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getLastChild())    {    	non-compiled	[CE]  	14	None	replace
11	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  >  left.getFirstChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  >  left.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  >  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getLastChild())    {    	non-compiled	[CE]  	14	None	replace
12	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  ==  left.getFirstChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  ==  left.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  ==  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getLastChild())    {    	non-compiled	[CE]  	14	None	replace
13	[BUG]  [BUGGY]  if(intIndex  >=  intIndex)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  intIndex)  {	  if    (index    >=    intIndex)    {    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  &&  index!=  intIndex)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  &&  index!=  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR  &&  index!=  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index!=    intIndex)    {    	non-compiled	[CE]  	35	None	replace
15	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index!=  intIndex)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index!=  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index!=  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index!=    intIndex)    {    	non-compiled	[CE]  	35	None	replace
16	[BUG]  [BUGGY]  if(index!=  intIndex  ||  index!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index!=  intIndex  ||  index!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  intIndex  ||  index!=  INVALID_GETELEM_INDEX_ERROR)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index!=    intIndex)    {    	non-compiled	[CE]  	35	None	replace
17	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  &&  index!=  intIndex)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  &&  index!=  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  &&  index!=  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index!=    intIndex)    {    	non-compiled	[CE]  	35	None	replace
18	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  intIndex)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index!=    intIndex)    {    	non-compiled	[CE]  	35	None	replace
19	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index!=  right.getLastChild())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index!=  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index!=  right.getLastChild())  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index!=    intIndex)    {    	non-compiled	[CE]  	35	None	replace
20	[BUG]  [BUGGY]  if(intIndex!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  INVALID_GETELEM_INDEX_ERROR)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  	34	None	replace
21	[BUG]  [BUGGY]  if(intIndex  >=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  INVALID_GETELEM_INDEX_ERROR)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  	34	None	replace
22	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  	34	None	replace
23	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  intIndex)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  	34	None	replace
24	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
25	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
26	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
27	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
28	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
29	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  index);  return  n;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  index);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  index);  return  n;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    right);    return    n;    }    	non-compiled	[CE]  	26	None	replace
30	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    right);    return    n;    }    	non-compiled	[CE]  	26	None	replace
31	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    right);    return    n;    }    	non-compiled	[CE]  	26	None	replace
32	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    right);    return    n;    }    	non-compiled	[CE]  	26	None	replace
33	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    right);    return    n;    }    	non-compiled	[CE]  	26	None	replace
34	[BUG]  [BUGGY]  int  parentIndex  =(int)n.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)n.getNext();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)n.getNext();	  int    parentIndex    =(int)n.getParent();    	non-compiled	[CE]  	11	None	replace
35	[BUG]  [BUGGY]  int  parentIndex  =(int)n.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)n.getLastChild();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)n.getLastChild();	  int    parentIndex    =(int)n.getParent();    	non-compiled	[CE]  	11	None	replace
36	[BUG]  [BUGGY]  int  parentIndex  =(int)right.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)right.getParent();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)right.getParent();	  int    parentIndex    =(int)n.getParent();    	non-compiled	[CE]  	11	None	replace
37	[BUG]  [BUGGY]  int  parentIndex  =(int)n.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)n.getFirstChild();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)n.getFirstChild();	  int    parentIndex    =(int)n.getParent();    	non-compiled	[CE]  	11	None	replace
38	[BUG]  [BUGGY]  int  parentIndex  =(int)n.getPrevious();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)n.getPrevious();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)n.getPrevious();	  int    parentIndex    =(int)n.getParent();    	non-compiled	[CE]  	11	None	replace
39	[BUG]  [BUGGY]  int  parentIndex  =(int)n.getParent()  -  1;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)n.getParent()  -  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)n.getParent()  -  1;	  int    parentIndex    =(int)n.getParent();    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  if(intIndex  ==  intIndex)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  ==  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  ==  intIndex)  {	  if    (index    ==    intIndex)    {    	non-compiled	[CE]  	13	None	replace
41	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
42	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
43	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
44	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSTANCE_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INSTANCE_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSTANCE_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
45	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
46	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index!=  left.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index!=  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index!=  left.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    left.getLastChild()))    {    	non-compiled	[CE]  	21	None	replace
47	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(left!=  right.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(left!=  right.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(left!=  right.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    left.getLastChild()))    {    	non-compiled	[CE]  	21	None	replace
48	[BUG]  [BUGGY]  if((  index  >=  0)&&(index!=  left.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  index  >=  0)&&(index!=  left.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  index  >=  0)&&(index!=  left.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    left.getLastChild()))    {    	non-compiled	[CE]  	21	None	replace
49	[BUG]  [BUGGY]  if(intIndex!=  -1)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex!=  -1)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  -1)  {	  if(intIndex    >=    -1)    {    	non-compiled	[CE]  	24	None	replace
50	[BUG]  [BUGGY]  if(intIndex  ==  -1)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  ==  -1)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  ==  -1)  {	  if(intIndex    >=    -1)    {    	non-compiled	[CE]  	24	None	replace
51	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getLength())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >=  right.getLength())  {	  if(intIndex    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	33	None	replace
52	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  ==  right.getLength())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  ==  right.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  ==  right.getLength())  {	  if(intIndex    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	33	None	replace
53	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  right.getLength())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <  0  ||  index  >=  right.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <  0  ||  index  >=  right.getLength())  {	  if(intIndex    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	33	None	replace
54	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index!=  right.getLength())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index!=  right.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index!=  right.getLength())  {	  if(intIndex    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	33	None	replace
55	[BUG]  [BUGGY]  if(index  <  0  ||  index  >  right.getLength())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <  0  ||  index  >  right.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <  0  ||  index  >  right.getLength())  {	  if(intIndex    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	33	None	replace
56	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  <  right.getLength())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  <  right.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  <  right.getLength())  {	  if(intIndex    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	33	None	replace
57	[BUG]  [BUGGY]  int  parentIndex  =  left.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  left.getLastChild();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  left.getLastChild();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  int  parentIndex  =  left.getParent()  -  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  left.getParent()  -  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  left.getParent()  -  1;	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >=  right.getLastChild())  {	  if(intIndex    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  	15	None	replace
60	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  right.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <  0  ||  index  >=  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <  0  ||  index  >=  right.getLastChild())  {	  if(intIndex    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  	15	None	replace
61	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  ==  right.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  ==  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  ==  right.getLastChild())  {	  if(intIndex    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  	15	None	replace
62	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index!=  right.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index!=  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index!=  right.getLastChild())  {	  if(intIndex    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  	15	None	replace
63	[BUG]  [BUGGY]  if(index  <  0  ||  index  >  right.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <  0  ||  index  >  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <  0  ||  index  >  right.getLastChild())  {	  if(intIndex    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  	15	None	replace
64	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  <  right.getLastChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  <  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  <  right.getLastChild())  {	  if(intIndex    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  	15	None	replace
65	[BUG]  [BUGGY]  if(index  <  0  ||  index  ==  right.getLastChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <  0  ||  index  ==  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <  0  ||  index  ==  right.getLastChild())  {	  if(intIndex    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  	15	None	replace
66	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  right);  return  n;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  right);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  right);  return  n;  }	  if(intIndex    <    0)    {    error(INSOLID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	37	None	replace
67	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  INVALID_GETELEM_INDEX_ERROR;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  INVALID_GETELEM_INDEX_ERROR;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  INVALID_GETELEM_INDEX_ERROR;  }	  if(intIndex    <    0)    {    error(INSOLID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	37	None	replace
68	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  intIndex;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  intIndex;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  intIndex;  }	  if(intIndex    <    0)    {    error(INSOLID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	37	None	replace
69	[BUG]  [BUGGY]  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;	  if(intIndex    <    0)    {    error(INSOLID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	37	None	replace
70	[BUG]  [BUGGY]  if(intIndex  >=  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INSOLID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	37	None	replace
71	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(intIndex!=  left.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(intIndex!=  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(intIndex!=  left.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(intIndex!=    left.getLastChild()))    {    	non-compiled	[CE]  	20	None	replace
72	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(intIndex!=  right.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(intIndex!=  right.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(intIndex!=  right.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(intIndex!=    left.getLastChild()))    {    	non-compiled	[CE]  	20	None	replace
73	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(intIndex  >=  left.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(intIndex  >=  left.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(intIndex  >=  left.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(intIndex!=    left.getLastChild()))    {    	non-compiled	[CE]  	20	None	replace
74	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(intIndex  >=  left.getFirstChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(intIndex  >=  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(intIndex  >=  left.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(intIndex!=    left.getLastChild()))    {    	non-compiled	[CE]  	20	None	replace
75	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  ==  right.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  ==  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  ==  right.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	2	None	replace
76	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  <  right.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  <  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  <  right.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	2	None	replace
77	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  >  right.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0  ||  intIndex  >  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0  ||  intIndex  >  right.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	2	None	replace
78	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  >  right.getFirstChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  >  right.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  >  right.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	2	None	replace
79	[BUG]  [BUGGY]  int  parentIndex  =(int)n  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)n  +  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)n  +  1;	  int    parentIndex    =(int)n;    	non-compiled	[CE]  	12	None	replace
80	[BUG]  [BUGGY]  int  parentIndex  =(int)n  -  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)n  -  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)n  -  1;	  int    parentIndex    =(int)n;    	non-compiled	[CE]  	12	None	replace
81	[BUG]  [BUGGY]  int  parentIndex  =(int)index;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)index;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)index;	  int    parentIndex    =(int)n;    	non-compiled	[CE]  	12	None	replace
82	[BUG]  [BUGGY]  int  parentIndex  =(int)n  -  index;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)n  -  index;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)n  -  index;	  int    parentIndex    =(int)n;    	non-compiled	[CE]  	12	None	replace
83	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  null;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  null;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	25	None	replace
84	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  intIndex;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  intIndex;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  intIndex;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	25	None	replace
85	[BUG]  [BUGGY]  if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	25	None	replace
86	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	25	None	replace
87	[BUG]  [BUGGY]  int  parentIndex  =  right.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  right.getLastChild();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  right.getLastChild();	  int    parentIndex    =    right.getParent();    	non-compiled	[CE]  	6	None	replace
88	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  ==  left.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  ==  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  ==  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	5	None	replace
89	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  <  left.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  <  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  <  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	5	None	replace
90	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  <  left.getFirstChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  <  left.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  <  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >    left.getLastChild())    {    	non-compiled	[CE]  	5	None	replace
91	[BUG]  [BUGGY]  if(index  >  0)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >  0)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >  0)  {	  if(intIndex    >    0)    {    	non-compiled	[CE]  	1	None	replace
92	[BUG]  [BUGGY]  if(intIndex  >=  right.getIndex())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  right.getIndex())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  right.getIndex())  {	  if(intIndex!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
93	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  ==  left.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  ==  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  ==  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
94	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  left.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <  0  ||  index  >=  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <  0  ||  index  >=  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
95	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index!=  left.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index!=  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index!=  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
96	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  <  left.getLastChild())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  <  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  <  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
97	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >=  left.getFirstChild())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  >=  left.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    >    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
98	[BUG]  [BUGGY]  if(index  <  0  ||  index  ==  left.getLastChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <  0  ||  index  ==  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <  0  ||  index  ==  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
99	[BUG]  [BUGGY]  if(index  <=  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <=  0)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <=  0)  {	  if(intIndex    <=    0)    {    	non-compiled	[CE]  	32	None	replace
100	[BUG]  [BUGGY]  if(intIndex  <=  0  ||  index  >=  right.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <=  0  ||  index  >=  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <=  0  ||  index  >=  right.getLastChild())  {	  if(intIndex    <=    0)    {    	non-compiled	[CE]  	32	None	replace
101	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  left);  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  left);	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
102	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  right);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  right);  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  right);	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
103	[BUG]  [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  error(INVALID_GETELEM_INDEX_ERROR,  intIndex);  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	error(INVALID_GETELEM_INDEX_ERROR,  intIndex);	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
104	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  Context.reportCodeChange();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	Context.reportCodeChange();	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
105	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY));	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
106	[BUG]  [BUGGY]  if  (index  >  intIndex)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if  (index  >  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  (index  >  intIndex)  {	  if    (intIndex    >    index)    {    	non-compiled	[CE]  	23	None	replace
107	[BUG]  [BUGGY]  int  index  =  right.getIndex()  -  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  index  =  right.getIndex()  -  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  index  =  right.getIndex()  -  1;	  int    index    =    right.getIndex();    	non-compiled	[CE]  	10	None	replace
108	[BUG]  [BUGGY]  int  index  =  left.getIndex();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  index  =  left.getIndex();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  index  =  left.getIndex();	  int    index    =    right.getIndex();    	non-compiled	[CE]  	10	None	replace
109	[BUG]  [BUGGY]  int  index  =  right.getIndex()  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  index  =  right.getIndex()  +  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  index  =  right.getIndex()  +  1;	  int    index    =    right.getIndex();    	non-compiled	[CE]  	10	None	replace
110	[BUG]  [BUGGY]  int  index  =  n.getIndex();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  index  =  n.getIndex();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  index  =  n.getIndex();	  int    index    =    right.getIndex();    	non-compiled	[CE]  	10	None	replace
111	[BUG]  [BUGGY]  int  index  =  right.getIndex()  -  2;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  index  =  right.getIndex()  -  2;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  index  =  right.getIndex()  -  2;	  int    index    =    right.getIndex();    	non-compiled	[CE]  	10	None	replace
112	[BUG]  [BUGGY]  int  index  =  parent.getIndex();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  index  =  parent.getIndex();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  index  =  parent.getIndex();	  int    index    =    right.getIndex();    	non-compiled	[CE]  	10	None	replace
113	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index  ==  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index  ==  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index  ==  INVALID_GETELEM_INDEX_ERROR))  {	  if    ((    intIndex    >=    0)&&(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	19	None	replace
114	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  right.getLength()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  right.getLength()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  right.getLength()))  {	  if    ((    intIndex    >=    0)&&(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	19	None	replace
115	[BUG]  [BUGGY]  if(intIndex  <=  0)  {  error(INDEX_OUT_OF_RANGE,  left);  return  n;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <=  0)  {  error(INDEX_OUT_OF_RANGE,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <=  0)  {  error(INDEX_OUT_OF_RANGE,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INDEX_OUT_OF_RANGE,    left);    return    n;    }    	non-compiled	[CE]  	30	None	replace
116	[BUG]  [BUGGY]  if(intIndex  >=  0)  {  error(INDEX_OUT_OF_RANGE,  left);  return  n;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0)  {  error(INDEX_OUT_OF_RANGE,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0)  {  error(INDEX_OUT_OF_RANGE,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INDEX_OUT_OF_RANGE,    left);    return    n;    }    	non-compiled	[CE]  	30	None	replace
117	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  left.getFirstChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <  0  ||  index  >=  left.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <  0  ||  index  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	17	None	replace
118	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  ==  left.getFirstChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  ==  left.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  ==  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	17	None	replace
119	[BUG]  [BUGGY]  Error(INVALID_GETELEM_INDEX_ERROR,  left);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  Error(INVALID_GETELEM_INDEX_ERROR,  left);  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	Error(INVALID_GETELEM_INDEX_ERROR,  left);	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
120	[BUG]  [BUGGY]  Error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  Error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	Error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
121	[BUG]  [BUGGY]  Error(INVALID_GETELEM_INDEX_ERROR,  right);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  Error(INVALID_GETELEM_INDEX_ERROR,  right);  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	Error(INVALID_GETELEM_INDEX_ERROR,  right);	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
122	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  right);  return  n;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  right);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  right);  return  n;  }	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
123	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  INVALID_GETELEM_INDEX_ERROR;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  INVALID_GETELEM_INDEX_ERROR;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  INVALID_GETELEM_INDEX_ERROR;  }	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
124	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  intIndex;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  intIndex;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  intIndex;  }	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
125	[BUG]  [BUGGY]  if(intIndex  >=  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
126	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  index;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  index;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  index;  }	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
127	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  null;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  null;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  null;  }	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
128	[BUG]  [BUGGY]  int  parent  =  right.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parent  =  right.getParent();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parent  =  right.getParent();	  int    parent    =    left.getParent();    	non-compiled	[CE]  	9	None	replace
129	[BUG]  [BUGGY]  int  parent  =  left.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parent  =  left.getNext();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parent  =  left.getNext();	  int    parent    =    left.getParent();    	non-compiled	[CE]  	9	None	replace
130	[BUG]  [BUGGY]  int  parent  =  left.getParent()  -  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parent  =  left.getParent()  -  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parent  =  left.getParent()  -  1;	  int    parent    =    left.getParent();    	non-compiled	[CE]  	9	None	replace
131	[BUG]  [BUGGY]  int  parent  =  left.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parent  =  left.getLastChild();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parent  =  left.getLastChild();	  int    parent    =    left.getParent();    	non-compiled	[CE]  	9	None	replace
132	[BUG]  [BUGGY]  int  parent  =  n.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parent  =  n.getParent();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parent  =  n.getParent();	  int    parent    =    left.getParent();    	non-compiled	[CE]  	9	None	replace
133	[BUG]  [BUGGY]  int  parent  =  right.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parent  =  right.getNext();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parent  =  right.getNext();	  int    parent    =    left.getParent();    	non-compiled	[CE]  	9	None	replace
134	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  &&  index  >=  intIndex)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  &&  index  >=  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR  &&  index  >=  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
135	[BUG]  [BUGGY]  if(index  >=  intIndex  ||  index!=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  intIndex  ||  index!=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  intIndex  ||  index!=  INVALID_GETELEM_INDEX_ERROR)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
136	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  intIndex)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
137	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLastChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLastChild())  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
138	[BUG]  [BUGGY]  if(intIndex!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLastChild())  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLastChild())  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
139	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index!=  right.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index!=  right.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index!=  right.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    right.getLastChild()))    {    	non-compiled	[CE]  	22	None	replace
140	[BUG]  [BUGGY]  if((  index  >=  0)&&(index!=  right.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  index  >=  0)&&(index!=  right.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  index  >=  0)&&(index!=  right.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    right.getLastChild()))    {    	non-compiled	[CE]  	22	None	replace
141	[BUG]  [BUGGY]  if(intIndex  >=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  MAX_FOLD_NUMBER_ERROR)  {	  if(intIndex    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  	39	None	replace
142	[BUG]  [BUGGY]  if(intIndex  <  MAX_FOLD_NUMBER_ERROR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  MAX_FOLD_NUMBER_ERROR)  {	  if(intIndex    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  	39	None	replace
143	[BUG]  [BUGGY]  if(intIndex  ==  MAX_FOLD_NUMBER_ERROR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  ==  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  ==  MAX_FOLD_NUMBER_ERROR)  {	  if(intIndex    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  	39	None	replace
144	[BUG]  [BUGGY]  if(index  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >  MAX_FOLD_NUMBER_ERROR)  {	  if(intIndex    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  	39	None	replace
145	[BUG]  [BUGGY]  if(intIndex  <=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <=  MAX_FOLD_NUMBER_ERROR)  {	  if(intIndex    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  	39	None	replace
146	[BUG]  [BUGGY]  if(intIndex!=  MAX_FOLD_NUMBER_ERROR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex!=  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  MAX_FOLD_NUMBER_ERROR)  {	  if(intIndex    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  	39	None	replace
147	[BUG]  [BUGGY]  if(index  ==  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  intIndex)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  ==  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  ==  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
148	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLength())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLength())  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
149	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getIndex())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getIndex())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getIndex())  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
150	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLength())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  right.getLength())  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
151	[BUG]  [BUGGY]  if((  intIndex  >=  0)||(index!=  0))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)||(index!=  0))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)||(index!=  0))  {	  if    ((    intIndex    >=    0)||(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	18	None	replace
152	[BUG]  [BUGGY]  if((  intIndex  <  0)||(index  >=  0))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  <  0)||(index  >=  0))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  <  0)||(index  >=  0))  {	  if    ((    intIndex    >=    0)||(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	18	None	replace
153	[BUG]  [BUGGY]  int  parentIndex  =(int)left.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)left.getParent();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)left.getParent();	  int    parentIndex    =(int)n.getParent();    	non-compiled	[CE]  	11	None	replace
154	[BUG]  [BUGGY]  int  parentIndex  =(int)right.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)right.getNext();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)right.getNext();	  int    parentIndex    =(int)n.getParent();    	non-compiled	[CE]  	11	None	replace
155	[BUG]  [BUGGY]  if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
156	[BUG]  [BUGGY]  int  parentIndex  =  right.getParent()  -  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  right.getParent()  -  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  right.getParent()  -  1;	  int    parentIndex    =    right.getParent();    	non-compiled	[CE]  	6	None	replace
157	[BUG]  [BUGGY]  Error(INVALID_GETELEM_INDEX_ERROR,  left.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  Error(INVALID_GETELEM_INDEX_ERROR,  left.getString());  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	Error(INVALID_GETELEM_INDEX_ERROR,  left.getString());	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
158	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >=  left.getLength())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  >=  left.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >=  left.getLength())  {	  if(intIndex    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	33	None	replace
159	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  index  <  right.getLength())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0  &&  index  <  right.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0  &&  index  <  right.getLength())  {	  if(intIndex    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	33	None	replace
160	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  >=  right.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >=  right.getFirstChild())  {	  if(intIndex    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  	15	None	replace
161	[BUG]  [BUGGY]  int  parent  =  left.getPreviousChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parent  =  left.getPreviousChild();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parent  =  left.getPreviousChild();	  int    parent    =    left.getParent();    	non-compiled	[CE]  	9	None	replace
162	[BUG]  [BUGGY]  int  parent  =  left.getParent()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parent  =  left.getParent()  +  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parent  =  left.getParent()  +  1;	  int    parent    =    left.getParent();    	non-compiled	[CE]  	9	None	replace
163	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  <  left.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  &&  index  <  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  &&  index  <  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
164	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  index  <  left.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0  &&  index  <  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0  &&  index  <  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
165	[BUG]  [BUGGY]  if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
166	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
167	[BUG]  [BUGGY]  if(intIndex  ==  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  ==  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  ==  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
168	[BUG]  [BUGGY]  if(intIndex  >=  -1)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  -1)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  -1)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
169	[BUG]  [BUGGY]  if(intIndex!=  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex!=  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
170	[BUG]  [BUGGY]  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	error(INST_GETELEM_INDEX_ERROR,  left);  return  n;	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
171	[BUG]  [BUGGY]  if(intIndex  <  0  &&  index  >=  left.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  &&  index  >=  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  &&  index  >=  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	17	None	replace
172	[BUG]  [BUGGY]  if(intIndex  >=  0  &&  index  >=  left.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0  &&  index  >=  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0  &&  index  >=  left.getLastChild())  {	  if(intIndex    <    0    ||    index    >=    left.getLastChild())    {    	non-compiled	[CE]  	17	None	replace
173	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index  ==  left.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index  ==  left.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index  ==  left.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    right.getLastChild()))    {    	non-compiled	[CE]  	22	None	replace
174	[BUG]  [BUGGY]  if(intIndex  ==  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  ==  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  ==  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INSOLID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	37	None	replace
175	[BUG]  [BUGGY]  if(intIndex  >=  -1)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  -1)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  -1)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INSOLID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	37	None	replace
176	[BUG]  [BUGGY]  if(intIndex!=  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex!=  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INSOLID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	37	None	replace
177	[BUG]  [BUGGY]  if  ((  intIndex  >=  0)||(index  >=  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if  ((  intIndex  >=  0)||(index  >=  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  >=  0)||(index  >=  INVALID_GETELEM_INDEX_ERROR))  {	  if    (index    >=    intIndex)    {    	non-compiled	[CE]  	4	None	replace
178	[BUG]  [BUGGY]  if  ((  intIndex  >=  0)||(intIndex  >=  left.getLastChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if  ((  intIndex  >=  0)||(intIndex  >=  left.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  >=  0)||(intIndex  >=  left.getLastChild()))  {	  if    (index    >=    intIndex)    {    	non-compiled	[CE]  	4	None	replace
179	[BUG]  [BUGGY]  if(intIndex  >  MAX_FOLD_NUMBER)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >  MAX_FOLD_NUMBER)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  MAX_FOLD_NUMBER)  {	  if(intIndex    >    0)    {    	non-compiled	[CE]  	1	None	replace
180	[BUG]  [BUGGY]  if(intIndex  <  0  &&  intIndex  >=  left.getLastChild())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  &&  intIndex  >=  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  &&  intIndex  >=  left.getLastChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getLastChild())    {    	non-compiled	[CE]  	14	None	replace
181	[BUG]  [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  left.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0  ||  intIndex  >=  left.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0  ||  intIndex  >=  left.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >=    left.getLastChild())    {    	non-compiled	[CE]  	14	None	replace
182	[BUG]  [BUGGY]  if(index  ==  INVALID_GETELEM_INDEX_ERROR  ||  index!=  intIndex)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  ==  INVALID_GETELEM_INDEX_ERROR  ||  index!=  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  ==  INVALID_GETELEM_INDEX_ERROR  ||  index!=  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index!=    intIndex)    {    	non-compiled	[CE]  	35	None	replace
183	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  right.getLastChild())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  right.getLastChild())  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index!=    intIndex)    {    	non-compiled	[CE]  	35	None	replace
184	[BUG]  [BUGGY]  if(index  ==  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  ==  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  ==  INVALID_GETELEM_INDEX_ERROR)  {	  if    (index    ==    intIndex)    {    	non-compiled	[CE]  	13	None	replace
185	[BUG]  [BUGGY]  if(index  ==  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  intIndex)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  ==  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  ==  INVALID_GETELEM_INDEX_ERROR  ||  index  ==  intIndex)  {	  if    (index    ==    intIndex)    {    	non-compiled	[CE]  	13	None	replace
186	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex  ==  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex  ==  0)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  intIndex  ==  0)  {	  if    (index    ==    intIndex)    {    	non-compiled	[CE]  	13	None	replace
187	[BUG]  [BUGGY]  if(intIndex!=  MAX_GETELEM_INDEX_ERROR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex!=  MAX_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  MAX_GETELEM_INDEX_ERROR)  {	  if(intIndex!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
188	[BUG]  [BUGGY]  if(intIndex!=  MAX_FOLD_NUMBER)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex!=  MAX_FOLD_NUMBER)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  MAX_FOLD_NUMBER)  {	  if(intIndex!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
189	[BUG]  [BUGGY]  if(intIndex!=  left.getIndex())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex!=  left.getIndex())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  left.getIndex())  {	  if(intIndex!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
190	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index  ==  left.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index  ==  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index  ==  left.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    left.getLastChild()))    {    	non-compiled	[CE]  	21	None	replace
191	[BUG]  [BUGGY]  if((  index  >=  0)&&(left!=  right.getLastChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  index  >=  0)&&(left!=  right.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  index  >=  0)&&(left!=  right.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    left.getLastChild()))    {    	non-compiled	[CE]  	21	None	replace
192	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  left.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR  ||  index  >=  left.getLastChild())  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  	34	None	replace
193	[BUG]  [BUGGY]  int  parentIndex  =  right.getPrevious();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  right.getPrevious();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  right.getPrevious();	  int    parentIndex    =    n.getParent();    	non-compiled	[CE]  	7	None	replace
194	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(intIndex  ==  left.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(intIndex  ==  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(intIndex  ==  left.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(intIndex!=    left.getLastChild()))    {    	non-compiled	[CE]  	20	None	replace
195	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(intIndex  ==  left.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(intIndex  ==  left.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(intIndex  ==  left.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(intIndex!=    left.getLastChild()))    {    	non-compiled	[CE]  	20	None	replace
196	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(left!=  left.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(left!=  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(left!=  left.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(intIndex!=    left.getLastChild()))    {    	non-compiled	[CE]  	20	None	replace
197	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  >=  right.getFirstChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  >=  right.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  >=  right.getFirstChild())  {	  if(intIndex    <    0    ||    intIndex    >    right.getLastChild())    {    	non-compiled	[CE]  	2	None	replace
198	[BUG]  [BUGGY]  int  parentIndex  =(int)parent;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)parent;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)parent;	  int    parentIndex    =(int)n;    	non-compiled	[CE]  	12	None	replace
199	[BUG]  [BUGGY]  int  parentIndex  =(int)right;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)right;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)right;	  int    parentIndex    =(int)n;    	non-compiled	[CE]  	12	None	replace
200	[BUG]  [BUGGY]  int  parentIndex  =(int)left;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =(int)left;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =(int)left;	  int    parentIndex    =(int)n;    	non-compiled	[CE]  	12	None	replace
201	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index!=  NEGATING_A_NON_NUMBER_ERROR))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index!=  NEGATING_A_NON_NUMBER_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index!=  NEGATING_A_NON_NUMBER_ERROR))  {	  if    ((    intIndex    >=    0)&&(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	19	None	replace
202	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index  ==  NEGATING_A_NON_NUMBER_ERROR))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index  ==  NEGATING_A_NON_NUMBER_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index  ==  NEGATING_A_NON_NUMBER_ERROR))  {	  if    ((    intIndex    >=    0)&&(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	19	None	replace
203	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR)||(intIndex  >=  0))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR)||(intIndex  >=  0))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR)||(intIndex  >=  0))  {	  if    ((    intIndex    >=    0)&&(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	19	None	replace
204	[BUG]  [BUGGY]  if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    right);    return    n;    }    	non-compiled	[CE]  	26	None	replace
205	[BUG]  [BUGGY]  if(intIndex  ==  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  ==  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  ==  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    right);    return    n;    }    	non-compiled	[CE]  	26	None	replace
206	[BUG]  [BUGGY]  if(intIndex  ==  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  ==  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  ==  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INDEX_OUT_OF_RANGE,    left);    return    n;    }    	non-compiled	[CE]  	30	None	replace
207	[BUG]  [BUGGY]  if(intIndex!=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex!=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex!=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INDEX_OUT_OF_RANGE,    left);    return    n;    }    	non-compiled	[CE]  	30	None	replace
208	[BUG]  [BUGGY]  if(intIndex  >=  -1)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  -1)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  -1)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INDEX_OUT_OF_RANGE,    left);    return    n;    }    	non-compiled	[CE]  	30	None	replace
209	[BUG]  [BUGGY]  int  parentIndex  =  left.getPreviousChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  left.getPreviousChild();  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  left.getPreviousChild();	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	8	None	replace
210	[BUG]  [BUGGY]  if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  null;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  null;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >=  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  null;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	25	None	replace
211	[BUG]  [BUGGY]  if(intIndex  >>  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >>  0)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >>  0)  {	  if(intIndex    <=    0)    {    	non-compiled	[CE]  	32	None	replace
212	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
213	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(RIGHT,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(RIGHT,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(RIGHT,  left);  return  n;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	28	None	replace
214	[BUG]  [BUGGY]  if((  index  >=  0)&&(index!=  left.getFirstChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  index  >=  0)&&(index!=  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  index  >=  0)&&(index!=  left.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    left.getLastChild()))    {    	non-compiled	[CE]  	21	None	replace
215	[BUG]  [BUGGY]  if((  intIndex  <  0)&&(index  >=  left.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  <  0)&&(index  >=  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  <  0)&&(index  >=  left.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    left.getLastChild()))    {    	non-compiled	[CE]  	21	None	replace
216	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
217	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
218	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( "  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( "  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( "	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
219	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( "  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( "  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException( "	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
220	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException(  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException(  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalStateException(	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	31	None	replace
221	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >  right.getFirstChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  >  right.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >  right.getFirstChild())  {	  if(intIndex    <    0    ||    index    >    right.getLastChild())    {    	non-compiled	[CE]  	15	None	replace
222	[BUG]  [BUGGY]  if(intIndex  >  MAX_FOLD_NUMBER_ERROR  ||  intIndex  <  0)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >  MAX_FOLD_NUMBER_ERROR  ||  intIndex  <  0)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  MAX_FOLD_NUMBER_ERROR  ||  intIndex  <  0)  {	  if(intIndex    >    MAX_FOLD_NUMBER_ERROR)    {    	non-compiled	[CE]  	39	None	replace
223	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index  ==  right.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index  ==  right.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index  ==  right.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    right.getLastChild()))    {    	non-compiled	[CE]  	22	None	replace
224	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(index  ==  right.getLastChild()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(index  ==  right.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(index  ==  right.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    right.getLastChild()))    {    	non-compiled	[CE]  	22	None	replace
225	[BUG]  [BUGGY]  if((  intIndex  <  0)||(index!=  right.getLastChild()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  <  0)||(index!=  right.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  <  0)||(index!=  right.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    right.getLastChild()))    {    	non-compiled	[CE]  	22	None	replace
226	[BUG]  [BUGGY]  if((  index  >=  0)&&(index!=  right.getFirstChild()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  index  >=  0)&&(index!=  right.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  index  >=  0)&&(index!=  right.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(index!=    right.getLastChild()))    {    	non-compiled	[CE]  	22	None	replace
227	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  >  MAX_FOLD_NUMBER_ERROR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  >  MAX_FOLD_NUMBER_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  >  MAX_FOLD_NUMBER_ERROR)  {	  if(intIndex    >    0)    {    	non-compiled	[CE]  	1	None	replace
228	[BUG]  [BUGGY]  if(intIndex  >  0  &&  index  <  right.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >  0  &&  index  <  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  0  &&  index  <  right.getLastChild())  {	  if(intIndex    >    0)    {    	non-compiled	[CE]  	1	None	replace
229	[BUG]  [BUGGY]  if(intIndex  >  0  &&  index  <=  left.getLastChild())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >  0  &&  index  <=  left.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  0  &&  index  <=  left.getLastChild())  {	  if(intIndex    >    0)    {    	non-compiled	[CE]  	1	None	replace
230	[BUG]  [BUGGY]  if(intIndex  >  0  &&  index  <=  left.getFirstChild().getIndex())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >  0  &&  index  <=  left.getFirstChild().getIndex())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  0  &&  index  <=  left.getFirstChild().getIndex())  {	  if(intIndex    >    0)    {    	non-compiled	[CE]  	1	None	replace
231	[BUG]  [BUGGY]  if(intIndex  >  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INDEX_OUT_OF_RANGE,    left);    return    n;    }    	non-compiled	[CE]  	30	None	replace
232	[BUG]  [BUGGY]  n  =  Math.min(INVALID_GETELEM_INDEX_ERROR,  left);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  n  =  Math.min(INVALID_GETELEM_INDEX_ERROR,  left);  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	n  =  Math.min(INVALID_GETELEM_INDEX_ERROR,  left);	  if(intIndex    <    0)    {    error(INDEX_OUT_OF_RANGE,    left);    return    n;    }    	non-compiled	[CE]  	30	None	replace
233	[BUG]  [BUGGY]  if(intIndex  ==  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  ==  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  ==  INVALID_GETELEM_INDEX_ERROR)  {	  if(intIndex!=    intIndex)    {    	non-compiled	[CE]  	3	None	replace
234	[BUG]  [BUGGY]  if(index  <  0)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <  0)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <  0)  {	  if    (index    ==    intIndex)    {    	non-compiled	[CE]  	13	None	replace
235	[BUG]  [BUGGY]  if  ((  intIndex  <  0)||(index  ==  left.getLastChild()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if  ((  intIndex  <  0)||(index  ==  left.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  <  0)||(index  ==  left.getLastChild()))  {	  if    (index    ==    intIndex)    {    	non-compiled	[CE]  	13	None	replace
236	[BUG]  [BUGGY]  if  ((  intIndex  <  0)||(index  ==  left.getString()  &&  index  <=  MAX_FOLD_NUMBER))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if  ((  intIndex  <  0)||(index  ==  left.getString()  &&  index  <=  MAX_FOLD_NUMBER))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  <  0)||(index  ==  left.getString()  &&  index  <=  MAX_FOLD_NUMBER))  {	  if    (index    ==    intIndex)    {    	non-compiled	[CE]  	13	None	replace
237	[BUG]  [BUGGY]  if  ((  intIndex  <  0)||(index  ==  right.getLastChild()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if  ((  intIndex  <  0)||(index  ==  right.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  <  0)||(index  ==  right.getLastChild()))  {	  if    (index    ==    intIndex)    {    	non-compiled	[CE]  	13	None	replace
238	[BUG]  [BUGGY]  if  ((  intIndex  <  0)||(index  ==  left.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if  ((  intIndex  <  0)||(index  ==  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if  ((  intIndex  <  0)||(index  ==  left.getFirstChild()))  {	  if    (index    ==    intIndex)    {    	non-compiled	[CE]  	13	None	replace
239	[BUG]  [BUGGY]  if(intIndex  <  0  ||  intIndex  >  right.getLength())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  intIndex  >  right.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  intIndex  >  right.getLength())  {	  if(intIndex    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	33	None	replace
240	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >  left.getLength())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  >  left.getLength())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >  left.getLength())  {	  if(intIndex    <    0    ||    index    >    right.getLength())    {    	non-compiled	[CE]  	33	None	replace
241	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	25	None	replace
242	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INDEX_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INDEX_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INDEX_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	25	None	replace
243	[BUG]  [BUGGY]  int  parentIndex  =  left.getParent()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  left.getParent()  +  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  left.getParent()  +  1;	  int    parentIndex    =    left.getParent();    	non-compiled	[CE]  	8	None	replace
244	[BUG]  [BUGGY]  if((  intIndex  <  0)&&(intIndex  >=  left.getFirstChild()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  <  0)&&(intIndex  >=  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  <  0)&&(intIndex  >=  left.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(intIndex!=    left.getLastChild()))    {    	non-compiled	[CE]  	20	None	replace
245	[BUG]  [BUGGY]  if((  intIndex  >=  0)&&(intIndex  ==  right.getLastChild()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  >=  0)&&(intIndex  ==  right.getLastChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  >=  0)&&(intIndex  ==  right.getLastChild()))  {	  if    ((    intIndex    >=    0)&&(intIndex!=    left.getLastChild()))    {    	non-compiled	[CE]  	20	None	replace
246	[BUG]  [BUGGY]  if((  intIndex  <  0)&&(intIndex  ==  left.getFirstChild()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  <  0)&&(intIndex  ==  left.getFirstChild()))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  <  0)&&(intIndex  ==  left.getFirstChild()))  {	  if    ((    intIndex    >=    0)&&(intIndex!=    left.getLastChild()))    {    	non-compiled	[CE]  	20	None	replace
247	[BUG]  [BUGGY]  if(intIndex  <  0  ||  index  >  left.getFirstChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0  ||  index  >  left.getFirstChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0  ||  index  >  left.getFirstChild())  {	  if(intIndex    <    0    ||    index    >    left.getLastChild())    {    	non-compiled	[CE]  	16	None	replace
248	[BUG]  [BUGGY]  if(index  >  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >  INVALID_GETELEM_INDEX_ERROR)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR)    {    	non-compiled	[CE]  	34	None	replace
249	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
250	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
251	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( "  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( "  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( "	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
252	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( "  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( "  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException( "	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
253	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException(  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException(  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INVALID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  for(int  i  =  0;  i  <  intIndex;  i++)  {  throw  new  IllegalArgumentException(	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    for(int    i    =    0;    i    <    intIndex;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
254	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
255	[BUG]  [BUGGY]  if(intIndex  <  0)  {  error(RIGHT,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <  0)  {  error(RIGHT,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <  0)  {  error(RIGHT,  left);  return  n;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    left);    return    n;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
256	[BUG]  [BUGGY]  if(intIndex  >  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  0)  {  error(INSOLID_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INSOLID_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	37	None	replace
257	[BUG]  [BUGGY]  if(intIndex  <=  0  ||  intIndex  >  right.getLastChild())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <=  0  ||  intIndex  >  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <=  0  ||  intIndex  >  right.getLastChild())  {	  if(intIndex    <=    0)    {    	non-compiled	[CE]  	32	None	replace
258	[BUG]  [BUGGY]  if(intIndex  <=  0  &&  index  <=  right.getLastChild())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <=  0  &&  index  <=  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <=  0  &&  index  <=  right.getLastChild())  {	  if(intIndex    <=    0)    {    	non-compiled	[CE]  	32	None	replace
259	[BUG]  [BUGGY]  if(intIndex  <=  0  ||  index  >  right.getLastChild())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  <=  0  ||  index  >  right.getLastChild())  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  <=  0  ||  index  >  right.getLastChild())  {	  if(intIndex    <=    0)    {    	non-compiled	[CE]  	32	None	replace
260	[BUG]  [BUGGY]  if((  intIndex  <  0)||(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  <  0)||(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  <  0)||(index!=  INVALID_GETELEM_INDEX_ERROR))  {	  if    ((    intIndex    >=    0)&&(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	19	None	replace
261	[BUG]  [BUGGY]  if((  intIndex  <  0)&&(index  ==  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  <  0)&&(index  ==  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  <  0)&&(index  ==  INVALID_GETELEM_INDEX_ERROR))  {	  if    ((    intIndex    >=    0)&&(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	19	None	replace
262	[BUG]  [BUGGY]  if((  intIndex  <  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  <  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  <  0)&&(index!=  INVALID_GETELEM_INDEX_ERROR))  {	  if    ((    intIndex    >=    0)&&(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	19	None	replace
263	[BUG]  [BUGGY]  if((  intIndex  <  0)||(index  ==  INVALID_GETELEM_INDEX_ERROR))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if((  intIndex  <  0)||(index  ==  INVALID_GETELEM_INDEX_ERROR))  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if((  intIndex  <  0)||(index  ==  INVALID_GETELEM_INDEX_ERROR))  {	  if    ((    intIndex    >=    0)||(index!=    INVALID_GETELEM_INDEX_ERROR))    {    	non-compiled	[CE]  	18	None	replace
264	[BUG]  [BUGGY]  Error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  Error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	Error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;	  if(intIndex    <    0)    {    error(INVALID_GETELEM_INDEX_ERROR,    right);    return    n;    }    	non-compiled	[CE]  	26	None	replace
265	[BUG]  [BUGGY]  if(intIndex  >  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  0)  {  error(INST_GETELEM_INDEX_ERROR,  left);  return  n;  }	  if(intIndex    <    0)    {    error(INST_GETELEM_INDEX_ERROR,    left);    return    n;    }    	non-compiled	[CE]  	38	None	replace
266	[BUG]  [BUGGY]  int  parentIndex  =  right.getParent()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  int  parentIndex  =  right.getParent()  +  1;  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	int  parentIndex  =  right.getParent()  +  1;	  int    parentIndex    =    right.getParent();    	non-compiled	[CE]  	6	None	replace
267	[BUG]  [BUGGY]  if(intIndex  >  -1)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(intIndex  >  -1)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(intIndex  >  -1)  {	  if(intIndex    >=    -1)    {    	non-compiled	[CE]  	24	None	replace
268	[BUG]  [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  &&  index  <  intIndex)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index!=  INVALID_GETELEM_INDEX_ERROR  &&  index  <  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index!=  INVALID_GETELEM_INDEX_ERROR  &&  index  <  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
269	[BUG]  [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >  intIndex)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >  intIndex)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  >=  INVALID_GETELEM_INDEX_ERROR  ||  index  >  intIndex)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
270	[BUG]  [BUGGY]  if(index  <  0  ||  index  >=  INVALID_GETELEM_INDEX_ERROR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (!right.isNumber())  {    return  n;  }  double  index  =  right.getDouble();  int  intIndex  =  (int)  index;      [BUGGY]  if(index  <  0  ||  index  >=  INVALID_GETELEM_INDEX_ERROR)  {  [BUGGY]      error(INVALID_GETELEM_INDEX_ERROR,  right);  return  n;  }  if  (intIndex  <  0)  {  error(INDEX_OUT_OF_BOUNDS_ERROR,  right);  return  n;  }  Node  current  =  left.getFirstChild();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldArrayAccess  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  index  lv  lval  negNum  numValue  result  rv  rval  val  value  int  i  intIndex  Node  current  elem  left  n  parent  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	1439	1439	1	replace	if(index  <  0  ||  index  >=  INVALID_GETELEM_INDEX_ERROR)  {	  if(index!=    INVALID_GETELEM_INDEX_ERROR    ||    index    >=    intIndex)    {    	non-compiled	[CE]  	36	None	replace
