bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteral(n,  left,  right);	  return    tryFoldObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
2	[BUG]  [BUGGY]  return  tryFoldObjectLit(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldObjectLit(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLit(n,  left,  right);	  return    tryFoldObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
3	[BUG]  [BUGGY]  return  tryFoldObjectLitArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldObjectLitArrayAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitArrayAccess(n,  left,  right);	  return    tryFoldLitArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
4	[BUG]  [BUGGY]  return  tryFoldRawArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldRawArrayAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRawArrayAccess(n,  left,  right);	  return    tryFoldLitArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
5	[BUG]  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.cloneTree());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropAccess(n,  left,  right.cloneTree());	  return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
6	[BUG]  [BUGGY]  return  tryFoldArrayPropLit(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayPropLit(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropLit(n,  left,  right);	  return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
7	[BUG]  [BUGGY]  return  tryFoldLocalPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldLocalPropAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLocalPropAccess(n,  left,  right);	  return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
8	[BUG]  [BUGGY]  return  tryFoldArrayObjectLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayObjectLitAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObjectLitAccess(n,  left,  right);	  return    tryFoldObjectLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
9	[BUG]  [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right,  false);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitAccess(n,  left,  right,  false);	  return    tryFoldObjectLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
10	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLit(n,  left,  right.cloneTree());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.cloneTree());	  return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
11	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  right,  left);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLit(n,  right,  left);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  right,  left);	  return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
12	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  false);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  false);	  return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
13	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayElem(n,  left,  right.cloneTree());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right.cloneTree());	  return    tryFoldArrayElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
14	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  false);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  false);	  return    tryFoldArrayElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
15	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  lval);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  lval);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  lval);	  return    tryFoldArrayElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
16	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  this);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  this);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  this);	  return    tryFoldArrayElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
17	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
18	[BUG]  [BUGGY]  Node  n  =  left.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  Node  n  =  left.getNext();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
19	[BUG]  [BUGGY]  n  =  left.getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  n  =  left.getNext();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.getNext();	      	non-compiled	[CE]  orphaned  case	7	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isArrayLit());	      	non-compiled	[CE]  orphaned  case	7	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldArrayPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldArrayPropAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isArrayLit());  return  tryFoldArrayPropAccess(n,  left,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
22	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isArrayLit());  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isArrayLit());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isArrayLit());	      	non-compiled	[CE]  orphaned  case	7	None	replace
23	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.cloneTree());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.cloneTree());	  return    tryFoldArrayLiteralAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
24	[BUG]  [BUGGY]  return  tryFoldObjectLiteralAccess(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldObjectLiteralAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLiteralAccess(n,  left,  right);	  return    tryFoldArrayLiteralAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
25	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.cloneTree());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right.cloneTree());	  return    tryFoldArrayLitPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
26	[BUG]  [BUGGY]  return  tryFoldLitPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldLitPropAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLitPropAccess(n,  left,  right);	  return    tryFoldArrayLitPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
27	[BUG]  [BUGGY]  return  tryFoldObjectLitPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldObjectLitPropAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitPropAccess(n,  left,  right);	  return    tryFoldArrayLitPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
28	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right);	  return    tryFoldArrayLitPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
29	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.cloneTree());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right.cloneTree());	  return    tryFoldArrayListAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
30	[BUG]  [BUGGY]  return  tryFoldListAccess(n,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldListAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldListAccess(n,  left,  right);	  return    tryFoldArrayListAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
31	[BUG]  [BUGGY]  return  tryFoldArrayListLit(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayListLit(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLit(n,  left,  right);	  return    tryFoldArrayListAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
32	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneTree());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.cloneTree());	  return    tryFoldArrayLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
33	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right  -  1);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right  -  1);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right  -  1);	  return    tryFoldArrayLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
34	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  right,  left);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitAccess(n,  right,  left);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  right,  left);	  return    tryFoldArrayLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
35	[BUG]  [BUGGY]  return  tryFoldLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldLitAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLitAccess(n,  left,  right);	  return    tryFoldArrayLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
36	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined());	  return    tryFoldArrayLiteralAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
37	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined());	  return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
38	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getLastChild());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getLastChild());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.getLastChild());	  return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
39	[BUG]  [BUGGY]  return  tryFoldArray(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArray(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArray(n,  left,  right);	  return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
40	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right  -  1);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayElem(n,  left,  right  -  1);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right  -  1);	  return    tryFoldArrayElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
41	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayValue(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  left,  right);	  return    tryFoldArrayElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldArrayLit(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isArrayLit());  return  tryFoldArrayLit(n,  left,  right);	      	non-compiled	[CE]  orphaned  case	7	None	replace
43	[BUG]  [BUGGY]  return  tryFoldArrayToArray(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayToArray(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayToArray(n,  left,  right);	  return    tryFoldObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
44	[BUG]  [BUGGY]  return  tryFoldArrayObjectPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayObjectPropAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObjectPropAccess(n,  left,  right);	  return    tryFoldObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
45	[BUG]  [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLitAccess(n,  left,  right);	  return    tryFoldArrayListAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
46	[BUG]  [BUGGY]  return  tryFoldArrayListViewAccess(n,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayListViewAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListViewAccess(n,  left,  right);	  return    tryFoldArrayListAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
47	[BUG]  [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccuracy(n,  left,  right);	  return    tryFoldArrayListAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	9	None	replace
48	[BUG]  [BUGGY]  return  tryFoldArrayLitObjectPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitObjectPropAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitObjectPropAccess(n,  left,  right);	  return    tryFoldArrayLitPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
49	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getLastChild());  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getLastChild());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.getLastChild());	  return    tryFoldArrayLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
50	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)+  1;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)+  1;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right)+  1;	  return    tryFoldArrayLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
51	[BUG]  [BUGGY]  return  tryFoldArrayPropLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayPropLitAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropLitAccess(n,  left,  right);	  return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
52	[BUG]  [BUGGY]  return  tryFoldCollectionLitArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldCollectionLitArrayAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldCollectionLitArrayAccess(n,  left,  right);	  return    tryFoldLitArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
53	[BUG]  [BUGGY]  return  tryFoldRightArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldRightArrayAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightArrayAccess(n,  left,  right);	  return    tryFoldLitArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	11	None	replace
54	[BUG]  [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayInsertion(n,  left,  right);	  return    tryFoldObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	5	None	replace
55	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  orphaned  case	7	None	replace
56	[BUG]  [BUGGY]  n.removeChild(left);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  n.removeChild(left);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.removeChild(left);	      	non-compiled	[CE]  orphaned  case	7	None	replace
57	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  false);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  false);	  return    tryFoldArrayLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
58	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  this);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  this);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  this);	  return    tryFoldArrayLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
59	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  lv);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  lv);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  lv);	  return    tryFoldArrayLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
60	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  this);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  this);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  this);	  return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
61	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  null);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  null);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  null);	  return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
62	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right)+  1;  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLit(n,  left,  right)+  1;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right)+  1;	  return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
63	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined);	  return    tryFoldArrayLiteralAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
64	[BUG]  [BUGGY]  return  tryFoldRightLiteralAccess(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldRightLiteralAccess(n,  left,  right);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightLiteralAccess(n,  left,  right);	  return    tryFoldArrayLiteralAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
65	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  null);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  null);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  null);	  return    tryFoldArrayElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
66	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  undefined);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  undefined);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  undefined);	  return    tryFoldArrayElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
67	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {    [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right,  false);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right,  false);	  return    tryFoldArrayLitPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	10	None	replace
