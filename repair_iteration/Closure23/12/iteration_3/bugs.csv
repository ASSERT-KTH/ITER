bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldArrayListLit(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLit(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLit(n,  left,  right.cloneTree());	  return    tryFoldArrayListLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	31	None	replace
2	[BUG]  [BUGGY]  return  tryFoldArrayListLit(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLit(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLit(n,  left,  right,  false);	  return    tryFoldArrayListLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	31	None	replace
3	[BUG]  [BUGGY]  return  tryFoldArrayListLit(n,  left,  right,  lval);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLit(n,  left,  right,  lval);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLit(n,  left,  right,  lval);	  return    tryFoldArrayListLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	31	None	replace
4	[BUG]  [BUGGY]  return  tryFoldListLit(n,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldListLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldListLit(n,  left,  right);	  return    tryFoldArrayListLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	31	None	replace
5	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneTree()  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneTree()  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.cloneTree()  -  1);	  return    tryFoldArrayLitAccess(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	33	None	replace
6	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right  +  1);	  return    tryFoldArrayLitAccess(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	33	None	replace
7	[BUG]  [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitAccess(n,  left,  right  -  1);	  return    tryFoldArrayLitAccess(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	33	None	replace
8	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right  -  2);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right  -  2);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right  -  2);	  return    tryFoldArrayLitAccess(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	33	None	replace
9	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)-  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right)-  1;	  return    tryFoldArrayLitAccess(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	33	None	replace
10	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  true);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  true);	  return    tryFoldArrayElem(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	14	None	replace
11	[BUG]  [BUGGY]  return  tryFoldRightArrayElem(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightArrayElem(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightArrayElem(n,  left,  right,  false);	  return    tryFoldArrayElem(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	14	None	replace
12	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  right,  left,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  right,  left,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  right,  left,  false);	  return    tryFoldArrayElem(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	14	None	replace
13	[BUG]  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectPropAccess(n,  left,  right,  false);	  return    tryFoldArrayElem(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	14	None	replace
14	[BUG]  [BUGGY]  return  tryFoldArrayPropLit(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropLit(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropLit(n,  left,  right.cloneTree());	  return    tryFoldArrayPropLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
15	[BUG]  [BUGGY]  return  tryFoldObjectPropLit(n,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectPropLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectPropLit(n,  left,  right);	  return    tryFoldArrayPropLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
16	[BUG]  [BUGGY]  return  tryFoldExpressionPropLit(n,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldExpressionPropLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldExpressionPropLit(n,  left,  right);	  return    tryFoldArrayPropLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
17	[BUG]  [BUGGY]  return  tryFoldArrayPropLit(n,  left,  right  -  1);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropLit(n,  left,  right  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropLit(n,  left,  right  -  1);	  return    tryFoldArrayPropLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
18	[BUG]  [BUGGY]  return  tryFoldArrayObjectLit(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayObjectLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObjectLit(n,  left,  right);	  return    tryFoldObjectLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
19	[BUG]  [BUGGY]  return  tryFoldObjectLit(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLit(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLit(n,  left,  right,  false);	  return    tryFoldObjectLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
20	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right,  false.cloneTree());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right,  false.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right,  false.cloneTree());	  return    tryFoldArrayListAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	29	None	replace
21	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.clone());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.clone());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right.clone());	  return    tryFoldArrayListAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	29	None	replace
22	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right,  left.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right,  left.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right,  left.cloneTree());	  return    tryFoldArrayListAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	29	None	replace
23	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right,  n.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right,  n.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right,  n.cloneTree());	  return    tryFoldArrayListAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	29	None	replace
24	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.cloneTree(),  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.cloneTree(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right.cloneTree(),  false);	  return    tryFoldArrayListAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	29	None	replace
25	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  null);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  null);	  return    tryFoldArrayLitAccess(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	58	None	replace
26	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  true);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  true);	  return    tryFoldArrayLitAccess(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	58	None	replace
27	[BUG]  [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right,  this);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitAccess(n,  left,  right,  this);	  return    tryFoldArrayLitAccess(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	58	None	replace
28	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  lval);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  lval);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  lval);	  return    tryFoldArrayLitAccess(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	58	None	replace
29	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getLastChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getLastChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
30	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  right.getFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  right.getFirstChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
31	[BUG]  [BUGGY]  Node  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.removeFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.removeFirstChild();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
32	[BUG]  [BUGGY]  Node  n  =  left.cloneTree();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.cloneTree();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.cloneTree();	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
33	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right,  true);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right,  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right,  true);	  return    tryFoldArrayLitPropAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	67	None	replace
34	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  true);	  return    tryFoldArrayLitPropAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	67	None	replace
35	[BUG]  [BUGGY]  return  tryFoldObjectLitPropAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitPropAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitPropAccess(n,  left,  right,  false);	  return    tryFoldArrayLitPropAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	67	None	replace
36	[BUG]  [BUGGY]  return  tryFoldLitPropAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldLitPropAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLitPropAccess(n,  left,  right,  false);	  return    tryFoldArrayLitPropAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	67	None	replace
37	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)/  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)/  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right)/  1;	  return    tryFoldArrayLitAccess(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	50	None	replace
38	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)+  2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)+  2;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right)+  2;	  return    tryFoldArrayLitAccess(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	50	None	replace
39	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)+  0;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)+  0;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right)+  0;	  return    tryFoldArrayLitAccess(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	50	None	replace
40	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)+  3;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right)+  3;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right)+  3;	  return    tryFoldArrayLitAccess(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	50	None	replace
41	[BUG]  [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right)+  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitAccess(n,  left,  right)+  1;	  return    tryFoldArrayLitAccess(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	50	None	replace
42	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  false.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  false.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  false.cloneTree());	  return    tryFoldArrayLit(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	10	None	replace
43	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  n.cloneTree());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  n.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  n.cloneTree());	  return    tryFoldArrayLit(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	10	None	replace
44	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  left.cloneTree());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  left.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  left.cloneTree());	  return    tryFoldArrayLit(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	10	None	replace
45	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.clone());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.clone());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.clone());	  return    tryFoldArrayLit(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	10	None	replace
46	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.cloneTree(),  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.cloneTree(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.cloneTree(),  false);	  return    tryFoldArrayLit(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	10	None	replace
47	[BUG]  [BUGGY]  n.removeChild(right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.removeChild(right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.removeChild(right);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
48	[BUG]  [BUGGY]  n.removeChild(left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.removeChild(left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.removeChild(left,  right);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
49	[BUG]  [BUGGY]  n.addChildToFront(right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.addChildToFront(right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.addChildToFront(right);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
50	[BUG]  [BUGGY]  n.replaceChild(n,  left);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.replaceChild(n,  left);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.replaceChild(n,  left);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
51	[BUG]  [BUGGY]  n.replaceChild(n,  right);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.replaceChild(n,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.replaceChild(n,  right);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
52	[BUG]  [BUGGY]  n.removeChild(RIGHT);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.removeChild(RIGHT);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.removeChild(RIGHT);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
53	[BUG]  [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right,  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitAccess(n,  left,  right,  true);	  return    tryFoldObjectLitAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
54	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right,  false);	  return    tryFoldObjectLitAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
55	[BUG]  [BUGGY]  return  tryFoldArrayObjectLitAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayObjectLitAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObjectLitAccess(n,  left,  right,  false);	  return    tryFoldObjectLitAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
56	[BUG]  [BUGGY]  return  tryFoldBigDecimalArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldBigDecimalArrayAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldBigDecimalArrayAccess(n,  left,  right);	  return    tryFoldRightArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	53	None	replace
57	[BUG]  [BUGGY]  return  tryFoldUndefinedArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldUndefinedArrayAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldUndefinedArrayAccess(n,  left,  right);	  return    tryFoldRightArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	53	None	replace
58	[BUG]  [BUGGY]  return  tryFoldArrayLitLiteralAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitLiteralAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitLiteralAccess(n,  left,  right);	  return    tryFoldRightLiteralAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	64	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isArrayLit());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(n.isArrayLit());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(n.isArrayLit());	  Preconditions.checkArgument(left.isArrayLit());    	non-compiled	[CE]  orphaned  case	20	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isGetElem());	  Preconditions.checkArgument(left.isArrayLit());    	non-compiled	[CE]  orphaned  case	20	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isObjectLit());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isObjectLit());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isObjectLit());	  Preconditions.checkArgument(left.isArrayLit());    	non-compiled	[CE]  orphaned  case	20	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isEmpty());  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isEmpty());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isEmpty());	  Preconditions.checkArgument(left.isArrayLit());    	non-compiled	[CE]  orphaned  case	20	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isPropAccess());  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isPropAccess());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isPropAccess());	  Preconditions.checkArgument(left.isArrayLit());    	non-compiled	[CE]  orphaned  case	20	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isPropertyType());  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isPropertyType());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isPropertyType());	  Preconditions.checkArgument(left.isArrayLit());    	non-compiled	[CE]  orphaned  case	20	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isReturnType());  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isReturnType());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isReturnType());	  Preconditions.checkArgument(left.isArrayLit());    	non-compiled	[CE]  orphaned  case	20	None	replace
66	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getFirstChild());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getFirstChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.getFirstChild());	  return    tryFoldArrayLit(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
67	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getLastChild(),  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getLastChild(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.getLastChild(),  false);	  return    tryFoldArrayLit(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
68	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getLastChild(),  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getLastChild(),  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.getLastChild(),  this);	  return    tryFoldArrayLit(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
69	[BUG]  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right.getLastChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right.getLastChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectPropAccess(n,  left,  right.getLastChild());	  return    tryFoldArrayLit(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
70	[BUG]  [BUGGY]  return  tryFoldObjectLit(n,  left,  right.getLastChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLit(n,  left,  right.getLastChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLit(n,  left,  right.getLastChild());	  return    tryFoldArrayLit(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
71	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getLastChild(),  true);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getLastChild(),  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.getLastChild(),  true);	  return    tryFoldArrayLit(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
72	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  false.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  false.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  false.cloneTree());	  return    tryFoldArrayElem(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	13	None	replace
73	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  n.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  n.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  n.cloneTree());	  return    tryFoldArrayElem(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	13	None	replace
74	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  left.cloneTree());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  left.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  left.cloneTree());	  return    tryFoldArrayElem(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	13	None	replace
75	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right.clone());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right.clone());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right.clone());	  return    tryFoldArrayElem(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	13	None	replace
76	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  true.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  true.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  true.cloneTree());	  return    tryFoldArrayElem(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	13	None	replace
77	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right.cloneTree(),  false);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right.cloneTree(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right.cloneTree(),  false);	  return    tryFoldArrayElem(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	13	None	replace
78	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  value);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  value);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  value);	  return    tryFoldArrayElem(n,    left,    right,    lval);    	non-compiled	[CE]  orphaned  case	15	None	replace
79	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  this.lval);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  this.lval);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  this.lval);	  return    tryFoldArrayElem(n,    left,    right,    lval);    	non-compiled	[CE]  orphaned  case	15	None	replace
80	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  n.restrictByNotNullOrUndefined);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  n.restrictByNotNullOrUndefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right,  n.restrictByNotNullOrUndefined);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined);    	non-compiled	[CE]  orphaned  case	63	None	replace
81	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right).restrictByNotNullOrUndefined;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right).restrictByNotNullOrUndefined;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right).restrictByNotNullOrUndefined;	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined);    	non-compiled	[CE]  orphaned  case	63	None	replace
82	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  right,  left.restrictByNotNullOrUndefined);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  right,  left.restrictByNotNullOrUndefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  right,  left.restrictByNotNullOrUndefined);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined);    	non-compiled	[CE]  orphaned  case	63	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isEmpty());  return  tryFoldArrayPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isEmpty());  return  tryFoldArrayPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isEmpty());  return  tryFoldArrayPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem());  return  tryFoldArrayPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem());  return  tryFoldArrayPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isGetElem());  return  tryFoldArrayPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem());  return  tryFoldPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem());  return  tryFoldPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isGetElem());  return  tryFoldPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem());  return  tryFoldRightPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem());  return  tryFoldRightPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isGetElem());  return  tryFoldRightPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isObjectLit());  return  tryFoldArrayPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isObjectLit());  return  tryFoldArrayPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isObjectLit());  return  tryFoldArrayPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem());  return  tryFoldLocalPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem());  return  tryFoldLocalPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isGetElem());  return  tryFoldLocalPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isRight());  return  tryFoldRightPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isRight());  return  tryFoldRightPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isRight());  return  tryFoldRightPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
90	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  valueUndefined);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  valueUndefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  valueUndefined);	  return    tryFoldArrayElem(n,    left,    right,    undefined);    	non-compiled	[CE]  orphaned  case	66	None	replace
91	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  node);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  node);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  node);	  return    tryFoldArrayElem(n,    left,    right,    undefined);    	non-compiled	[CE]  orphaned  case	66	None	replace
92	[BUG]  [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLitAccess(n,  left,  right.cloneTree());	  return    tryFoldArrayListLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
93	[BUG]  [BUGGY]  return  tryFoldListLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldListLitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldListLitAccess(n,  left,  right);	  return    tryFoldArrayListLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
94	[BUG]  [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLitAccess(n,  left,  right,  false);	  return    tryFoldArrayListLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
95	[BUG]  [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right  -  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLitAccess(n,  left,  right  -  1);	  return    tryFoldArrayListLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
96	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getFirstChild());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getFirstChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.getFirstChild());	  return    tryFoldArrayLitAccess(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	49	None	replace
97	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getLastChild(),  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getLastChild(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.getLastChild(),  false);	  return    tryFoldArrayLitAccess(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	49	None	replace
98	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getLastChild(),  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getLastChild(),  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.getLastChild(),  this);	  return    tryFoldArrayLitAccess(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	49	None	replace
99	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getLastChild(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getLastChild(),  MAX_FOLD_NUMBER);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.getLastChild(),  MAX_FOLD_NUMBER);	  return    tryFoldArrayLitAccess(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	49	None	replace
100	[BUG]  [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right.getLastChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right.getLastChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitAccess(n,  left,  right.getLastChild());	  return    tryFoldArrayLitAccess(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	49	None	replace
101	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  right,  left.getLastChild());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  right,  left.getLastChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  right,  left.getLastChild());	  return    tryFoldArrayLitAccess(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	49	None	replace
102	[BUG]  [BUGGY]  return  tryFoldArrayProperty(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayProperty(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayProperty(n,  left,  right);	  return    tryFoldArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	39	None	replace
103	[BUG]  [BUGGY]  return  tryFoldArrayProp(n,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayProp(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayProp(n,  left,  right);	  return    tryFoldArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	39	None	replace
104	[BUG]  [BUGGY]  return  tryFoldArrayLitObject(n,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitObject(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitObject(n,  left,  right);	  return    tryFoldArrayLitObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
105	[BUG]  [BUGGY]  return  tryFoldArrayLitObjectAccess(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitObjectAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitObjectAccess(n,  left,  right);	  return    tryFoldArrayLitObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
106	[BUG]  [BUGGY]  return  tryFoldArrayLitObjectPropAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitObjectPropAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitObjectPropAccess(n,  left,  right,  false);	  return    tryFoldArrayLitObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
107	[BUG]  [BUGGY]  return  tryFoldLitObjectPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldLitObjectPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLitObjectPropAccess(n,  left,  right);	  return    tryFoldArrayLitObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
108	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  valueNull);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  valueNull);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  valueNull);	  return    tryFoldArrayElem(n,    left,    right,    null);    	non-compiled	[CE]  orphaned  case	65	None	replace
109	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  n);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  n);	  return    tryFoldArrayElem(n,    left,    right,    null);    	non-compiled	[CE]  orphaned  case	65	None	replace
110	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right,  false);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
111	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  lval);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  lval);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right,  lval);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
112	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  this);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right,  this);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
113	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  equal);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  equal);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right,  equal);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
114	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  true);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right,  true);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
115	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  null);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right,  null);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
116	[BUG]  [BUGGY]  return  tryFoldObjectLitArrayAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitArrayAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitArrayAccess(n,  left,  right,  false);	  return    tryFoldObjectLitArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
117	[BUG]  [BUGGY]  n  =  left.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.getLastChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.getLastChild();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	19	None	replace
118	[BUG]  [BUGGY]  n  =  left.getParent();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.getParent();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.getParent();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	19	None	replace
119	[BUG]  [BUGGY]  n  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.getNext()  +  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.getNext()  +  1;	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	19	None	replace
120	[BUG]  [BUGGY]  n  =  right.getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  right.getNext();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  right.getNext();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	19	None	replace
121	[BUG]  [BUGGY]  n  =  left.getRoot();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.getRoot();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.getRoot();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	19	None	replace
122	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayValue(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  left,  right.cloneTree());	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
123	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  left,  right,  false);	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
124	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  lval);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  lval);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  left,  right,  lval);	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
125	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  right,  left);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayValue(n,  right,  left);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  right,  left);	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
126	[BUG]  [BUGGY]  return  tryFoldObjectLitValue(n,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitValue(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitValue(n,  left,  right);	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
127	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right)/  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right)/  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right)/  1;	  return    tryFoldArrayLit(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
128	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right)+  2;  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right)+  2;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right)+  2;	  return    tryFoldArrayLit(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
129	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right)+  0;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right)+  0;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right)+  0;	  return    tryFoldArrayLit(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
130	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right)+  3;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right)+  3;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right)+  3;	  return    tryFoldArrayLit(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
131	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right)-  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right)-  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right)-  1;	  return    tryFoldArrayLit(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
132	[BUG]  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right)+  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right)+  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectPropAccess(n,  left,  right)+  1;	  return    tryFoldArrayLit(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
133	[BUG]  [BUGGY]  return  tryFoldLitAccess(n,  left,  right,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldLitAccess(n,  left,  right,  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLitAccess(n,  left,  right,  true);	  return    tryFoldArrayLitAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	57	None	replace
134	[BUG]  [BUGGY]  return  tryFoldLitAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldLitAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLitAccess(n,  left,  right,  false);	  return    tryFoldArrayLitAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	57	None	replace
135	[BUG]  [BUGGY]  return  tryFoldRightLitAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightLitAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightLitAccess(n,  left,  right,  false);	  return    tryFoldArrayLitAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	57	None	replace
136	[BUG]  [BUGGY]  return  tryFoldArrayPropLitAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropLitAccess(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropLitAccess(n,  left,  right.cloneTree());	  return    tryFoldArrayPropLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	51	None	replace
137	[BUG]  [BUGGY]  return  tryFoldObjectPropLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectPropLitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectPropLitAccess(n,  left,  right);	  return    tryFoldArrayPropLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	51	None	replace
138	[BUG]  [BUGGY]  return  tryFoldArrayPropLitAccess(n,  right,  left);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropLitAccess(n,  right,  left);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropLitAccess(n,  right,  left);	  return    tryFoldArrayPropLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	51	None	replace
139	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right.cloneTree()  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right.cloneTree()  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right.cloneTree()  -  1);	  return    tryFoldArrayElem(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	40	None	replace
140	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right  +  1);	  return    tryFoldArrayElem(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	40	None	replace
141	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right)-  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right)-  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right)-  1;	  return    tryFoldArrayElem(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	40	None	replace
142	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right.getType()  -  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right.getType()  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right.getType()  -  1);	  return    tryFoldArrayElem(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	40	None	replace
143	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isGetElem());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isGetElem());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isGetElem());	  Node    n    =    left.getFirstChild();    Preconditions.checkArgument(n.isArrayLit());    	non-compiled	[CE]  orphaned  case	22	None	replace
144	[BUG]  [BUGGY]  Node  n  =  left.getLastChild();  Preconditions.checkArgument(n.isArrayLit());  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getLastChild();  Preconditions.checkArgument(n.isArrayLit());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getLastChild();  Preconditions.checkArgument(n.isArrayLit());	  Node    n    =    left.getFirstChild();    Preconditions.checkArgument(n.isArrayLit());    	non-compiled	[CE]  orphaned  case	22	None	replace
145	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isObjectLit());  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isObjectLit());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isObjectLit());	  Node    n    =    left.getFirstChild();    Preconditions.checkArgument(n.isArrayLit());    	non-compiled	[CE]  orphaned  case	22	None	replace
146	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isEmpty());  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isEmpty());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isEmpty());	  Node    n    =    left.getFirstChild();    Preconditions.checkArgument(n.isArrayLit());    	non-compiled	[CE]  orphaned  case	22	None	replace
147	[BUG]  [BUGGY]  Node  n  =  left.getNext();  Preconditions.checkArgument(n.isArrayLit());  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getNext();  Preconditions.checkArgument(n.isArrayLit());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getNext();  Preconditions.checkArgument(n.isArrayLit());	  Node    n    =    left.getFirstChild();    Preconditions.checkArgument(n.isArrayLit());    	non-compiled	[CE]  orphaned  case	22	None	replace
148	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isReturnType());  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isReturnType());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getFirstChild();  Preconditions.checkArgument(n.isReturnType());	  Node    n    =    left.getFirstChild();    Preconditions.checkArgument(n.isArrayLit());    	non-compiled	[CE]  orphaned  case	22	None	replace
149	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  this.lv);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  this.lv);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  this.lv);	  return    tryFoldArrayLitAccess(n,    left,    right,    lv);    	non-compiled	[CE]  orphaned  case	59	None	replace
150	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  value);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  value);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  value);	  return    tryFoldArrayLitAccess(n,    left,    right,    lv);    	non-compiled	[CE]  orphaned  case	59	None	replace
151	[BUG]  [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right,  lv);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right,  lv);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitAccess(n,  left,  right,  lv);	  return    tryFoldArrayLitAccess(n,    left,    right,    lv);    	non-compiled	[CE]  orphaned  case	59	None	replace
152	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  false.cloneTree());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  false.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  false.cloneTree());	  return    tryFoldArrayLitAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	32	None	replace
153	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.clone());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.clone());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.clone());	  return    tryFoldArrayLitAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	32	None	replace
154	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  n.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  n.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  n.cloneTree());	  return    tryFoldArrayLitAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	32	None	replace
155	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  left.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  left.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  left.cloneTree());	  return    tryFoldArrayLitAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	32	None	replace
156	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneTree(),  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneTree(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.cloneTree(),  false);	  return    tryFoldArrayLitAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	32	None	replace
157	[BUG]  [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayInsertion(n,  left,  right,  false);	  return    tryFoldArrayInsertion(n,    left,    right);    	non-compiled	[CE]  orphaned  case	54	None	replace
158	[BUG]  [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  lval);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  lval);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayInsertion(n,  left,  right,  lval);	  return    tryFoldArrayInsertion(n,    left,    right);    	non-compiled	[CE]  orphaned  case	54	None	replace
159	[BUG]  [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  this);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayInsertion(n,  left,  right,  this);	  return    tryFoldArrayInsertion(n,    left,    right);    	non-compiled	[CE]  orphaned  case	54	None	replace
160	[BUG]  [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  equal);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  equal);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayInsertion(n,  left,  right,  equal);	  return    tryFoldArrayInsertion(n,    left,    right);    	non-compiled	[CE]  orphaned  case	54	None	replace
161	[BUG]  [BUGGY]  return  tryFoldObjectInsertion(n,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectInsertion(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectInsertion(n,  left,  right);	  return    tryFoldArrayInsertion(n,    left,    right);    	non-compiled	[CE]  orphaned  case	54	None	replace
162	[BUG]  [BUGGY]  return  tryFoldRightArrayLit(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightArrayLit(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightArrayLit(n,  left,  right,  false);	  return    tryFoldArrayLit(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	12	None	replace
163	[BUG]  [BUGGY]  return  tryFoldAsArrayLit(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldAsArrayLit(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldAsArrayLit(n,  left,  right,  false);	  return    tryFoldArrayLit(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	12	None	replace
164	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  false.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  false.restrictByNotNullOrUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  false.restrictByNotNullOrUndefined());	  return    tryFoldArrayLit(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
165	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  n.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  n.restrictByNotNullOrUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  n.restrictByNotNullOrUndefined());	  return    tryFoldArrayLit(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
166	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined(),  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined(),  false);	  return    tryFoldArrayLit(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
167	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  this.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  this.restrictByNotNullOrUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  this.restrictByNotNullOrUndefined());	  return    tryFoldArrayLit(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
168	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  null.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  null.restrictByNotNullOrUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  null.restrictByNotNullOrUndefined());	  return    tryFoldArrayLit(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
169	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  right,  left.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  right,  left.restrictByNotNullOrUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  right,  left.restrictByNotNullOrUndefined());	  return    tryFoldArrayLit(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
170	[BUG]  [BUGGY]  return  tryFoldArrayLocal(n,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLocal(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLocal(n,  left,  right);	  return    tryFoldLocalPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
171	[BUG]  [BUGGY]  return  tryFoldArrayLocalPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLocalPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLocalPropAccess(n,  left,  right);	  return    tryFoldLocalPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
172	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  lval);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  lval);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  lval);	  return    tryFoldArrayLit(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	60	None	replace
173	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  n);	  return    tryFoldArrayLit(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	60	None	replace
174	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  undefinedRight);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  undefinedRight);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  undefinedRight);	  return    tryFoldArrayLit(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	60	None	replace
175	[BUG]  [BUGGY]  return  tryFoldArrayListViewAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListViewAccess(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListViewAccess(n,  left,  right.cloneTree());	  return    tryFoldArrayListViewAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	46	None	replace
176	[BUG]  [BUGGY]  return  tryFoldArrayListView(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListView(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListView(n,  left,  right);	  return    tryFoldArrayListViewAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	46	None	replace
177	[BUG]  [BUGGY]  return  tryFoldArrayListViewAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListViewAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListViewAccess(n,  left,  right,  false);	  return    tryFoldArrayListViewAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	46	None	replace
178	[BUG]  [BUGGY]  return  tryFoldArrayListViewLit(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListViewLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListViewLit(n,  left,  right);	  return    tryFoldArrayListViewAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	46	None	replace
179	[BUG]  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right,  null);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectPropAccess(n,  left,  right,  null);	  return    tryFoldArrayLit(n,    left,    right,    null);    	non-compiled	[CE]  orphaned  case	61	None	replace
180	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  valueNull);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  valueNull);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  valueNull);	  return    tryFoldArrayLit(n,    left,    right,    null);    	non-compiled	[CE]  orphaned  case	61	None	replace
181	[BUG]  [BUGGY]  return  tryFoldRawArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRawArrayLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRawArrayLit(n,  left,  right);	  return    tryFoldRawArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
182	[BUG]  [BUGGY]  return  tryFoldArrayObject(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayObject(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObject(n,  left,  right);	  return    tryFoldArrayObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
183	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  false);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	36	None	replace
184	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  false.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  false.restrictByNotNullOrUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right,  false.restrictByNotNullOrUndefined());	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	36	None	replace
185	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  right,  left.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  right,  left.restrictByNotNullOrUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  right,  left.restrictByNotNullOrUndefined());	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	36	None	replace
186	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  n.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  n.restrictByNotNullOrUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right,  n.restrictByNotNullOrUndefined());	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	36	None	replace
187	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right).restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right).restrictByNotNullOrUndefined();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right).restrictByNotNullOrUndefined();	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	36	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isEmpty());  return  tryFoldArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isEmpty());  return  tryFoldArrayLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isEmpty());  return  tryFoldArrayLit(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	42	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isObjectLit());  return  tryFoldArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isObjectLit());  return  tryFoldArrayLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isObjectLit());  return  tryFoldArrayLit(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	42	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isGetElem());  return  tryFoldArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isGetElem());  return  tryFoldArrayLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isGetElem());  return  tryFoldArrayLit(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	42	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isPropertyValue());  return  tryFoldArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isPropertyValue());  return  tryFoldArrayLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isPropertyValue());  return  tryFoldArrayLit(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	42	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isPropertyType());  return  tryFoldArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isPropertyType());  return  tryFoldArrayLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isPropertyType());  return  tryFoldArrayLit(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	42	None	replace
193	[BUG]  [BUGGY]  return  tryFoldArrayToArray(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayToArray(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayToArray(n,  left,  right.cloneTree());	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
194	[BUG]  [BUGGY]  return  tryFoldObjectPropAccessToArray(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectPropAccessToArray(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectPropAccessToArray(n,  left,  right);	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
195	[BUG]  [BUGGY]  return  tryFoldArrayToArray(n,  left,  right  +  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayToArray(n,  left,  right  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayToArray(n,  left,  right  +  1);	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
196	[BUG]  [BUGGY]  return  tryFoldObjectToArray(n,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectToArray(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectToArray(n,  left,  right);	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
197	[BUG]  [BUGGY]  return  tryFoldArrayToArray(n,  right,  left);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayToArray(n,  right,  left);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayToArray(n,  right,  left);	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
198	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  right,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  right,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  right,  right);	  return    tryFoldArrayLitAccess(n,    right,    left);    	non-compiled	[CE]  orphaned  case	34	None	replace
199	[BUG]  [BUGGY]  return  tryFoldRawLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRawLitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRawLitAccess(n,  left,  right);	  return    tryFoldArrayLitAccess(n,    right,    left);    	non-compiled	[CE]  orphaned  case	34	None	replace
200	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right,  false.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right,  false.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right,  false.cloneTree());	  return    tryFoldArrayLitPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	25	None	replace
201	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.clone());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.clone());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right.clone());	  return    tryFoldArrayLitPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	25	None	replace
202	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right,  n.cloneTree());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right,  n.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right,  n.cloneTree());	  return    tryFoldArrayLitPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	25	None	replace
203	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.cloneTree(),  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.cloneTree(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right.cloneTree(),  false);	  return    tryFoldArrayLitPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	25	None	replace
204	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right,  left.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right,  left.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right,  left.cloneTree());	  return    tryFoldArrayLitPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	25	None	replace
205	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  right,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  right,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  right,  right);	  return    tryFoldArrayLit(n,    right,    left);    	non-compiled	[CE]  orphaned  case	11	None	replace
206	[BUG]  [BUGGY]  return  tryFoldObjectPropAccess(n,  right,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectPropAccess(n,  right,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectPropAccess(n,  right,  right);	  return    tryFoldArrayLit(n,    right,    left);    	non-compiled	[CE]  orphaned  case	11	None	replace
207	[BUG]  [BUGGY]  Node  n  =  right.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  right.getNext();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  right.getNext();	  Node    n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	18	None	replace
208	[BUG]  [BUGGY]  Node  n  =  left.getParent();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getParent();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getParent();	  Node    n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	18	None	replace
209	[BUG]  [BUGGY]  Node  n  =  left.getNext()  +  1;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getNext()  +  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getNext()  +  1;	  Node    n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	18	None	replace
210	[BUG]  [BUGGY]  Node  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getNext()  ||  right.getType()  ==  Token.FUNCTION;	  Node    n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	18	None	replace
211	[BUG]  [BUGGY]  return  tryFoldArrayLitArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitArrayAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitArrayAccess(n,  left,  right);	  return    tryFoldCollectionLitArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	52	None	replace
212	[BUG]  [BUGGY]  return  tryFoldListLitArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldListLitArrayAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldListLitArrayAccess(n,  left,  right);	  return    tryFoldCollectionLitArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	52	None	replace
213	[BUG]  [BUGGY]  return  tryFoldArrayLitAccuracy(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccuracy(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccuracy(n,  left,  right);	  return    tryFoldArrayListAccuracy(n,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
214	[BUG]  [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccuracy(n,  left,  right.cloneTree());	  return    tryFoldArrayListAccuracy(n,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
215	[BUG]  [BUGGY]  return  tryFoldArrayAccuracy(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayAccuracy(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayAccuracy(n,  left,  right);	  return    tryFoldArrayListAccuracy(n,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
216	[BUG]  [BUGGY]  return  tryFoldListAccuracy(n,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldListAccuracy(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldListAccuracy(n,  left,  right);	  return    tryFoldArrayListAccuracy(n,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
217	[BUG]  [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccuracy(n,  left,  right,  false);	  return    tryFoldArrayListAccuracy(n,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
218	[BUG]  [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right  -  1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccuracy(n,  left,  right  -  1);	  return    tryFoldArrayListAccuracy(n,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
219	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  getValue());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  getValue());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  getValue());	  return    tryFoldArrayElem(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	16	None	replace
220	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  undefinedLeft);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  undefinedLeft);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  undefinedLeft);	  return    tryFoldArrayElem(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	16	None	replace
221	[BUG]  [BUGGY]  n  =  right.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  right.getFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  right.getFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	55	None	replace
222	[BUG]  [BUGGY]  n  =  left.getString();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.getString();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.getString();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	55	None	replace
223	[BUG]  [BUGGY]  return  tryFoldArrayObjectLitAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayObjectLitAccess(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObjectLitAccess(n,  left,  right.cloneTree());	  return    tryFoldArrayObjectLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
224	[BUG]  [BUGGY]  return  tryFoldRightObjectLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightObjectLitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightObjectLitAccess(n,  left,  right);	  return    tryFoldArrayObjectLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
225	[BUG]  [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteral(n,  left,  right.cloneTree());	  return    tryFoldArrayLiteral(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
226	[BUG]  [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right.restrictByNotNullOrUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteral(n,  left,  right.restrictByNotNullOrUndefined());	  return    tryFoldArrayLiteral(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
227	[BUG]  [BUGGY]  return  tryFoldObjectLiteral(n,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLiteral(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLiteral(n,  left,  right);	  return    tryFoldArrayLiteral(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
228	[BUG]  [BUGGY]  return  tryFoldRightLiteral(n,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightLiteral(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightLiteral(n,  left,  right);	  return    tryFoldArrayLiteral(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
229	[BUG]  [BUGGY]  return  tryFoldExpressionLiteral(n,  left,  right);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldExpressionLiteral(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldExpressionLiteral(n,  left,  right);	  return    tryFoldArrayLiteral(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
230	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.clone());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.clone());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.clone());	  return    tryFoldArrayLiteralAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	23	None	replace
231	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  false.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  false.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right,  false.cloneTree());	  return    tryFoldArrayLiteralAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	23	None	replace
232	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.cloneTree(),  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.cloneTree(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.cloneTree(),  false);	  return    tryFoldArrayLiteralAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	23	None	replace
233	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  n.cloneTree());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  n.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right,  n.cloneTree());	  return    tryFoldArrayLiteralAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	23	None	replace
234	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  left.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  left.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right,  left.cloneTree());	  return    tryFoldArrayLiteralAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	23	None	replace
235	[BUG]  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.clone());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.clone());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropAccess(n,  left,  right.clone());	  return    tryFoldArrayPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
236	[BUG]  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right,  false.cloneTree());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right,  false.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropAccess(n,  left,  right,  false.cloneTree());	  return    tryFoldArrayPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
237	[BUG]  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right,  left.cloneTree());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right,  left.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropAccess(n,  left,  right,  left.cloneTree());	  return    tryFoldArrayPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
238	[BUG]  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right,  n.cloneTree());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right,  n.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropAccess(n,  left,  right,  n.cloneTree());	  return    tryFoldArrayPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
239	[BUG]  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.cloneTree(),  false);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.cloneTree(),  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropAccess(n,  left,  right.cloneTree(),  false);	  return    tryFoldArrayPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
240	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldArrayElem(n,    left,    right,    lval);    	non-compiled	[CE]  orphaned  case	15	None	replace
241	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  lv);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  lv);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  lv);	  return    tryFoldArrayElem(n,    left,    right,    lval);    	non-compiled	[CE]  orphaned  case	15	None	replace
242	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.cloneNode());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.cloneNode());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right.cloneNode());	  return    tryFoldArrayLitPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	25	None	replace
243	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.clonePosition());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.clonePosition());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right.clonePosition());	  return    tryFoldArrayLitPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	25	None	replace
244	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.cloneBoolean());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.cloneBoolean());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right.cloneBoolean());	  return    tryFoldArrayLitPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	25	None	replace
245	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  0);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  0);	  return    tryFoldArrayElem(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	16	None	replace
246	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.cloneNode());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.cloneNode());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.cloneNode());	  return    tryFoldArrayLiteralAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	23	None	replace
247	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.cloneBoolean());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.cloneBoolean());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.cloneBoolean());	  return    tryFoldArrayLiteralAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	23	None	replace
248	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.clonePath());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.clonePath());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.clonePath());	  return    tryFoldArrayLiteralAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	23	None	replace
249	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.clonePosition());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.clonePosition());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.clonePosition());	  return    tryFoldArrayLiteralAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	23	None	replace
250	[BUG]  [BUGGY]  return  tryFoldArrayLitObjectLit(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitObjectLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitObjectLit(n,  left,  right);	  return    tryFoldObjectLitArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
251	[BUG]  [BUGGY]  return  tryFoldObjectLitElem(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitElem(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitElem(n,  left,  right,  false);	  return    tryFoldArrayElem(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	14	None	replace
252	[BUG]  [BUGGY]  return  tryFoldObjectArrayElem(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectArrayElem(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectArrayElem(n,  left,  right,  false);	  return    tryFoldArrayElem(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	14	None	replace
253	[BUG]  [BUGGY]  return  tryFoldObjectElem(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectElem(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectElem(n,  left,  right,  false);	  return    tryFoldArrayElem(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	14	None	replace
254	[BUG]  [BUGGY]  return  tryFoldArrayLitInsertion(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitInsertion(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitInsertion(n,  left,  right);	  return    tryFoldObjectLitPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	27	None	replace
255	[BUG]  [BUGGY]  return  tryFoldLightArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldLightArrayAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLightArrayAccess(n,  left,  right);	  return    tryFoldRightArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	53	None	replace
256	[BUG]  [BUGGY]  return  tryFoldObjectLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined);    	non-compiled	[CE]  orphaned  case	63	None	replace
257	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.restrictByNotNullOrUndefined);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.restrictByNotNullOrUndefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.restrictByNotNullOrUndefined);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined);    	non-compiled	[CE]  orphaned  case	63	None	replace
258	[BUG]  [BUGGY]  n  =  left.getArrayLit();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.getArrayLit();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.getArrayLit();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	19	None	replace
259	[BUG]  [BUGGY]  n  =  left.getArray();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.getArray();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.getArray();	  n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	19	None	replace
260	[BUG]  [BUGGY]  return  tryFoldObjectLit(n,  left,  right,  null);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLit(n,  left,  right,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLit(n,  left,  right,  null);	  return    tryFoldArrayLit(n,    left,    right,    null);    	non-compiled	[CE]  orphaned  case	61	None	replace
261	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.getString());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.getString());	  return    tryFoldArrayLitAccess(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	49	None	replace
262	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.cloneNode());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.cloneNode());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.cloneNode());	  return    tryFoldArrayLit(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	10	None	replace
263	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.cloneTree(),  this);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.cloneTree(),  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.cloneTree(),  this);	  return    tryFoldArrayLit(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	10	None	replace
264	[BUG]  [BUGGY]  return  tryFoldRawArrayLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRawArrayLitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRawArrayLitAccess(n,  left,  right);	  return    tryFoldArrayLitAccess(n,    right,    left);    	non-compiled	[CE]  orphaned  case	34	None	replace
265	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right.cloneTree());	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
266	[BUG]  [BUGGY]  return  tryFoldObjectLitGetElem(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitGetElem(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitGetElem(n,  left,  right);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
267	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  lv);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  lv);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right,  lv);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
268	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right  -  1);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right  -  1);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
269	[BUG]  [BUGGY]  return  tryFoldArrayLitObjectPropAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitObjectPropAccess(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitObjectPropAccess(n,  left,  right.cloneTree());	  return    tryFoldArrayLitObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
270	[BUG]  [BUGGY]  return  tryFoldArrayLitObjectValue(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitObjectValue(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitObjectValue(n,  left,  right);	  return    tryFoldArrayLitObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
271	[BUG]  [BUGGY]  return  tryFoldArrayLitObjectProp(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitObjectProp(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitObjectProp(n,  left,  right);	  return    tryFoldArrayLitObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
272	[BUG]  [BUGGY]  return  tryFoldRawLitAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRawLitAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRawLitAccess(n,  left,  right,  false);	  return    tryFoldArrayLitAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	57	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldObjectPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldObjectPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isArrayLit());  return  tryFoldObjectPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isArrayLit());  return  tryFoldPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldElemPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldElemPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isArrayLit());  return  tryFoldElemPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldRawPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldRawPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isArrayLit());  return  tryFoldRawPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
277	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right.cloneNode());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right.cloneNode());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right.cloneNode());	  return    tryFoldArrayElem(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	13	None	replace
278	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right.cloneTree(),  this);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right.cloneTree(),  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right.cloneTree(),  this);	  return    tryFoldArrayElem(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	13	None	replace
279	[BUG]  [BUGGY]  return  tryFoldArrayLimitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLimitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLimitAccess(n,  left,  right);	  return    tryFoldLocalPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	7	None	replace
280	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.cloneNode());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.cloneNode());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right.cloneNode());	  return    tryFoldArrayListAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	29	None	replace
281	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.cloneBoolean());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.cloneBoolean());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right.cloneBoolean());	  return    tryFoldArrayListAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	29	None	replace
282	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.clonePosition());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.clonePosition());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right.clonePosition());	  return    tryFoldArrayListAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	29	None	replace
283	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.cloneTree(),  this);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right.cloneTree(),  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right.cloneTree(),  this);	  return    tryFoldArrayListAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	29	None	replace
284	[BUG]  [BUGGY]  return  tryFoldArrayToObject(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayToObject(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayToObject(n,  left,  right);	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
285	[BUG]  [BUGGY]  return  tryFoldArrayToArray(n,  left,  right.getLastChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayToArray(n,  left,  right.getLastChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayToArray(n,  left,  right.getLastChild());	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
286	[BUG]  [BUGGY]  return  tryFoldArrayToArray(n,  left,  right)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayToArray(n,  left,  right)+  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayToArray(n,  left,  right)+  1;	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
287	[BUG]  [BUGGY]  return  tryFoldListToArray(n,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldListToArray(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldListToArray(n,  left,  right);	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
288	[BUG]  [BUGGY]  return  tryFoldArrayObjectPropLit(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayObjectPropLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObjectPropLit(n,  left,  right);	  return    tryFoldArrayObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
289	[BUG]  [BUGGY]  return  tryFoldArrayObjectAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayObjectAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObjectAccess(n,  left,  right);	  return    tryFoldArrayObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	44	None	replace
290	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);	  return    tryFoldArrayLit(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
291	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined(),  valueUndefined);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined(),  valueUndefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.restrictByNotNullOrUndefined(),  valueUndefined);	  return    tryFoldArrayLit(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	37	None	replace
292	[BUG]  [BUGGY]  return  tryFoldArrayElem(left,  right,  null);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(left,  right,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(left,  right,  null);	  return    tryFoldArrayElem(n,    left,    right,    null);    	non-compiled	[CE]  orphaned  case	65	None	replace
293	[BUG]  [BUGGY]  return  tryFoldObjectLit(n,  left,  right,  this);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLit(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLit(n,  left,  right,  this);	  return    tryFoldArrayLit(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	60	None	replace
294	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  0);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  0);	  return    tryFoldArrayLit(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	60	None	replace
295	[BUG]  [BUGGY]  return  tryFoldArrayLiteralValue(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralValue(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralValue(n,  left,  right);	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
296	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  numValue);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  numValue);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  left,  right,  numValue);	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
297	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  left,  right)+  1;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayValue(n,  left,  right)+  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  left,  right)+  1;	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
298	[BUG]  [BUGGY]  return  tryFoldBigDecimal(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldBigDecimal(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldBigDecimal(n,  left,  right);	  return    tryFoldArrayLiteral(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
299	[BUG]  [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right.getLastChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right.getLastChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteral(n,  left,  right.getLastChild());	  return    tryFoldArrayLiteral(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
300	[BUG]  [BUGGY]  return  tryFoldObjectLit(n,  left,  right)+  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLit(n,  left,  right)+  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLit(n,  left,  right)+  1;	  return    tryFoldArrayLit(n,    left,    right)+    1;    	non-compiled	[CE]  orphaned  case	62	None	replace
301	[BUG]  [BUGGY]  return  tryFoldArraylitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArraylitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArraylitAccess(n,  left,  right);	  return    tryFoldLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	35	None	replace
302	[BUG]  [BUGGY]  return  tryFoldBigDecimalLit(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldBigDecimalLit(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldBigDecimalLit(n,  left,  right,  false);	  return    tryFoldArrayLit(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	12	None	replace
303	[BUG]  [BUGGY]  return  tryFoldRawArrayLit(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRawArrayLit(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRawArrayLit(n,  left,  right,  false);	  return    tryFoldArrayLit(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	12	None	replace
304	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  MAX_FOLD_NUMBER);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  MAX_FOLD_NUMBER);	  return    tryFoldArrayLitAccess(n,    left,    right,    lv);    	non-compiled	[CE]  orphaned  case	59	None	replace
305	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  lv.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  lv.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  lv.cloneTree());	  return    tryFoldArrayLitAccess(n,    left,    right,    lv);    	non-compiled	[CE]  orphaned  case	59	None	replace
306	[BUG]  [BUGGY]  return  tryFoldArrayRightLiteralAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayRightLiteralAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayRightLiteralAccess(n,  left,  right);	  return    tryFoldRightLiteralAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	64	None	replace
307	[BUG]  [BUGGY]  return  tryFoldRightArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightArrayLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightArrayLit(n,  left,  right);	  return    tryFoldRightLiteralAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	64	None	replace
308	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(left.isArrayLit());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(left.isArrayLit());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getFirstChild();  Preconditions.checkArgument(left.isArrayLit());	  Node    n    =    left.getFirstChild();    Preconditions.checkArgument(n.isArrayLit());    	non-compiled	[CE]  orphaned  case	22	None	replace
309	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(left.isObjectLit());  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getFirstChild();  Preconditions.checkArgument(left.isObjectLit());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getFirstChild();  Preconditions.checkArgument(left.isObjectLit());	  Node    n    =    left.getFirstChild();    Preconditions.checkArgument(n.isArrayLit());    	non-compiled	[CE]  orphaned  case	22	None	replace
310	[BUG]  [BUGGY]  return  tryFoldListObjectLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldListObjectLitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldListObjectLitAccess(n,  left,  right);	  return    tryFoldArrayObjectLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
311	[BUG]  [BUGGY]  return  tryFoldArrayElemAccess(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElemAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElemAccess(n,  left,  right);	  return    tryFoldArrayObjectLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
312	[BUG]  [BUGGY]  return  tryFoldArrayObjectLitAccess(n,  left,  right  -  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayObjectLitAccess(n,  left,  right  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObjectLitAccess(n,  left,  right  -  1);	  return    tryFoldArrayObjectLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
313	[BUG]  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.cloneNode());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.cloneNode());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropAccess(n,  left,  right.cloneNode());	  return    tryFoldArrayPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
314	[BUG]  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.clonePosition());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.clonePosition());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropAccess(n,  left,  right.clonePosition());	  return    tryFoldArrayPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
315	[BUG]  [BUGGY]  n.replaceChild(left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.replaceChild(left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.replaceChild(left,  right);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
316	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.GETELEM));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.GETELEM));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.replaceChild(left,  new  Node(Token.GETELEM));	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
317	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.EMPTY));  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.EMPTY));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.replaceChild(left,  new  Node(Token.EMPTY));	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
318	[BUG]  [BUGGY]  n.replaceChild(left,  new  Node(Token.GETELEM,  right));  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.replaceChild(left,  new  Node(Token.GETELEM,  right));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.replaceChild(left,  new  Node(Token.GETELEM,  right));	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
319	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneNode());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneNode());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.cloneNode());	  return    tryFoldArrayLitAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	32	None	replace
320	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneBoolean());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneBoolean());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.cloneBoolean());	  return    tryFoldArrayLitAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	32	None	replace
321	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.clonePosition());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.clonePosition());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.clonePosition());	  return    tryFoldArrayLitAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	32	None	replace
322	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.clonePath());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.clonePath());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.clonePath());	  return    tryFoldArrayLitAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	32	None	replace
323	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  n);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  n);	  return    tryFoldArrayLitAccess(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	58	None	replace
324	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  0);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  0);	  return    tryFoldArrayLitAccess(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	58	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isPropAccessLit());  return  tryFoldArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isPropAccessLit());  return  tryFoldArrayLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isPropAccessLit());  return  tryFoldArrayLit(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	42	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isPropertyLit());  return  tryFoldArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isPropertyLit());  return  tryFoldArrayLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isPropertyLit());  return  tryFoldArrayLit(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	42	None	replace
327	[BUG]  [BUGGY]  return  tryFoldArrayObjectLiteralAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayObjectLiteralAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObjectLiteralAccess(n,  left,  right);	  return    tryFoldObjectLiteralAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	24	None	replace
328	[BUG]  [BUGGY]  n  =  left.removeFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.removeFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.removeFirstChild();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	55	None	replace
329	[BUG]  [BUGGY]  n  =  left.replaceChild(left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.replaceChild(left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.replaceChild(left,  right);	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	55	None	replace
330	[BUG]  [BUGGY]  Node  n  =  left.getNode();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.getNode();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.getNode();	  Node    n    =    left.getNext();    	non-compiled	[CE]  orphaned  case	18	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkArgument(right.isArrayLit());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(right.isArrayLit());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(right.isArrayLit());	  Preconditions.checkArgument(left.isArrayLit());    	non-compiled	[CE]  orphaned  case	20	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isArray());  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isArray());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isArray());	  Preconditions.checkArgument(left.isArrayLit());    	non-compiled	[CE]  orphaned  case	20	None	replace
333	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right  -  1);	  return    tryFoldArrayElem(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	40	None	replace
334	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getLastChild(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getLastChild(),  MAX_FOLD_NUMBER);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.getLastChild(),  MAX_FOLD_NUMBER);	  return    tryFoldArrayLit(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
335	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getString());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right.getString());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right.getString());	  return    tryFoldArrayLit(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
336	[BUG]  [BUGGY]  return  tryFoldArrayListElem(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListElem(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListElem(n,  left,  right);	  return    tryFoldArrayListLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	31	None	replace
337	[BUG]  [BUGGY]  return  tryFoldArrayListPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListPropAccess(n,  left,  right);	  return    tryFoldArrayListLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	31	None	replace
338	[BUG]  [BUGGY]  return  tryFoldArrayListLit(n,  left,  right  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLit(n,  left,  right  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLit(n,  left,  right  -  1);	  return    tryFoldArrayListLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	31	None	replace
339	[BUG]  [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayInsertion(n,  left,  right.cloneTree());	  return    tryFoldArrayInsertion(n,    left,    right);    	non-compiled	[CE]  orphaned  case	54	None	replace
340	[BUG]  [BUGGY]  return  tryFoldObjectLitInsertion(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitInsertion(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitInsertion(n,  left,  right);	  return    tryFoldArrayInsertion(n,    left,    right);    	non-compiled	[CE]  orphaned  case	54	None	replace
341	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  MAX_FOLD_NUMBER);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	36	None	replace
342	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  valueUndefined);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  valueUndefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  valueUndefined);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	36	None	replace
343	[BUG]  [BUGGY]  return  tryFoldObjectLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined());	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	36	None	replace
344	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  this);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  this);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	36	None	replace
345	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  unknown);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  unknown);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  unknown);	  return    tryFoldArrayElem(n,    left,    right,    undefined);    	non-compiled	[CE]  orphaned  case	66	None	replace
346	[BUG]  [BUGGY]  return  tryFoldArrayListViewInsertion(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListViewInsertion(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListViewInsertion(n,  left,  right);	  return    tryFoldArrayListViewAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	46	None	replace
347	[BUG]  [BUGGY]  return  tryFoldArrayListViewObject(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListViewObject(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListViewObject(n,  left,  right);	  return    tryFoldArrayListViewAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	46	None	replace
348	[BUG]  [BUGGY]  return  tryFoldArrayListViewMove(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListViewMove(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListViewMove(n,  left,  right);	  return    tryFoldArrayListViewAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	46	None	replace
349	[BUG]  [BUGGY]  return  tryFoldArrayOperand(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayOperand(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayOperand(n,  left,  right);	  return    tryFoldObjectLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	2	None	replace
350	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.cloneTree(),  this);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right.cloneTree(),  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right.cloneTree(),  this);	  return    tryFoldArrayLitPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	25	None	replace
351	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  null.cloneTree());  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  null.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  null.cloneTree());	  return    tryFoldArrayLit(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	10	None	replace
352	[BUG]  [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right,  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccuracy(n,  left,  right,  this);	  return    tryFoldArrayListAccuracy(n,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
353	[BUG]  [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right,  null);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListAccuracy(n,  left,  right,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccuracy(n,  left,  right,  null);	  return    tryFoldArrayListAccuracy(n,    left,    right);    	non-compiled	[CE]  orphaned  case	47	None	replace
354	[BUG]  [BUGGY]  return  tryFoldObjectLitIndexAccess(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldObjectLitIndexAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitIndexAccess(n,  left,  right);	  return    tryFoldObjectLitArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	3	None	replace
355	[BUG]  [BUGGY]  return  tryFoldCollectionLitArrayAccess(n,  left,  right.cloneTree());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldCollectionLitArrayAccess(n,  left,  right.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldCollectionLitArrayAccess(n,  left,  right.cloneTree());	  return    tryFoldCollectionLitArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	52	None	replace
356	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  null);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  left,  right,  null);	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
357	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  this);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  left,  right,  this);	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
358	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  lv);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  lv);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  left,  right,  lv);	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
359	[BUG]  [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  value);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayValue(n,  left,  right,  value);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayValue(n,  left,  right,  value);	  return    tryFoldArrayValue(n,    left,    right);    	non-compiled	[CE]  orphaned  case	41	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldRightPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isArrayLit());  return  tryFoldRightPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isArrayLit());  return  tryFoldRightPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	21	None	replace
361	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  null,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  null,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  null,  false);	  return    tryFoldArrayElem(n,    left,    right,    null);    	non-compiled	[CE]  orphaned  case	65	None	replace
362	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  undefined);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  undefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  undefined);	  return    tryFoldArrayLit(n,    left,    right,    null);    	non-compiled	[CE]  orphaned  case	61	None	replace
363	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  this.value);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  this.value);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  this.value);	  return    tryFoldArrayElem(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	16	None	replace
364	[BUG]  [BUGGY]  Node  n  =  left.replaceChild(n,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  left.replaceChild(n,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  left.replaceChild(n,  right);	  Node    n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	17	None	replace
365	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  this)+  1;  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  left,  right,  this)+  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right,  this)+  1;	  return    tryFoldArrayLit(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	60	None	replace
366	[BUG]  [BUGGY]  return  tryFoldLitArrayElem(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldLitArrayElem(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLitArrayElem(n,  left,  right,  false);	  return    tryFoldArrayElem(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	14	None	replace
367	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  undefined);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  undefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.restrictByNotNullOrUndefined(),  undefined);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined());    	non-compiled	[CE]  orphaned  case	36	None	replace
368	[BUG]  [BUGGY]  return  tryFoldArrayObjectLitAccess(n,  left,  right,  this);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayObjectLitAccess(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayObjectLitAccess(n,  left,  right,  this);	  return    tryFoldArrayObjectLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	8	None	replace
369	[BUG]  [BUGGY]  Node  n  =  right.getFirstChild();  Preconditions.checkArgument(n.isArrayLit());  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Node  n  =  right.getFirstChild();  Preconditions.checkArgument(n.isArrayLit());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Node  n  =  right.getFirstChild();  Preconditions.checkArgument(n.isArrayLit());	  Node    n    =    left.getFirstChild();    Preconditions.checkArgument(n.isArrayLit());    	non-compiled	[CE]  orphaned  case	22	None	replace
370	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.cloneTree(),  this);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right.cloneTree(),  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right.cloneTree(),  this);	  return    tryFoldArrayLiteralAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	23	None	replace
371	[BUG]  [BUGGY]  return  tryFoldArrayListViewAccess(n,  left,  right,  this);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListViewAccess(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListViewAccess(n,  left,  right,  this);	  return    tryFoldArrayListViewAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	46	None	replace
372	[BUG]  [BUGGY]  return  tryFoldArrayListViewAccess(n,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListViewAccess(n,  left,  right,  FRACTIONAL_BITWISE_OPERAND);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListViewAccess(n,  left,  right,  FRACTIONAL_BITWISE_OPERAND);	  return    tryFoldArrayListViewAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	46	None	replace
373	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  undefinedRight  -  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  undefinedRight  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  undefinedRight  -  1);	  return    tryFoldArrayElem(n,    left,    right    -    1);    	non-compiled	[CE]  orphaned  case	40	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isUndefined());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isUndefined());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isUndefined());	  Preconditions.checkArgument(left.isArrayLit());    	non-compiled	[CE]  orphaned  case	20	None	replace
375	[BUG]  [BUGGY]  return  tryFoldRightPropLit(n,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightPropLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightPropLit(n,  left,  right);	  return    tryFoldArrayPropLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
376	[BUG]  [BUGGY]  return  tryFoldArrayPropLit(n,  left,  right)+  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropLit(n,  left,  right)+  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropLit(n,  left,  right)+  1;	  return    tryFoldArrayPropLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	6	None	replace
377	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  undefined)+  1;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  undefined)+  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  undefined)+  1;	  return    tryFoldArrayElem(n,    left,    right,    undefined);    	non-compiled	[CE]  orphaned  case	66	None	replace
378	[BUG]  [BUGGY]  return  tryFoldRightArrayElem(n,  left,  right,  undefined);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightArrayElem(n,  left,  right,  undefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightArrayElem(n,  left,  right,  undefined);	  return    tryFoldArrayElem(n,    left,    right,    undefined);    	non-compiled	[CE]  orphaned  case	66	None	replace
379	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  undefined;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  undefined;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  undefined;	  return    tryFoldArrayElem(n,    left,    right,    undefined);    	non-compiled	[CE]  orphaned  case	66	None	replace
380	[BUG]  [BUGGY]  return  tryFoldArrayToArray(n,  left,  right).restrictByNotNullOrUndefined();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayToArray(n,  left,  right).restrictByNotNullOrUndefined();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayToArray(n,  left,  right).restrictByNotNullOrUndefined();	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
381	[BUG]  [BUGGY]  return  tryFoldRightToArray(n,  left,  right);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightToArray(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightToArray(n,  left,  right);	  return    tryFoldArrayToArray(n,    left,    right);    	non-compiled	[CE]  orphaned  case	43	None	replace
382	[BUG]  [BUGGY]  return  tryFoldCollectionLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldCollectionLitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldCollectionLitAccess(n,  left,  right);	  return    tryFoldArrayLitAccess(n,    right,    left);    	non-compiled	[CE]  orphaned  case	34	None	replace
383	[BUG]  [BUGGY]  return  tryFoldAsArrayLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldAsArrayLitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldAsArrayLitAccess(n,  left,  right);	  return    tryFoldArrayLitAccess(n,    right,    left);    	non-compiled	[CE]  orphaned  case	34	None	replace
384	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneTree(),  this);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right.cloneTree(),  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right.cloneTree(),  this);	  return    tryFoldArrayLitAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	32	None	replace
385	[BUG]  [BUGGY]  n.addChildToBack(right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n.addChildToBack(right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n.addChildToBack(right);	  n.removeChild(left);    	non-compiled	[CE]  orphaned  case	56	None	replace
386	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  this.restrictByNotNullOrUndefined);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  this.restrictByNotNullOrUndefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right,  this.restrictByNotNullOrUndefined);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined);    	non-compiled	[CE]  orphaned  case	63	None	replace
387	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  undefined);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right,  undefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right,  undefined);	  return    tryFoldArrayLiteralAccess(n,    left,    right.restrictByNotNullOrUndefined);    	non-compiled	[CE]  orphaned  case	63	None	replace
388	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right,  n);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
389	[BUG]  [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  undefined);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitGetElem(n,  left,  right,  undefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitGetElem(n,  left,  right,  undefined);	  return    tryFoldArrayLitGetElem(n,    left,    right);    	non-compiled	[CE]  orphaned  case	28	None	replace
390	[BUG]  [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  undefined);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  undefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayInsertion(n,  left,  right,  undefined);	  return    tryFoldArrayInsertion(n,    left,    right);    	non-compiled	[CE]  orphaned  case	54	None	replace
391	[BUG]  [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  null);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayInsertion(n,  left,  right,  null);	  return    tryFoldArrayInsertion(n,    left,    right);    	non-compiled	[CE]  orphaned  case	54	None	replace
392	[BUG]  [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  lv);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayInsertion(n,  left,  right,  lv);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayInsertion(n,  left,  right,  lv);	  return    tryFoldArrayInsertion(n,    left,    right);    	non-compiled	[CE]  orphaned  case	54	None	replace
393	[BUG]  [BUGGY]  return  tryFoldArrayElemAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElemAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElemAccess(n,  left,  right,  false);	  return    tryFoldObjectLitAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	9	None	replace
394	[BUG]  [BUGGY]  return  tryFoldArrayPropLitAccess(n,  left,  right,  this);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropLitAccess(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropLitAccess(n,  left,  right,  this);	  return    tryFoldArrayPropLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	51	None	replace
395	[BUG]  [BUGGY]  return  tryFoldArrayPropLitAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropLitAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropLitAccess(n,  left,  right,  false);	  return    tryFoldArrayPropLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	51	None	replace
396	[BUG]  [BUGGY]  return  tryFoldRightPropLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightPropLitAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightPropLitAccess(n,  left,  right);	  return    tryFoldArrayPropLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	51	None	replace
397	[BUG]  [BUGGY]  return  tryFoldArrayLitObjectPropAccess(n,  left,  right,  this);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitObjectPropAccess(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitObjectPropAccess(n,  left,  right,  this);	  return    tryFoldArrayLitObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
398	[BUG]  [BUGGY]  return  tryFoldRightObjectPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightObjectPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightObjectPropAccess(n,  left,  right);	  return    tryFoldArrayLitObjectPropAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	48	None	replace
399	[BUG]  [BUGGY]  return  tryFoldLit(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldLit(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLit(n,  left,  right,  false);	  return    tryFoldArrayLit(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	12	None	replace
400	[BUG]  [BUGGY]  return  tryFoldCollectionLit(n,  left,  right,  false);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldCollectionLit(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldCollectionLit(n,  left,  right,  false);	  return    tryFoldArrayLit(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	12	None	replace
401	[BUG]  [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right.restrictByNotNullOrUndefined);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right.restrictByNotNullOrUndefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteral(n,  left,  right.restrictByNotNullOrUndefined);	  return    tryFoldArrayLiteral(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
402	[BUG]  [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right)+  1;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLiteral(n,  left,  right)+  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteral(n,  left,  right)+  1;	  return    tryFoldArrayLiteral(n,    left,    right);    	non-compiled	[CE]  orphaned  case	1	None	replace
403	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  right,  left.getLastChild());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLit(n,  right,  left.getLastChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  right,  left.getLastChild());	  return    tryFoldArrayLit(n,    left,    right.getLastChild());    	non-compiled	[CE]  orphaned  case	38	None	replace
404	[BUG]  [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right,  this);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLitAccess(n,  left,  right,  this);	  return    tryFoldArrayListLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
405	[BUG]  [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right,  lv);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLitAccess(n,  left,  right,  lv);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLitAccess(n,  left,  right,  lv);	  return    tryFoldArrayListLitAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	45	None	replace
406	[BUG]  [BUGGY]  n  =  left.replaceChild(n,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.replaceChild(n,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.replaceChild(n,  right);	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	55	None	replace
407	[BUG]  [BUGGY]  n  =  left.cloneTree();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  n  =  left.cloneTree();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	n  =  left.cloneTree();	  n    =    left.getFirstChild();    	non-compiled	[CE]  orphaned  case	55	None	replace
408	[BUG]  [BUGGY]  return  tryFoldCollectionLitAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldCollectionLitAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldCollectionLitAccess(n,  left,  right,  false);	  return    tryFoldArrayLitAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	57	None	replace
409	[BUG]  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.cloneTree(),  this);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right.cloneTree(),  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropAccess(n,  left,  right.cloneTree(),  this);	  return    tryFoldArrayPropAccess(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	5	None	replace
410	[BUG]  [BUGGY]  return  tryFoldAsArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldAsArrayLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldAsArrayLit(n,  left,  right);	  return    tryFoldArrayLit(n,    right,    left);    	non-compiled	[CE]  orphaned  case	11	None	replace
411	[BUG]  [BUGGY]  return  tryFoldLit(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLit(n,  left,  right);	  return    tryFoldArrayLit(n,    right,    left);    	non-compiled	[CE]  orphaned  case	11	None	replace
412	[BUG]  [BUGGY]  return  tryFoldCollectionLit(n,  left,  right);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldCollectionLit(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldCollectionLit(n,  left,  right);	  return    tryFoldArrayLit(n,    right,    left);    	non-compiled	[CE]  orphaned  case	11	None	replace
413	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  false).cloneTree();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  false).cloneTree();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  false).cloneTree();	  return    tryFoldArrayElem(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	13	None	replace
414	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  null.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayElem(n,  left,  right,  null.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right,  null.cloneTree());	  return    tryFoldArrayElem(n,    left,    right.cloneTree());    	non-compiled	[CE]  orphaned  case	13	None	replace
415	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  undefined);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  undefined);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  undefined);	  return    tryFoldArrayLitAccess(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	58	None	replace
416	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  undefinedRight);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right,  undefinedRight);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right,  undefinedRight);	  return    tryFoldArrayLitAccess(n,    left,    right,    this);    	non-compiled	[CE]  orphaned  case	58	None	replace
417	[BUG]  [BUGGY]  return  tryFoldArrayListLit(n,  left,  right,  this);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLit(n,  left,  right,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLit(n,  left,  right,  this);	  return    tryFoldArrayListLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	31	None	replace
418	[BUG]  [BUGGY]  return  tryFoldArrayListLit(n,  left,  right,  null);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLit(n,  left,  right,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLit(n,  left,  right,  null);	  return    tryFoldArrayListLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	31	None	replace
419	[BUG]  [BUGGY]  return  tryFoldArrayListLit(n,  left,  right,  lv);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldArrayListLit(n,  left,  right,  lv);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListLit(n,  left,  right,  lv);	  return    tryFoldArrayListLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	31	None	replace
420	[BUG]  [BUGGY]  return  tryFoldRightLitArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightLitArrayAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightLitArrayAccess(n,  left,  right);	  return    tryFoldRightArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	53	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkArgument(left.isObjectLit());  return  tryFoldRightPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  Preconditions.checkArgument(left.isObjectLit());  return  tryFoldRightPropAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	Preconditions.checkArgument(left.isObjectLit());  return  tryFoldRightPropAccess(n,  left,  right);	  Preconditions.checkArgument(left.isArrayLit());    return    tryFoldArrayLit(n,    left,    right);    	non-compiled	[CE]  orphaned  case	42	None	replace
422	[BUG]  [BUGGY]  return  tryFoldRawLitArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRawLitArrayAccess(n,  left,  right);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRawLitArrayAccess(n,  left,  right);	  return    tryFoldRawArrayAccess(n,    left,    right);    	non-compiled	[CE]  orphaned  case	4	None	replace
423	[BUG]  [BUGGY]  return  tryFoldRightPropAccess(n,  left,  right,  false);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldRightPropAccess(n,  left,  right,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldRightPropAccess(n,  left,  right,  false);	  return    tryFoldArrayLitPropAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	67	None	replace
424	[BUG]  [BUGGY]  return  tryFoldLitPropAccess(n,  left,  right,  true);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {      [BUGGY]  return  tryFoldLitPropAccess(n,  left,  right,  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLitPropAccess(n,  left,  right,  true);	  return    tryFoldArrayLitPropAccess(n,    left,    right,    false);    	non-compiled	[CE]  orphaned  case	67	None	replace
