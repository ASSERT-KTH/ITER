bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFoldArrayLit(n,  left,  right);  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]  return  tryFoldArrayLit(n,  left,  right);  [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLit(n,  left,  right);	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
2	[BUG]  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]  return  tryFoldArrayLitAccess(n,  left,  right);  [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitAccess(n,  left,  right);	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
3	[BUG]  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right);  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]  return  tryFoldArrayLiteralAccess(n,  left,  right);  [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLiteralAccess(n,  left,  right);	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
4	[BUG]  [BUGGY]  return  tryFoldArrayElem(n,  left,  right);  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]  return  tryFoldArrayElem(n,  left,  right);  [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayElem(n,  left,  right);	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
5	[BUG]  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]  return  tryFoldObjectPropAccess(n,  left,  right);  [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectPropAccess(n,  left,  right);	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
6	[BUG]  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]  return  tryFoldArrayPropAccess(n,  left,  right);  [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayPropAccess(n,  left,  right);	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
7	[BUG]  [BUGGY]    [CE]  orphaned  case  [FE]                AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]    [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	  	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
8	[BUG]  [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right);  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]  return  tryFoldObjectLitAccess(n,  left,  right);  [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldObjectLitAccess(n,  left,  right);	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
9	[BUG]  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right);  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]  return  tryFoldArrayListAccess(n,  left,  right);  [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayListAccess(n,  left,  right);	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
10	[BUG]  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right);  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]  return  tryFoldArrayLitPropAccess(n,  left,  right);  [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldArrayLitPropAccess(n,  left,  right);	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
11	[BUG]  [BUGGY]  return  tryFoldLitArrayAccess(n,  left,  right);  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());  if  (left.isObjectLit())  {  return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  [BUGGY]  return  tryFoldLitArrayAccess(n,  left,  right);  [BUGGY]  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	1364	1364	1	replace	return  tryFoldLitArrayAccess(n,  left,  right);	return  tryFoldArrayAccess(n,  left,  right);  	non-compiled	[CE]  orphaned  case	23	None	replace
