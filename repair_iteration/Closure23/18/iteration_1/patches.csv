bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (left.isObject()  &&  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (left.isObject()  &&  right.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObject()  &&  right.isObjectPropAccess())  {	  if    (left.isObject()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	6	None	replace
2	[BUG]  [BUGGY]  if  (n.isObject()  ||  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (n.isObject()  ||  right.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObject()  ||  right.isObjectPropAccess())  {	  if    (left.isObject()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	6	None	replace
3	[BUG]  [BUGGY]  if  (left.isObject()  ||  right.isObject())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (left.isObject()  ||  right.isObject())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObject()  ||  right.isObject())  {	  if    (left.isObject()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	6	None	replace
4	[BUG]  [BUGGY]  if  (right.isObject()  ||  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (right.isObject()  ||  left.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObject()  ||  left.isObjectPropAccess())  {	  if    (left.isObject()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	6	None	replace
5	[BUG]  [BUGGY]  if  (!left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (!left.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectPropAccess())  {	  if    (left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	2	None	replace
6	[BUG]  [BUGGY]  if  (left.isObjectPropAccess()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (left.isObjectPropAccess()  ||  left.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectPropAccess()  ||  left.isObjectLit())  {	  if    (left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	2	None	replace
7	[BUG]  [BUGGY]  if  (left.isObject()  ||  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (left.isObject()  ||  left.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObject()  ||  left.isObjectPropAccess())  {	  if    (left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	2	None	replace
8	[BUG]  [BUGGY]  if(!n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(!n.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(!n.isObjectPropAccess())  {	  if(n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
9	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObjectPropAccess()  ||  left.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  left.isObjectLit())  {	  if(n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
10	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  &&  left.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObjectPropAccess()  &&  left.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  &&  left.isObjectLit())  {	  if(n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
11	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectLit())  {	  if(n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
12	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  &&!left.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObjectPropAccess()  &&!left.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  &&!left.isObjectLit())  {	  if(n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
13	[BUG]  [BUGGY]  if(n.isObject()  ||  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObject()  ||  n.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  n.isObjectPropAccess())  {	  if(n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
14	[BUG]  [BUGGY]  if(n.isObject()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObject()  ||  right.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  right.isObjectLit())  {	  if(left.isObject()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
15	[BUG]  [BUGGY]  if(left.isObject()  &&  right.isObjectLit())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(left.isObject()  &&  right.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  &&  right.isObjectLit())  {	  if(left.isObject()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
16	[BUG]  [BUGGY]  if(left.isObject()  ||  right.isPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(left.isObject()  ||  right.isPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  ||  right.isPropAccess())  {	  if(left.isObject()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
17	[BUG]  [BUGGY]  if(right.isObject()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(right.isObject()  ||  left.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObject()  ||  left.isObjectLit())  {	  if(left.isObject()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
18	[BUG]  [BUGGY]  if(n.isObject()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObject()  ||  left.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObject()  ||  left.isObjectLit())  {	  if(left.isObject()    ||    right.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	10	None	replace
19	[BUG]  [BUGGY]  if  (!right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (!right.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectPropAccess())  {	  if    (!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	4	None	replace
20	[BUG]  [BUGGY]  if  (!left.isPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (!left.isPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isPropAccess())  {	  if    (!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	4	None	replace
21	[BUG]  [BUGGY]  if  (right.isObjectPropAccess()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (right.isObjectPropAccess()  ||  left.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObjectPropAccess()  ||  left.isObjectLit())  {	  if    (right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	7	None	replace
22	[BUG]  [BUGGY]  if  (right.isObjectPropAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (right.isObjectPropAccess()  ||  right.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObjectPropAccess()  ||  right.isObjectLit())  {	  if    (right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	7	None	replace
23	[BUG]  [BUGGY]  if(left.isObject()  &&  left.isObjectLit())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(left.isObject()  &&  left.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  &&  left.isObjectLit())  {	  if(left.isObject()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
24	[BUG]  [BUGGY]  if(left.isPropAccess()  ||  left.isObjectLit())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(left.isPropAccess()  ||  left.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isPropAccess()  ||  left.isObjectLit())  {	  if(left.isObject()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
25	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	5	None	replace
26	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	5	None	replace
27	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  left  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	5	None	replace
28	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	5	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkArgument(n.isGetElem());  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  Preconditions.checkArgument(n.isGetElem());  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.isGetElem());	      	non-compiled	[CE]  orphaned  case	5	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  orphaned  case	5	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETELEM);  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETELEM);	      	non-compiled	[CE]  orphaned  case	5	None	replace
32	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(left.isObjectLit()  ||  right.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  right.isObjectPropAccess())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	9	None	replace
33	[BUG]  [BUGGY]  if(n.isObjectLit()  ||  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObjectLit()  ||  left.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectLit()  ||  left.isObjectPropAccess())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	9	None	replace
34	[BUG]  [BUGGY]  if(left.isObjectLit()  &&  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(left.isObjectLit()  &&  left.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  &&  left.isObjectPropAccess())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	9	None	replace
35	[BUG]  [BUGGY]  if(n.isObjectLit()  ||  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObjectLit()  ||  right.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectLit()  ||  right.isObjectPropAccess())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	9	None	replace
36	[BUG]  [BUGGY]  if  (!n.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (!n.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!n.isObjectLit())  {	  if    (n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	3	None	replace
37	[BUG]  [BUGGY]  if  (right.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (right.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObjectLit())  {	  if    (n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	3	None	replace
38	[BUG]  [BUGGY]  if  (left.isObject()  ||  right.isObjectLiteral())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (left.isObject()  ||  right.isObjectLiteral())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObject()  ||  right.isObjectLiteral())  {	  if    (left.isObject()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	6	None	replace
39	[BUG]  [BUGGY]  if(left.isObjectLit()  &&  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(left.isObjectLit()  &&  right.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  &&  right.isObjectPropAccess())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	9	None	replace
40	[BUG]  [BUGGY]  if(left.isObject()  &&  left.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(left.isObject()  &&  left.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObject()  &&  left.isObjectPropAccess())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	9	None	replace
41	[BUG]  [BUGGY]  if  (!left.isObjectLit()  &&!right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (!left.isObjectLit()  &&!right.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectLit()  &&!right.isObjectPropAccess())  {	  if    (!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	4	None	replace
42	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  Preconditions.checkArgument(right.isGetElem());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  Node  right  =  n.getLastChild();  Preconditions.checkArgument(right.isGetElem());  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.getLastChild();  Preconditions.checkArgument(right.isGetElem());	      	non-compiled	[CE]  orphaned  case	5	None	replace
43	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  Preconditions.checkArgument(right.isGetElem());  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  Node  right  =  n.getFirstChild();  Preconditions.checkArgument(right.isGetElem());  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  right  =  n.getFirstChild();  Preconditions.checkArgument(right.isGetElem());	      	non-compiled	[CE]  orphaned  case	5	None	replace
44	[BUG]  [BUGGY]  if  (left.isObjectPropAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (left.isObjectPropAccess()  ||  right.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectPropAccess()  ||  right.isObjectLit())  {	  if    (left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	2	None	replace
45	[BUG]  [BUGGY]  if  (left.isObjectPropAccess()  &&  right.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (left.isObjectPropAccess()  &&  right.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectPropAccess()  &&  right.isObjectLit())  {	  if    (left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	2	None	replace
46	[BUG]  [BUGGY]  if  (left.isObject())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (left.isObject())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObject())  {	  if    (left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	2	None	replace
47	[BUG]  [BUGGY]  if  (left.isObjectPropAccess()  ||  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (left.isObjectPropAccess()  ||  right.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (left.isObjectPropAccess()  ||  right.isObjectPropAccess())  {	  if    (right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	7	None	replace
48	[BUG]  [BUGGY]  if  (right.isObjectPropAccess()  &&  left.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (right.isObjectPropAccess()  &&  left.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObjectPropAccess()  &&  left.isObjectLit())  {	  if    (right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	7	None	replace
49	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	Node  n  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	5	None	replace
50	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectPosition())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectPosition())  {	  if(n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
51	[BUG]  [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectReference())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObjectPropAccess()  ||  n.isObjectReference())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectPropAccess()  ||  n.isObjectReference())  {	  if(n.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	1	None	replace
52	[BUG]  [BUGGY]  if  (right.isObject()  ||  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (right.isObject()  ||  right.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (right.isObject()  ||  right.isObjectPropAccess())  {	  if    (left.isObject()    ||    right.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	6	None	replace
53	[BUG]  [BUGGY]  if  (n.isObjectLit()  ||  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (n.isObjectLit()  ||  n.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (n.isObjectLit()  ||  n.isObjectPropAccess())  {	  if    (n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	3	None	replace
54	[BUG]  [BUGGY]  if(n.isObjectProp())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(n.isObjectProp())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(n.isObjectProp())  {	  if    (n.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	3	None	replace
55	[BUG]  [BUGGY]  if(right.isObjectLit()  ||  right.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(right.isObjectLit()  ||  right.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObjectLit()  ||  right.isObjectPropAccess())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	9	None	replace
56	[BUG]  [BUGGY]  if(left.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(left.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(left.isObjectLit()  ||  left.isObjectPropAccess()  ||  right.isObjectLit())  {	  if(left.isObjectLit()    ||    left.isObjectPropAccess())    {    	non-compiled	[CE]  orphaned  case	9	None	replace
57	[BUG]  [BUGGY]  if  (!left.isObjectLit()  ||  n.isObjectPropAccess())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (!left.isObjectLit()  ||  n.isObjectPropAccess())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectLit()  ||  n.isObjectPropAccess())  {	  if    (!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	4	None	replace
58	[BUG]  [BUGGY]  if  (!left.isObjectLit()  ||!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (!left.isObjectLit()  ||!right.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!left.isObjectLit()  ||!right.isObjectLit())  {	  if    (!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	4	None	replace
59	[BUG]  [BUGGY]  if  (!right.isObjectLit())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if  (!right.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if  (!right.isObjectLit())  {	  if    (!left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	4	None	replace
60	[BUG]  [BUGGY]  if(right.isObject()  ||  right.isObjectLit())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryFoldGetElem(Node  n,  Node  left,  Node  right)  {  Preconditions.checkArgument(n.isGetElem());    [BUGGY]  if(right.isObject()  ||  right.isObjectLit())  {  [BUGGY]    return  tryFoldObjectPropAccess(n,  left,  right);  }  if  (left.isArrayLit())  {  return  tryFoldArrayAccess(n,  left,  right);  }  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldGetElem  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  equivalent  late  leftLiteral  lval  nullRight  result  rightLiteral  undefinedLeft  undefinedRight  valueNull  valueUndefined  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lv  lval  negNum  numValue  result  rv  rval  val  value  Node  left  n  right  	projects/Closure23/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.5	1359	1359	1	replace	if(right.isObject()  ||  right.isObjectLit())  {	  if(left.isObject()    ||    left.isObjectLit())    {    	non-compiled	[CE]  orphaned  case	8	None	replace
